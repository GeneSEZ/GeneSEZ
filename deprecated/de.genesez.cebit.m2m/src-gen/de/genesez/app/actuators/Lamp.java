package de.genesez.app.actuators;/* PROTECTED REGION ID(java.mclassifier.other.import.code_14_0_8a7027a_1203501257642_86386_978) ENABLED START *//* TODO put your imports here */import java.lang.String;import com.avidwireless.avidirector.IllegalHardwareAddressException;import com.avidwireless.avidirector.AvidUtil;import com.avidwireless.avidirector.InvalidHardwareOperationException;import de.genesez.j2meframework.actuators.Actuator;import com.avidwireless.avidirector.Logger;/* PROTECTED REGION END *//** * @author nicher */public class Lamp extends Actuator {		// ////////////////////////////////////////////////////////////////////////	// generated variable, constant and association declarations	// ////////////////////////////////////////////////////////////////////////		private com.avidwireless.avidirector.iodevice.M2M_IODevice ioDevice;		// ////////////////////////////////////////////////////////////////////////	// generated constructor implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @param  address  	 * @param  app  	 * @return  	 */	public Lamp(String address, com.avidwireless.avidirector.AVIDirectorMain app) throws com.avidwireless.avidirector.IllegalHardwareAddressException, com.avidwireless.avidirector.InvalidHardwareOperationException {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_8a7027a_1203501526771_613628_1081) ENABLED START */		/* TODO put your own implementation code here */		super(address);				this.rangeMin = 0;		this.rangeMax = 62;				ioDevice = app.getM2M_IODevice(AvidUtil.parseInt(address));		if (ioDevice != null) {			Logger.log("Setting up " + ioDevice.getDeviceAddress());			ioDevice.setAnalogOutput();		} else {			Logger.debugln("No " + address + " Device specified");		}		/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated derived attribute method implementations	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated association method implementations	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated abstract method declaration	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated normal method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @param  measureValue  	 */	public void regulate(float measureValue) {				/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_8a7027a_1203522783748_924836_1209) ENABLED START */		/* TODO put your own implementation code here */		if (measureValue >= rangeMin && measureValue <= rangeMax) {			try {				ioDevice.writePinAnalog(measureValue);			} catch (IllegalHardwareAddressException e) {				Logger.log(ioDevice.getDeviceName() + " : " + e.getMessage());			} catch (InvalidHardwareOperationException e) {				Logger.log(ioDevice.getDeviceName() + " : " + e.getMessage());			}		}				/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated getter and setter method implementations	// ////////////////////////////////////////////////////////////////////////		public com.avidwireless.avidirector.iodevice.M2M_IODevice getIoDevice() {		return ioDevice;	}		public void setIoDevice(com.avidwireless.avidirector.iodevice.M2M_IODevice _ioDevice) {		ioDevice = _ioDevice;	}		// ////////////////////////////////////////////////////////////////////////	// own implementations	// ////////////////////////////////////////////////////////////////////////		/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._14_0_8a7027a_1203501257642_86386_978) ENABLED START */	/* TODO put your own implementation code here */	/* PROTECTED REGION END */}