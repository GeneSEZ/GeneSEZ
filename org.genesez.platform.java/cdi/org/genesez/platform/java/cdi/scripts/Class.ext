/**
 *  modificates the metamodel before generation of the source code of classes
 *  
 * @author  nancy doerfel
 * @date    2010-11-06
 */

// based on genesez meta model
import gcore;

extension org::genesez::platform::common::log::Log;
extension org::genesez::platform::common::AccessHelper;
extension org::genesez::platform::common::m2m::CreateTemplate;
extension org::genesez::platform::common::m2m::MakeElement;
extension org::genesez::platform::java::scripts::Naming;
extension org::genesez::platform::java::cdi::scripts::Functionality;

Void cdiClassModifications(MClass this) :
    this.addClassIsSerializable() ->
    this.addEntityHomeClass()
    ;

/**
 * Check if class needs to be serializeable and add interface.
 */
Void addClassIsSerializable(MClass this) :
    (this.realization.select(e| e != null && e.name().matches("Serializable")).isEmpty)
    && (   
           this.hasStereotype("cdiApplicationScoped")
        || this.hasStereotype("cdiSessionScoped")
        || this.hasStereotype("cdiRequestScoped")
        || this.hasStereotype("cdiConversationScoped")
        || this.hasStereotype("cdiDecorator")
        )
    ? (
        this.realization.add(createExternal(this.model(), "Serializable"))
      )
    : Void;


/**
 * Create the Home Class and the Home Interface
 */
Void addEntityHomeClass(MClass this) :
    this.hasStereotype("cdiExtEntityHome")
    ? (
        //this.createEntityHomeClass(this.createEntityHomeInterface())
        this.createEntityHomeClass()
      )
    : Void;



/**
 * Creates an enity home Interface, e.g. IAccountHome for entity Account
 
 * @param entityClass the entity class as base class for the home class
 */
MInterface createEntityHomeInterface(MClass entityClass) :
    let homeInterface = createInterface(entityClass.package(), entityClass.xmiGuid+"_Interface_"+entityClass.name+"Home", entityClass.name+"Home") :
    (
        entityClass.operation.select(e|e.isConstructor() == false).cloneOperation(homeInterface) ->
        // extends IHomeBean<..., EntityManager>
        homeInterface.generalization.add(createExternal(entityClass.model(), "IHomeBean<"+entityClass.name+", EntityManager>")) ->
        homeInterface
    );
   
    
/**
 * Creates an enity home class, e.g. AccountHome for entity Account
 
 * @param entityClass the entity class as base class for the home class
 */
create MClass createEntityHomeClass(MClass entityClass) :
    let homeClass = createClass(entityClass.package(), entityClass.xmiGuid+"_"+entityClass.name+"Home", entityClass.name+"Home") :
    (
        // Public
        homeClass.setVisibility("public") ->
        // extends HomeBean
        homeClass.generalization.add(createExternal(entityClass.model(), "HomeBean<"+entityClass.name+", EntityManager>")) ->
        
        // Is conversation scoped and needs @Named annotation
        homeClass.stereotype.add(createStereotype(entityClass.model(), "cdiConversationScoped", "cdiConversationScoped")) ->
        homeClass.stereotype.add(createStereotype(entityClass.model(), "di4javaNamed", "di4javaNamed")) ->
        
        // also needs to be a session bean to use em and managed transactions etc.
        homeClass.addSessionBeanStereotype(entityClass.model()) ->
        homeClass.addEntityManager(entityClass) ->
        
        // associations will be generated as injected fields for other home classes
        entityClass.owningInitializableAssociationRoles().createAssociationInjectionProperty(homeClass) ->
        
        // need some general operations
        homeClass.addListOperations(entityClass) ->
        ( let 	o = homeClass.makeOperation("getEntityManager", homeClass.name + ".getEntityManager", "public") :
        		o.setReturn( makeParameter( o, o.xmiGuid + ".return", "", "", "return", createExternal( o.model(), "EntityManager" ) ) )
		) ->
		homeClass.makeOperation("wire", "public") ->
        homeClass.addEjbRemoveOperation()
        
        // implements Home Interface
       // homeClass.realization.add(homeInterface) ->
        // home interface should implement all methods of home bean
      //  homeClass.operation.select(e|e.isConstructor() == false).cloneOperation(homeInterface)
    ) ->
    homeClass;

/**
 * Add all additionally interfaces listet in the stereotype  
 *
 *  @param  this         instance of MClassifier
 *  @param  container    instance of MClassifier

Void addEntityHomeRealizationList(MClassifier this, MClassifier entityClass): 
    (entityClass.getTaggedValue("cdiExtEntityHome", "realizations").length > 0)
    ? (   
        entityClass.getTaggedValue("cdiExtEntityHome", "realizations").split(",").addEntityHomeRealization(this, entityClass)
      )
    : Void;
 */
 
/**
 * Finally add the interface, if it is part of the model.
 *  
 *  @param  this         instance of MClassifier
 *  @param  container    instance of MClassifier
 
Void addEntityHomeRealization(String this, MClassifier homeClass, MClassifier entityClass): 
    (let i = entityClass.model().allClassifiers().selectFirst(e|e.metaType == MInterface && e.name().matches(this.trim())) :
    (
        (i != null)
        ? ( 
            homeClass.realization.add((MInterface) i) -> 
            i.operation.cloneOperation(homeClass)
          )
        : Void
    )
    );
*/
 
/**
 * Adds a stateful session bean annotation 
 *  @param  this         instance of MClassifier
 *  @param  container    instance of MClassifier
 */
Void addSessionBeanStereotype(MClassifier this, MModel container) :
    let s = makeSessionBeanStereotype(this) :
        this.stereotype.add(s) ->
        createTaggedValue(this, createTag(s, "stateful", "boolean"), "true");

MStereotype makeSessionBeanStereotype(MClassifier container) :
    let s = createStereotype(container.package().getModel(), "ejb3SessionBean", "ejb3SessionBean") :
        s.property.add(createTag(s, "stateful", "boolean")) ->
        s;
    
/**
 * Adds default entity manager
 *  @param  this         instance of MClassifier
 *  @param  entityClass  instance of MClassifier
 */    
Void addEntityManager(MClassifier this, MClassifier entityClass): 
    entityClass.hasTaggedValue("cdiExtEntityHome", "createDefaultEntityManager", "true") 
    ? (
        let a = this.addAttribute("entityManager", "EntityManager", "private", 1) :
            a.stereotype.add(createStereotype(entityClass.model(), "di4javaInject", "di4javaInject")) -> 
            a.stereotype.add(createStereotype(entityClass.model(), "jpaPersistenceContext", "jpaPersistenceContext"))
      )  
    : Void;
    
/**
 * Adds default list operations
 *  @param  this         instance of MClassifier
 *  @param  entityClass  instance of MClassifier
 */    
Void addListOperations(MClassifier this, MClassifier entityClass):
	( let 	o = entityClass.makeOperation("get"+entityClass.name+"List", entityClass.name+".get"+entityClass.name+"List", "public") :
        		o.setReturn( makeParameter( o, o.xmiGuid + ".return", "", "", "return", createExternal( o.model(), "EntityManager" ) ) )
	) -> 
	( let 	o = entityClass.makeOperation("get"+entityClass.name+"ListCount", entityClass.name + ".get"+entityClass.name+"ListCount", "public") :
        		o.setReturn( makeParameter( o, o.xmiGuid + ".return", "", "", "return", createPrimitiveType( o.model(), "long" ) ) )
	);    

/**
 * Adds a operation annotated with @Remove, necessary when removing EJB
 *
 *  @param  this         instance of MClassifier
 *  @param  entityClass  instance of MClassifier
 */    
Void addEjbRemoveOperation(MClassifier this): 
    let o = makeOperation(this, "removeEjb", "public"): (
        o.stereotype.add(createStereotype(this.model(), "ejb3Remove", "ejb3Remove"))    
    );
        
/**
 * Takes an Association Role, transforms it into an attribute and adds it to the homeClass.
 *
 * @param role          association role to add as attriute to homeClass
 * @param homeClass     base class and container or the new attribute
 */
Void createAssociationInjectionProperty(MAssociationRole role, MClass homeClass) :

    let a = addAttribute(homeClass, role.type().name().toLowerCase()+"Home", role.type().name()+"Home", "private", 1):
        a.setType(role.type) ->
        a.stereotype.add(createStereotype(homeClass.model(), "di4javaInject", "di4javaInject")) ->
        a.stereotype.add(createStereotype(homeClass.model(), "cdiExtEntityHome", "cdiExtEntityHome")) ->
    (role.multiplicity != 1) 
        ? ( let	o = homeClass.makeOperation("get"+role.type().name()+"List", homeClass.name+".get"+role.type().name()+"List", "public") :
        		o.setReturn( makeParameter( o, o.xmiGuid + ".return", "", "", "return", createExternal( o.model(), "List<"+role.type().name()+">" ) ) ) )
        : Void;
    
/**
 *  creates an attribute and adds it to the property list
 *  
 *  @param  container       instance of MClassifier
 *  @param  name            name of the attribute
 *  @param  type            type of the attribute
 *  @param  visibility      visibility of the attribute
 *  @param  multiplicity    multiplicity of the attribute
 */
MAttribute addAttribute(MClassifier container, String name, String type, String visibility, int multiplicity) :
    let a = createAttribute(container, container.xmiGuid+"_"+name, name) :
        a.processAttribute("", false, false) ->
        a.setMultiplicity(multiplicity) ->
        a.setVisibility(visibility) ->
        a.setType(createExternal(container.model(), type)) ->        
        a;
