/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides support to deal with access operations based on the stereotype «accessor».
 * 
 * @author	andre pflueger
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
extension org::genesez::metamodel::core::util::AccessHelper;
extension org::genesez::metamodel::core::util::Conversion;
extension org::genesez::metamodel::core::util::ExtensionMechanism;
extension org::genesez::metamodel::core::util::ModelNavigation;
extension org::genesez::metamodel::core::util::m2m::CloneElement;
extension org::genesez::metamodel::core::util::m2m::CreateElement;
extension org::genesez::metamodel::core::util::m2t::Helper;
extension org::genesez::metamodel::core::util::profile::GeneSEZProfile;
extension org::genesez::metamodel::core::util::profile::AccessorStereotype;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::util::logging::Logging;

/**
 * Checks the stereotype accessor on static final attributes.
 * If the stereotype is assigned and the generation of a set access operation is enabled,
 * a warning is issued.
 * If the stereotype is not assigned, the generation of a set access operation is suppressed
 * by setting the appropriate tagged value to false.
 * 
 * @TODO	the warning log message should be put into a model validation script
 * @TODO	[toh] i was unable to grasp the whole semantical meaning, maybe a refactoring is appropriate
 * 			(non static attributes, if gen setter is true, it is not set to false)
 */
MAttribute emAccessorForStaticFinalAttribute(MAttribute this) :
	final && static
		? (
			emHasStereotype( prAccessor() )
				? (
					emHasTaggedValue( prAccessor(), prAccessorSetter(), "true" )
						? logWarn("Generation of a set access operation for a static final attribute makes no sense!" + fqmn())
						: this
				) : prAssignGeneSezAccessorStereotype( generateGetter(), false, false, false )
		) : this ->
	this;

/**
 * Ensures the existence of a get access operation for the specified property if
 * the appropriate tagged value of the stereotype accessor is present.
 * 
 * In case a get access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 * 
 * Note: using of generateGetter methods secures generateGetterSetter logic
 * this method must be executed before createGetterSetterOperations for MClass (not yet
 * implemented; accessor sereotypes on MClass instances will be considered but not removed)
 */
MProperty emEnsureGetAccessOperation(MProperty this) :
	generateGetter()
		? (
			classifier.ensureOperationExistence( xmiGuid + "_get", asGetter() )
				.processOperation( "public", false, false, false )
				.ensureReturnParameterExistence( xmiGuid + "_getReturn", "" )
				.processParameter( null, "return", multiplicity.cloneMultiplicity() )
				.wireType( type )
				.operation
				.ensureStereotypeAssignment(
					navModel().ensureStereotypeExistence("http://www.genesez.de/GetterOperation", "http://www.genesez.de/GetterOperation")
				)
		) : this ->
	this;

/**
 * Ensures the existence of a set access operation for the specified property if
 * the appropriate tagged value of the stereotype accessor is present.
 * 
 * In case a set access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 * 
 * Note: using of generateSetter methods secures generateGetterSetter logic
 * this method must be executed before createGetterSetterOperations for MClass (not yet
 * implemented; accessor sereotypes on MClass instances will be considered but not removed)
 * 
 * @TODO	check if in case of a multi-valued property, instead of a set...(collection type) operation and add/remove operation would be more appropriate
 */
MProperty emEnsureSetAccessOperation(MProperty this) : 
	generateSetter()
		? (
			classifier.ensureOperationExistence( xmiGuid + "_set", asSetter() )
				.processOperation( "public", false, false, false )
				.ensureParameterExistence( xmiGuid + "_setParam", asAttribute() )
				.processParameter( null, "in", multiplicity.cloneMultiplicity() )
				.wireType( type )
				.operation
				.ensureStereotypeAssignment(
					navModel().ensureStereotypeExistence("http://www.genesez.de/SetterOperation", "http://www.genesez.de/SetterOperation")
				)
		) : this ->
	this;

/**
 * Returns the get access operation for the specified property.
 */
MOperation emGetAccessOperation(MProperty this) :
	classifier.operation.select( o|o.isGetter() && o.parameter.isEmpty );

/**
 * Returns the set access operation for the specified property.
 */
MOperation emSetAccessOperation(MProperty this) :
	classifier.operation.select( o|o.isSetter() && o.parameter.size == 1 );

