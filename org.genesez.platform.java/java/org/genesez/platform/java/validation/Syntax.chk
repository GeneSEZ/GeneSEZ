/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 * 
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Validates a model for generation using the java platform
 * 
 * @author	nico herbig
 * @author	tobias haubold
 * @author	andre pflueger
 */

extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::Conversion;
extension org::genesez::metamodel::core::util::Helper;
extension org::genesez::metamodel::core::util::profile::GeneSEZProfileAccessElement;
extension org::genesez::metamodel::core::util::profile::AccessorStereotype;
extension org::genesez::util::logging::Logging;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	type related things
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks the inheritance of java types
 * @return	false generates an error, if multiple inheritance is used on a classifier which is not an interface
 */
context MClassifier ERROR "GeneSEZ: multiple inheritance is only allowed for interfaces: " + fqmn() : 
	generalization.size > 1
		? (metaType == MInterface ? true : false)
		: true;

/**
 * checks the modifiers of an attribute of an interface
 * @return	generates a warning if the attibute has other modifiers than 'public', 'static' and 'final'
 */
context MAttribute WARNING "GeneSEZ: the modifiers of the interface attribute will be ignored! only 'public', 'static + 'final' are permitted! " + fqmn() :
	classifier.metaType == MInterface
		? (visibility == "public" && static && final ? true : false)
		: true;

/**
 * checks the modifiers of an operations of an interface
 * @return	generates a warning if the operation has other modifiers than 'public' and 'abstract'
context MOperation WARNING "GeneSEZ: the modifiers of the interface operation will be ignored! only 'public' and 'abstract' are permitted! " + fqn() :
	classifier.metaType == MInterface
		? (visibility == "public" && abstract ? true : false)
		: true;
 */

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	other things
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if a default set access operation for a final attribute should be generated
 * @return	false generates a warning, if a final attribute owns the accessor stereotype with tagged value setter == true 
 */
context MAttribute WARNING "GeneSEZ: Generation of a default set access operation for a final attribute makes no sense! Set access operation will not be generated." + fqmn() :
	final && multiplicity.isSingleValued() && hasDefaultValue() && emGenerateSetAccess()
		? false
		: true;

context MProperty WARNING "GeneSEZ: you shouldn't mix generics and arrays! you will dive into some problems, see: joshua block, effective java, generics, http://java.sun.com/docs/books/effective/generics.pdf! " + fqmn() :
	multiplicity.isMultiValued() && prHasPrimitiveStereotype() && hasGenericRealization()
		? false
		: true;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	reserved keywords
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if all names of elements are not reserved java words
 * 'assert' was added in java 1.4, 'enum' was added in java 5
 * @return	 true, if the name is not a reserved java word, otherwise false
 */
context MElement WARNING "GeneSEZ: the name '" + name + "' is a reserved java word! Make sure your naming scripts modify the name of " + fqmn() :
	{ MStereotype, MTag, MTaggedValue }.contains( metaType )
		? true
		: (
	!{"abstract", "continue", "for", "new", "switch", "assert", "default", "goto", 
		"package", "synchronized", "boolean", "do", "if", "private", "this", "break", 
		"double", "implements", "protected", "throw", "byte", "else", "import", "public", 
		"throws", "case", "enum", "instanceof", "return", "transient", "catch", "extends", 
		"int", "short", "try", "char", "final", "interface", "static", "void", "class", 
		"finally", "long", "strictfp", "volatile", "const", "float", "native", "super", "while"
	}.contains(name)
	);