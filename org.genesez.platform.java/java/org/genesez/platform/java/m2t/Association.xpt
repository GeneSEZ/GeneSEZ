«REM»
	(c) GeneSEZ Research Group <genesez@fh-zwickau.de>
	All rights reserved.
	
	Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
«ENDREM»
«IMPORT gcore»

«REM»
	Performs the implementation of associations.
	
	@author georg beier
	@author	nico herbig
	@author	tobias haubold
	@author andre pflueger (last)
«ENDREM»
«EXTENSION org::genesez::metamodel::core::util::AccessElement»
«EXTENSION org::genesez::metamodel::core::util::Helper»
«EXTENSION org::genesez::metamodel::core::util::mapping::TypeMapping»
«EXTENSION org::genesez::metamodel::core::util::profile::AccessorStereotype»

«EXTENSION org::genesez::platform::java::util::Naming»
«EXTENSION org::genesez::platform::java::util::Helper»
«EXTENSION org::genesez::platform::java::util::Conversion»

«EXTENSION org::genesez::metamodel::core::util::Conversion»
«EXTENSION org::genesez::util::logging::Logging»


«REM»
	Generates the declaration of association attributes.
«ENDREM»
«DEFINE Declaration FOR MClass -»
«EXPAND AssociationDeclaration -»
«ENDDEFINE»

«REM»
	Generates accessors for association attributes.
«ENDREM»
«DEFINE Accessors FOR MClass -»
	«EXPAND AccessorImplementation»
«ENDDEFINE»

«DEFINE Accessors FOR MInterface -»
	«EXPAND AccessorDeclaration»
«ENDDEFINE»


«REM»
	Generates association attributes.
«ENDREM»
«DEFINE AssociationDeclaration FOR MClass -»
	«REM»«EXPAND _AssocClassReferences FOR ownedAssociation-»«ENDREM»
	«EXPAND AssociationDeclaration FOREACH allInitializableAssociationRoles() -»
«ENDDEFINE»

«DEFINE AssociationDeclaration FOR MClassifier -»
«ENDDEFINE»

«REM»
	Generates an association attribute.
«ENDREM»
«DEFINE AssociationDeclaration FOR MAssociationRole -»
	«EXPAND Comment::Association -»
	«IF hasAssociationClass() -»
		«IF multiplicity.isSingleValued() -»
			«EXPAND Modifier» «type.asTypeName()-» «asAttribute() -»;
			«EXPAND Comment::AssociationClass -»
			«EXPAND Modifier» «association.associationClass.asTypeName()-» «association.associationClass.asAttribute() -»;
		«ELSE -»
			«EXPAND Modifier» LinkedHashMap<«type.asTypeName() -», «association.associationClass.asTypeName() -»> «asAttribute()» = new LinkedHashMap<«type.asTypeName() -», «association.associationClass.asTypeName() -»>();
		«ENDIF -»
	«ELSE-»
		«EXPAND Annotation -»
		«IF multiplicity.isSingleValued() -»
			«EXPAND Modifier» «type.asTypeName()-» «asAttribute() -»;
		«ELSE-»
			«EXPAND Modifier» «mapCollection()»<«type.asTypeName()-»> «asAttribute()» = new «mapCollection("Implementation")»<«type.asTypeName() -»>();
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«REM»
	Generates the modifiers for an association attribute.
«ENDREM»
«DEFINE Modifier FOR MAssociationRole-»
	«modifier()-»
«ENDDEFINE»

«REM»
	Generates the declaration of association attributes.
	
	@deprecated	use AccessOperationImpl instead with AccessOperation
«ENDREM»
«DEFINE AccessorDeclaration FOR MInterface-»
	«REM»«FOREACH property.typeSelect(MAssociationRole) AS a-»
		«IF a.emGenerateGetAccess()-»«EXPAND _GetterDecl FOR a-»«ENDIF»
		«IF a.emGenerateSetAccess()-»
			«EXPAND _InsertInDecl FOR a-»
			«EXPAND _RemoveFromDecl FOR a-»
		«ENDIF»
	«ENDFOREACH-»«ENDREM»
«ENDDEFINE»

«REM»
	Generates the implementation of association attributes.
	
	@deprecated	use AccessOperationImpl instead with AccessOperation
«ENDREM»
«DEFINE AccessorImplementation FOR MClass -»
	«REM»«EXPAND _AssocClassReferenceGetters FOR ownedAssociation-»«ENDREM»
	«REM»«FOREACH property.typeSelect(MAssociationRole) AS a -»
		«IF a.emGenerateGetAccess() -»«EXPAND _GetterImpl FOR a -»«ENDIF»
		«IF a.emGenerateSetAccess() -»
			«EXPAND _InsertInImpl FOR a -»
			«EXPAND _RemoveFromImpl FOR a -»
		«ENDIF»
	«ENDFOREACH -»«ENDREM»
«ENDDEFINE»

«REM»
	Generates a get access method declaration.
	
	@deprecated	use AccessOperationImpl instead with AccessOperation
«ENDREM»
«DEFINE _GetterDecl FOR MAssociationRole -»
	«logWarn("Generation of get access operation declaration using Association template is deprecated! " + fqmn()) -> "" -»
	«IF hasAssociationClass() -»
		«EXPAND _CommentGetter-»
		public «mapCollection()»<«type.asTypeName()»> «asGetter()»();
		public «mapCollection()»<«type.asTypeName()»> «asGetter()»«type.asTypeName()»();
	«ELSE-»
		«IF multiplicity.isSingleValued() -»
			«EXPAND _CommentGetter-»
			public «mapCollection()»<«type.asTypeName()»> «asGetter()»();
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM»
	Generates a get access method implementation.
	
	@deprecated	use AccessOperationImpl instead with AccessOperation
«ENDREM»
«DEFINE _GetterImpl FOR MAssociationRole-»
	«logWarn("Generation of get access operations using Association template is deprecated! " + fqmn()) -> "" -»
	«IF hasAssociationClass() -»
		«REM»public «mapType()»<«type.asTypeName()»> «asGetter()»() {
			«mapType("Implementation")»<«type.asTypeName()»> _result = new «mapType("Implementation")»<«type.asTypeName()»>();
			for(«type.asTypeName()» _assoc : «asAttribute()») {
				_result.add(_assoc.«asGetter()»());
			}
			return _result;
		}
		
		/** 
		  * accessor to the association class objects
		  */
		public «mapType()»<«type.asTypeName()»> «asGetter()»«type.asTypeName()»() {
			«IF unique == true-»
				return java.util.Collections.unmodifiableSet(«asAttribute()»);
			«ELSE-»
				return java.util.Collections.unmodifiableSet(«asAttribute()»);
			«ENDIF-»
		}«ENDREM»
	«ELSE-»
		«EXPAND _CommentGetter-»
		«EXPAND Annotation-»
		«IF multiplicity.isSingleValued() -»
			public «type.asTypeName()» «asGetter()»() {
				return «asAttribute()»;
			}
		«ELSE-»
			public «mapCollection()-»<«type.asTypeName()»> «asGetter()»() {
				return this.«asAttribute()-»;
				«REM»«IF unique == true-»
					return java.util.Collections.unmodifiableSet(«asAttribute()»);
				«ELSEIF unique == false && ordered == false-»
					return java.util.Collections.unmodifiableSet(«asAttribute()»);
				«ELSE»
					return java.util.Collections.unmodifiableList(«asAttribute()»);
				«ENDIF-»«ENDREM»
			}
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM»
	Generates an insert in (add) access method declaration.
	
	@deprecated	use AccessOperationImpl instead with AccessOperation
«ENDREM»
«DEFINE _InsertInDecl FOR MAssociationRole-»
	«logWarn("Generation of add access operation declaration using Association template is deprecated! " + fqmn()) -> "" -»
	«IF hasAssociationClass() -»
		«REM»public void «asInsertIn()»(«type.asTypeName()» _in, «type.asTypeName()» _at);«ENDREM»
	«ELSE-»
		«EXPAND _CommentAccessor-»
		«IF multiplicity.isMultiValued() -»
			public void «asInsertIn()-»(«type.asTypeName()» «asAttribute()-»);
		«ELSEIF multiplicity.isSingleValued() -»
			public void «asSetter()-»(«type.asTypeName()» «asAttribute()-»);
		«ENDIF»
	«ENDIF-»
«ENDDEFINE»

«REM»
	Generates an insert in (add) access method implementation.
	
	@deprecated	use AccessOperationImpl instead with AccessOperation
«ENDREM»
«DEFINE _InsertInImpl FOR MAssociationRole-»
	«logWarn("Generation of add access operations using Association template is deprecated! " + fqmn()) -> "" -»
	«IF hasAssociationClass() -»
		«REM»/**
		  * insert into association, generate linked association class object
		  * @param _other partner object
		  * @return newly generated linked association class object
		  */
		public «type.asTypeName()» «asInsertIn()»(«type.asTypeName()» _other) {
			«IF association.end.first() != this-»
				«type.asTypeName()» _assoc = new «type.asTypeName()»(this, _other);
			«ELSE-»
				«assocClass().mapName()» _assoc = new «type.asTypeName()»(_other, this);
			«ENDIF-»
			this.«asVariable()».add(_assoc);
		«IF opposite != null-»
			_other.«opposite.asInsertIn()»(_assoc); 
		«ENDIF-»
			return _assoc;
		}
		
		/**
		  * insert linked association class object into association
		  * @param _other partner object
		  * @return newly generated linked association class object
		  */
		public void «asInsertIn()»(«type.asTypeName()» _assoc) {
			if (this.«asAttribute()».contains(_assoc)) {
					return;
			}
			if(_assoc.«opposite.asGetter()»() != this) {
				throw new RuntimeException("inconsistent association object");
			}
			this.«asAttribute()».add(_assoc);
		}«ENDREM»
	«ELSE-»
		«EXPAND _CommentAccessor-»
		«IF multiplicity.isMultiValued() -»
			public void «asInsertIn()-»(«type.asTypeName()-» «asAttribute()-») {
				«IF multiplicity.isSingleValued() -»
					if (this.«asAttribute()-» == «asAttribute()-») {
						return;
					}
					«IF opposite != null && opposite.multiplicity.upperBound != 1-»
						if (this.«asAttribute()-» != null) {
							this.«asAttribute()-».«opposite.asRemoveFrom()-»(this);
						}
					«ENDIF-»
					this.«asAttribute()-» = «asAttribute()-»;
				«ELSE-»
					if (this.«asAttribute()-».contains(«asAttribute()-»)) {
						return;
					}
					this.«asAttribute()-».add(«asAttribute()-»);
				«ENDIF-»
				«IF opposite != null && oppositeMultiplicity.isMultiValued() 
					&& opposite.emGenerateSetAccess()-»
					if (!«asAttribute()-».«opposite.asGetter()-»().contains(this)) {
						«asAttribute()-».«opposite.asInsertIn()-»(this);
					}
				«ELSEIF opposite != null && oppositeMultiplicity.isSingleValued() 
						&& opposite.emGenerateSetAccess()-»
					«asAttribute()-».«opposite.asSetter()-»(this);
				«ENDIF-»
			}
		«ELSEIF multiplicity.isSingleValued() -»
			public void «asSetter()-»(«type.asTypeName()-» «asAttribute()-»){
				this.«asAttribute()-» = «asAttribute()-»; 
			}
		«ENDIF»
	«ENDIF-»
«ENDDEFINE»

«REM»
	Generates a remove from (remove) access method declaration.
«ENDREM»
«DEFINE _RemoveFromDecl FOR MAssociationRole-»
	«logWarn("Generation of remove access operation declaration using Association template is deprecated! " + fqmn()) -> "" -»
	«IF multiplicity.isMultiValued() -»
		«EXPAND _CommentAccessor-»
		public void «asRemoveFrom()-»(«type.asTypeName()-» «asAttribute()-»);
	«ENDIF»
«ENDDEFINE»

«REM»
	Generates a remove from (remove) access method implementation.
	
	@deprecated	use AccessOperationImpl instead with AccessOperation
«ENDREM»
«DEFINE _RemoveFromImpl FOR MAssociationRole-»
	«logWarn("Generation of remove access operations using Association template is deprecated! " + fqmn()) -> "" -»
	«IF hasAssociationClass() -»
		«REM»/**
		  * remove entry from association indexed by its association class object
		  */
		public void «asRemoveFrom()»(«type.asTypeName()» _assoc) {
			if (!«asAttribute()».contains(_assoc)) {
				return;
			}
			«asAttribute()».remove(_assoc);
			«IF opposite != null-»
				_assoc.«asGetter()»().«opposite.asRemoveFrom()»(_assoc);
			«ENDIF-»
		}«ENDREM»
	«ELSE-»
		«IF multiplicity.isMultiValued() -»
			«EXPAND _CommentAccessor-»
			public void «asRemoveFrom()-»(«type.asTypeName()-» «asAttribute()-») {
				«IF multiplicity.isSingleValued() -»
					if (this.«asAttribute()-» != «asAttribute()-») {
						return;
					}
					this.«asAttribute()-» = null;
				«ELSE-»
					if (!this.«asAttribute()-».contains(«asAttribute()-»)) {
						return;
					}
					this.«asAttribute()-».remove(«asAttribute()-»);
				«ENDIF-»
				«IF opposite != null && opposite.multiplicity.upperBound != 1 
					&& opposite.emGenerateSetAccess()-»
					if («asAttribute()-».«opposite.asGetter()-»().contains(this)) {
						«asAttribute()-».«opposite.asRemoveFrom()-»(this);
					}
				«ELSEIF opposite != null && oppositeMultiplicity.isSingleValued() 
					&& opposite.emGenerateSetAccess()-»
					«asAttribute()-».«opposite.asSetter()-»(null);
				«ENDIF-»
			}
		«ENDIF»
	«ENDIF-»
«ENDDEFINE»

«DEFINE _CommentGetter FOR MAssociationRole-»
	/**
	 * accessor for association to «name»
	«IF hasComment()-»
		«comment().formatCommentAsterix()»
	«ENDIF-»
	 */
«ENDDEFINE»

«DEFINE _CommentAccessor FOR MAssociationRole-»
	/**
	 * accessor for association to «name»
	«IF hasComment()-»
	 	* @see {@link «asGetter()»}
	«ENDIF-»
	 */
«ENDDEFINE»

«REM»
«DEFINE _AssocClassReferenceGetters FOR MAssociation-»
	«FOREACH end AS aend-»
		/** getter of reference attribute to the managed association end  «aend.asVariable()»*/
		public «aend.type.asTypeName()» «aend.asGetter()»() {
			return «aend.asVariable()»;
		}
	«ENDFOREACH-»
«ENDDEFINE»
«ENDREM»

«REM»
«DEFINE _AssocClassReferences FOR MAssociation-»
	«FOREACH end AS aend-»
		/** reference attribute to the managed association end */
		private «aend.type.asTypeName()-» «aend.asAttribute()-»;
	«ENDFOREACH-»
«ENDDEFINE»
«ENDREM»

«DEFINE Annotation FOR MAssociationRole -»
«ENDDEFINE»
