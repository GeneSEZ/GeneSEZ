/**
 * Helper to generate imports
 * 
 * @author	nico herbig
 * @author	tobias haubold (last)
 * @date	2007-07-16
 */

// based on genesez meta model
import gcore;

extension org::genesez::metamodel::core::util::AccessHelper;
extension org::genesez::platform::java::util::Conversion;
extension org::genesez::metamodel::core::util::ModelNavigation;
extension org::genesez::metamodel::core::util::mapping::TypeMapping;
extension org::genesez::util::logging::Logging;

/**
 * determines if an import of a classifier is needed for a classifier
 * @param	supplier	the type to import
 * @return	true, if the import of the classifier is needed, otherwise false
 */
boolean isImportNeeded(MClassifier supplier, MClassifier this) :
	// check if both are in same package
	navPackage().packageDeclaration() != supplier.navPackage().packageDeclaration();

/**
 * determines if an import of a type is needed for a classifier
 * @param	supplier	the type to import
 * @return	true, if the import of the type is needed, otherwise false
 */
boolean isImportNeeded(MType supplier, MClassifier this) :
	supplier.metaType == MExternal
		? (hasExternalTypeMapping( (MExternal)supplier, "Import" )
			? !supplier.mapName("Import").filterImports()
			: false
		) : supplier.filterImports();

/**
 * filters unnecessary import statements
 * e.g. all imports starting with 'java.lang.' are not needed
 * @return	true, if the import statement is NOT needed, otherwise false
 */
boolean filterImports(String this) : startsWith("java.lang");

/**
 * just there for error free templates ;-)
 * @return	false, so the import is definitely needed
 */
boolean filterImports(MType this) : false;
