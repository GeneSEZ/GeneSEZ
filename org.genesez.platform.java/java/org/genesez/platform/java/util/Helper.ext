/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
 
/**
 * Helper functions for java
 * 
 * @author	André Pflüger <andre.pflueger@fh-zwickau.de>
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> 
 */

// based on genesez meta model
import gcore;

extension org::genesez::platform::java::util::Naming;
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::util::logging::Logging;

/**
 * checks if property is a java primitive data type
 *
 *	@param		this	instance of MProperty
 *
 *	@return  	true, if property is a java primitive data type
 * 
 * @deprecated	use {@link org::genesez::platform::java::util::JavaTypes::isPrimitiveType(MExternal)} instead
 */
boolean isJavaPrimitiveType(MProperty this) : 
	switch (this.type.asTypeName().toLowerCase()) {
		case "boolean": true
		case "int": true
		case "long": true
		case "byte": true
		case "short": true
		case "float": true
		case "double": true
		default: false
	};

/**
 * Checks if the specified property is an immutable type.
 * 
 * @return 	True, if it is an primitive type, String, BigDecimal, otherwise false.
 * @todo: add more immutable java types
 */
boolean isImmutableType(MProperty this) : 
	isJavaPrimitiveType() || 
	(
		switch (this.type.asTypeName().toLowerCase()) {
			case "string": true
			case "bigdecimal": true
			default: false
		}
	);

/**
 * Returns true if the parameter type could be an ellipse (...), otherwise false.
 */
boolean isEllipsePossible(MParameter this) :
	multiplicity.isMultiValued() && operation.return != this && operation.parameter.last() == this;

/**
 *	returns the modifier for a MProperty
 *
 *	@param		this	instance of MProperty
 *
 *	@return  	Java modifier of the MProperty
 */
String modifier(MProperty this) :
	switch(this.visibility) {
		case "package": ""
		default: this.visibility
	};	

/**
 *	returns the modifier for a MClassifier
 *
 *	@param		this	instance of MClassifier
 *
 *	@return  	Java modifier of the MClassifier
 */
String modifier(MClassifier this) :
	switch(this.visibility) {
		case "package": ""
		default: this.visibility
	};

/**
 *	returns the modifier for a MOperation
 *
 *	@param		this	instance of MOperation
 *
 *	@return  	Java modifier of the MOperation
 */
String modifier(MOperation this) :
	switch(this.visibility) {
		case "package": ""
		default: this.visibility
	};

/**
 *	returns the modifier for a MAssociationRole
 *
 *	@param		this	instance of MAssociationRole
 *
 *	@return  	Java modifier of the MAssociationRole
 */
String modifier(MAssociationRole this) :
	switch(this.visibility) {
		case "package": ""
		default: this.visibility
	};