/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 * 
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

extension org::genesez::util::logging::Logging;
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::platform::java::m2m::Constructor;
extension org::genesez::platform::java::seam2::m2m::Stereotypes;
extension org::genesez::platform::java::jbv::m2m::Stereotypes;
extension org::genesez::platform::java::seam2::m2m::Operation;
extension org::genesez::platform::java::seam2::m2m::Naming;
extension org::genesez::platform::java::seam2::m2m::GlobalVar;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::platform::java::util::ExtensionMechanism;

/**
 *	adds a JNDI name for seam components if seam version 2.3 is used
 *	and no JNDI name is already specified for the seam component
 *
 *	In Seam 2.3 it is no longer possible to set a general JNDI pattern in 
 *	components.xml. That is why we have to add a JNDI name for every seam 
 *	component
 *
 *	To specify Seam version use the parameter 'seamVersion' in your 
 *	generator configuration
 *
 *	Generating source code for Seam 2.3 requires customizing the operation
 *	org::genesez::platform::java::seam2::m2m::Naming::jndiNameProjectName()
 *	by usig Xtend aspects in the generator configuration 
 *	to set the name of the project which contains the seam components
 *
 *	By default the prefix 'java:app' is used for the name space of the
 *	seam components. You can change this by customizing the oepration
 *	org::genesez::platform::java::seam2::m2m::Naming::jndiNamePrefix()
 */
Void addJndiNameForSeamComponents(MClass this) :
	globalVarSeamVersion() == "2.3" &&
	this.emHasStereotypeAssignment("seam2Component") &&
	!this.emHasUtilizableTaggedValue("seam2Component", "jndiName")
		? this.setTaggedValue("seam2Component", "jndiName", jndiNamePrefix() + "/" + jndiNameProjectName() + "/" + this.name)
		: "";

/**
  *	if there is at least on property with stereotype seam2JasyptEncryption
  *	add stereotype jhvTypeDef to class instance
  */
Void checkJasyptEncryptionStereotype(MClass this) :
	this.property.exists(e|e.emHasStereotypeAssignment("seam2JasyptEncryption")) &&
	!this.emHasStereotypeAssignment("jhvTypeDef")
		? (
			let property=this.property.selectFirst(e|e.emHasStereotypeAssignment("seam2JasyptEncryption")) :
			(
				let value=property.emGetTaggedValue("seam2JasyptEncryption", "encryptorName"):
					this.addTypeDefStereotype("encryptedString", "EncryptedStringType.class", {"encryptorRegisteredName"}, {value})
			)
		)
		: "";

/**
  * add standard constructor to seam components 
  *	if there is not already one
  */	
MClassifier addStandardConstructor(MClass this) :
	this.emHasStereotypeAssignment("seam2Component") &&
	!(operation.exists(e|e.isConstructor() && e.parameter.isEmpty))
		? ensureDefaultConstructor("public")
		: "";

/**
  *	creates a logger attribute if there is no attribute with datatype "Log"
  */
Void addLoggerAttribute(MClass this) :
	this.emHasStereotypeAssignment("ejb3SessionBean") && this.emHasTaggedValue("seam2Component", "logger", "true") && !this.abstract && !this.existLoggerAttribute() 
		? ensureAttributeExistence( xmiGuid + "_logger", "logger" )
			.processAttribute( "", false, false )
			.processProperty( "private", false, createMultiplicity(0, 1) )
			.wireType(
				navModel().ensureExternalTypeExistence("org.jboss.seam.log.Log", "org.jboss.seam.log.Log")
			)
		: "";

/**
 *	
 */
Void checkAbstractClassesForComponentStereotype(MClass this) :
	this.abstract && this.emHasStereotypeAssignment("seam2Component")
		? this.stereotype.remove(this.stereotype.selectFirst(e|e.name == "seam2Component"))
		: "";

/**
  *
  */
Void addFactoryMethod(MClassifier this, String autoCreate, String scope, String value) :
	addInitiateOperation(value) ->
	this.realization.typeSelect(MClassifier).addInitiateOperation( value ) ->
	this.operation.selectFirst(e|e.name == "initiate"+value.toFirstUpper()).addFactoryStereotype(autoCreate, scope, value);

MOperation addInitiateOperation(MClassifier this, String value) :
	ensureOperationExistence( xmiGuid + ".initiate"+value.toFirstUpper(), "initiate"+value.toFirstUpper() )
		.processOperation( "public", false, false, false );

/**
  *	checks if there is an attribute with the datatype "Logger"
  */
Boolean existLoggerAttribute(MClass this) :
	this.property.exists(e|e.type.name().matches("Logger")) 
	|| this.property.exists(e|e.type.name().matches("Logger") && e.name.matches("logger"))
		? true
		: false;

/**
  *	adds method named "init" with annotation "@Create" for
  * seam components with stateful session bean annotation 
  * if there is no such annotation or method 
  */
Void checkCreateMethod(MClass this) :
	this.emHasTaggedValue("ejb3SessionBean", "stateful", "true") &&
	this.emHasStereotypeAssignment("seam2Component")
		? (
			!operation.exists(e|e.emHasTaggedValue("seam2Lifecycle", "create", "true")) 
				? (
					(!operation.exists(e|e.name == "init" && e.parameter.size == 0)
						? (
							addInitOperation()
								.ensureStereotypeAssignment(
									navModel().ensureStereotypeExistence( "http://www.genesez.org/java/seam2/CreateOperation", "http://www.genesez.org/java/seam2/CreateOperation" )
								)
						)
						: ""
					) ->
					operation.selectFirst(e|e.name == "init" && e.parameter.size == 0).addLifecycleStereotype("true", "false") ->
					(!this.realization.typeSelect(MClassifier).selectFirst(e|e.emHasStereotypeAssignment("ejb3Local") || e.emHasStereotypeAssignment("ejb3Remote")).operation.exists(e|e.name == "init" && e.parameter.size == 0)
						? this.realization.typeSelect(MClassifier).selectFirst(e|e.emHasStereotypeAssignment("ejb3Local") || e.emHasStereotypeAssignment("ejb3Remote")).addInitOperation()
						: "")
				)
				: ""
		)
		: "";

MOperation addInitOperation(MClassifier this) :
	ensureOperationExistence( xmiGuid + ".init", "init")
		.processOperation( "public", false, false, false );

/**
  *	adds method named "destroy" with annotation "@Destroy" and @Remove 
  * for seam components with stateful session bean annotation 
  * if there is no such annotation or method 
  *
  *	@todo: move this to ejb3 platform
  */
Void checkDestroyMethod(MClass this) :
	emHasStereotypeAssignment("seam2Component") && emHasTaggedValue("ejb3SessionBean", "stateful", "true")
		? (
			!operation.exists(e|e.emHasTaggedValue("seam2Lifecycle", "destroy", "true")) 
				? (
					(!operation.exists(e|e.name == "destroy" && e.parameter.size == 0)
						? (
							addDestroyOperation()
								.ensureStereotypeAssignment(
									navModel().ensureStereotypeExistence( "http://www.genesez.org/java/seam2/DestroyOperation", "http://www.genesez.org/java/seam2/DestroyOperation" )
								)
						)
						: ""
					) ->
					operation.selectFirst(e|e.name == "destroy" && e.parameter.size == 0).addLifecycleStereotype("false", "true") ->
					(!this.realization.typeSelect(MClassifier).selectFirst(e|e.emHasStereotypeAssignment("ejb3Local") || e.emHasStereotypeAssignment("ejb3Remote")).operation.exists(e|e.name == "destroy" && e.parameter.size == 0)
						? this.realization.typeSelect(MClassifier).selectFirst(e|e.emHasStereotypeAssignment("ejb3Local") || e.emHasStereotypeAssignment("ejb3Remote")).addDestroyOperation()
						: "")
				)
				: ""
		)
		: "";

MOperation addDestroyOperation(MClassifier this) :
	ensureOperationExistence( xmiGuid + ".destroy", "destroy")
		.processOperation( "public", false, false, false );