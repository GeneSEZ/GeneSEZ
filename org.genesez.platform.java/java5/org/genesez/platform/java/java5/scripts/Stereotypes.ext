/**
 * 	functions for creating and removing stereotypes
 * 
 * 
 * @author	andre pflueger
 * @date	2010-01-12
 */

// based on genesez meta model
import gcore;

extension org::genesez::platform::common::AccessHelper;
extension org::genesez::platform::common::m2m::CreateTemplate;
extension org::genesez::platform::common::log::Log;
extension org::genesez::platforms::java::java5::scripts::Helper;


/**
 *	function to add an internal used stereotype
 *	this stereotype does not contain tags
 *
 *	@param	this	instance of MElement
 *	@param	name	name of the stereotype
 */
Void addInternalStereotype(MElement this, String name) :
	this.stereotype.add(createStereotype(this.model(), name, name));
	

/**
 *  function to add the java target stereotype
 *
 *  @param  this    instance of MElement
 *  @param  name    name of the stereotype
 */
Void makeTargetStereotype(MElement this, boolean annotationType, boolean type, boolean constructor
	, boolean method, boolean field, boolean localVariable
	, boolean parameter, boolean package) :	
    let s = createAnnotationStereotype(this) : 
    // merge value for the tagged value from the meta association roles and the tagged value of the existing stereotyp
    let target = createTargetTaggedValue(this, annotationType, type, constructor, method, field, localVariable, parameter, package) :
        this.taggedValue.selectFirst(e|e.tag.name == "target" && e.tag.stereotype.name == s.name).setValue(target);

    
/**
 *  method to create stereotype for the annotation @Target
 *  including tagged values
 *
 *  @param  this    instance of MElement
 */
MStereotype createAnnotationStereotype(MElement this) :
    this.hasStereotype(java5AnnotationStereotype())
    ? (       
        let s = this.stereotype.selectFirst(e|e.name == java5AnnotationStereotype()) :
            /* If target is missing, add target*/
            this.hasTaggedValue(java5AnnotationStereotype(), "target") == false
	            ? this.createTaggedValue(createTag(s, "target", "String"),"[]") 
	            : Void ->
	        /* If retention is missing, add retention*/
            this.hasTaggedValue(java5AnnotationStereotype(), "retention") == false
                ? this.createTaggedValue(createTag(s, "retention", "String"),"")
                : Void ->
        s
      )
    : (
        let s = createStereotype(this.model(), java5AnnotationStereotype(), java5AnnotationStereotype()) :
            this.stereotype.add(s) ->
            this.createTaggedValue(createTag(s, "target", "String"),"[]") ->
            this.createTaggedValue(createTag(s, "retention", "String"),"") ->
            s
    );  
    
/**
 *  Method to create the values of the tagged value for the "@Target" annotation 
 *
 *  @param  this    instance of MElement
 *  @param  setAnnotationType    name of the stereotype
 *  @param  setType
 *  @param  setConstructor
 *  @param  setMethod
 *  @param  setField
 *  @param  setLocalVariable
 *  @param  setParameter
 *  @param  setPackage
 */
String createTargetTaggedValue(MElement this, boolean setAnnotationType, boolean setType, boolean setConstructor
        , boolean setMethod, boolean setField, boolean setLocalVariable
        , boolean setParameter, boolean setPackage) :
    let value = (
            // If there's already a Tagged Value, we take this
            this.getTaggedValue(java5AnnotationStereotype(), "target").length > 0
            ? this.getTaggedValue(java5AnnotationStereotype(), "target").subString(1, this.getTaggedValue(java5AnnotationStereotype(), "target").length - 1) // Klammern entfernen
            : ""  
        ) :
        let value = value.addTargetTaggedValue(this, setAnnotationType , "ANNOTATION_TYPE") :
        let value = value.addTargetTaggedValue(this, setType           , "TYPE") :
        let value = value.addTargetTaggedValue(this, setConstructor    , "CONSTRUCTOR") :
        let value = value.addTargetTaggedValue(this, setMethod         , "METHOD") :
        let value = value.addTargetTaggedValue(this, setField          , "FIELD") :
        let value = value.addTargetTaggedValue(this, setLocalVariable  , "LOCAL_VARIABLE") :
        let value = value.addTargetTaggedValue(this, setParameter      , "PARAMETER") :
        let value = value.addTargetTaggedValue(this, setPackage        , "PACKAGE") :
            "[" + value + "]"; // we need a collection / list

/**
 * Adds new values to a tagged value separated by comma
 *
 * @param taggedValue String value that contains the tagged values or "" if none are set
 * @param this The element which contains the tagged values
 * @param setValue Only if setValue == true, the value will be added
 * @param vlaue The new value that is added to the tagged value string
 */
String addTargetTaggedValue(String taggedValue, MElement this, boolean setValue, String value) :
    /* if type is set and not yet incuded in tagged value string ...  */ 
    (setValue == true && this.getTaggedValue(java5AnnotationStereotype(), "target").contains(value) == false)
    ? ( /*... add value to taggedValue string (add comma if needed) */
	    let taggedValue = (taggedValue == "" ? value : taggedValue + ", " + value) : taggedValue
       )
       /*else return unchanged taggedValue string*/
    : taggedValue;


/**
 *  function to add the java retention stereotype with the default value
 *
 *  @param  this    instance of MElement
 */
Void makeDefaultRetentionStereotype(MElement this) : 
    let s = createAnnotationStereotype(this): 
        this.taggedValue.selectFirst(e|e.tag.name == "retention" && e.tag.stereotype.name == s.name).setValue(javaDefaultRetention());
	
/**
 *	removes the accessor stereotype with his tagged values if existing
 */
Void removeAccessorStereotype(MElement this) :
	this.hasStereotype("accessor")
		? (
			//remove tagged values
			this.taggedValue.remove(this.taggedValue.selectFirst(e|e.tag.name == "getter")) ->
			this.taggedValue.remove(this.taggedValue.selectFirst(e|e.tag.name == "setter")) ->
			//remove tags
			this.taggedValue.tag.remove(this.taggedValue.tag.selectFirst(e|e.name == "getter")) ->
			this.taggedValue.tag.remove(this.taggedValue.tag.selectFirst(e|e.name == "setter")) ->
			//remove stereotype
			this.stereotype.remove(this.stereotype.selectFirst(e|e.name == "accessor"))
		)
		: "";
