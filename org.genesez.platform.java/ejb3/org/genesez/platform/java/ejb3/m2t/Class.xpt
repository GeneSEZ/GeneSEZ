«IMPORT gcore»

«REM»
	template for ejb3 classes
	
	@author		andre pflueger
	@date		2009-02-22
	@version	2.0
«ENDREM»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION org::genesez::util::logging::Logging»

«EXTENSION org::genesez::metamodel::core::util::AccessElement»
«EXTENSION org::genesez::metamodel::core::util::Conversion»
«EXTENSION org::genesez::metamodel::core::util::Helper»

«EXTENSION org::genesez::platform::java::util::JavaTypes»
«EXTENSION org::genesez::platform::java::util::Naming»
«EXTENSION org::genesez::platform::java::util::Conversion»



«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	evaluates the stereotypes "ejb3Remote" and "ejb3Local"
«ENDREM»
«DEFINE RemoteLocal FOR MClassifier-»
	«IF emHasStereotypeAssignment("ejb3SessionBean")-»
		«IF emHasStereotypeAssignment("ejb3Remote")-»
			«IF emHasUtilizableTaggedValue("ejb3Remote", "name")-»
				@Remote(I«emGetTaggedValue("ejb3Remote", "name")-».class)
			«ENDIF-»
		«ENDIF-»
		«IF emHasStereotypeAssignment("ejb3Local")-»
			«IF emHasUtilizableTaggedValue("ejb3Local", "name")-»
				@Local(I«emGetTaggedValue("ejb3Local", "name")-».class)
			«ENDIF-»
		«ENDIF-»
	«ELSEIF emHasStereotypeAssignment("ejb3Remote")-»
		@Remote
	«ELSEIF emHasStereotypeAssignment("ejb3Local")-»
		@Local	
	«ENDIF-»
«ENDDEFINE»

«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	annotations for the ejb3 platform  
«ENDREM»
«DEFINE Annotation FOR MClass-»	
	«EXPAND _SessionBean-»
	«EXPAND _MessageDriven-»
	«EXPAND _Interceptor»
	«EXPAND _Startup-»
	«EXPAND Element::CMTransactionality-»
	«EXPAND Element::EJB-»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3SessionBean"
«ENDREM»
«DEFINE _SessionBean FOR MClass-»
	«IF emHasStereotypeAssignment("ejb3SessionBean")-»
		«EXPAND RemoteLocal-»	
		«IF emHasTaggedValue("ejb3SessionBean", "stateful", "true")-»
			@Stateful(
		«ELSEIF emHasTaggedValue("ejb3SessionBean", "stateful", "false")-»
			@Stateless(
		«ENDIF-»
		«IF emHasUtilizableTaggedValue("ejb3SessionBean", "name")-»
			name = "«emGetTaggedValue("ejb3SessionBean", "name")-»"
		«ELSE-»
			name = "«asTypeName()-»"
		«ENDIF-» 
 		«IF emHasUtilizableTaggedValue("ejb3SessionBean", "mappedName")-»
 			, mappedName = "«emGetTaggedValue("ejb3SessionBean", "mappedName")-»"
 		«ENDIF-»
 		«IF emHasUtilizableTaggedValue("ejb3SessionBean", "description")-»
 			, description = "«emGetTaggedValue("ejb3SessionBean", "description")-»"
 		«ENDIF-»)
		«EXPAND _Interceptor-»
	«ENDIF-»
«ENDDEFINE»

«REM»
	evaluates the stereotype "ejb3MessageDriven"
«ENDREM»
«DEFINE _MessageDriven FOR MClass-»
	«IF emHasStereotypeAssignment("ejb3MessageDrivenBean")-»
		@MessageDriven(
		«IF emHasUtilizableTaggedValue("ejb3MessageDrivenBean", "name")-»
			name = "«emGetTaggedValue("ejb3MessageDrivenBean", "name")-»"
		«ELSE-»
			name = "«asTypeName()-»"
		«ENDIF-» 
 		«IF emHasUtilizableTaggedValue("ejb3MessageDrivenBean", "mappedName")-»
 			, mappedName = "«emGetTaggedValue("ejb3MessageDrivenBean", "mappedName")-»"
 		«ENDIF-»
 		«IF emHasUtilizableTaggedValue("ejb3MessageDrivenBean", "description")-»
 			, description = "«emGetTaggedValue("ejb3MessageDrivenBean", "description")-»"
 		«ENDIF-»
 		«IF emHasStereotypeAssignment("ejb3ActivationConfigProperty")-»
 			«IF emHasUtilizableTaggedValue("ejb3ActivationConfigProperty", "propertyName") && 
 				emHasUtilizableTaggedValue("ejb3ActivationConfigProperty", "propertyValue")-»
 				, activationConfig = {
 				«FOREACH emAllTaggedValues("ejb3ActivationConfigProperty", "propertyName") AS name SEPARATOR ","»
 					@ActivationConfigProperty(
 						propertyName = "«name-»",  						
 						«LET emAllTaggedValues("ejb3ActivationConfigProperty", "propertyName").indexOf(name) AS index-»
 							propertyValue = "«emAllTaggedValues("ejb3ActivationConfigProperty", "propertyValue").get(index)-»")
 						«ENDLET»
 				«ENDFOREACH»
 				}
 			«ENDIF-»
 		«ENDIF-»
 		)
	«ENDIF-»
«ENDDEFINE»

«REM»
	evaluates the stereotype "ejb3EntityListener"
«ENDREM»
«DEFINE _EntityListener FOR MClass-»
	«IF emHasStereotypeAssignment("ejb3EntityListener")-»
		«IF emHasUtilizableTaggedValue("ejb3EntityListener", "listeners")-»
			@EntityListeners(«FOREACH emAllTaggedValues("ejb3EntityListener", "listeners") AS listeners SEPARATOR ", "-»
				«listeners-».class
			«ENDFOREACH-»
			«IF emHasTaggedValue("ejb3EntityListener", "generateDefault", "true") && 
				operation.exists(e|e.emHasTaggedValue("ejb3Callback", "external", "true"))-»
				, «asTypeName()+"Listener.class"-»
				«EXPAND _EntityListenerClass(asTypeName()+"Listener")-»
			«ENDIF-»)
		«ELSEIF emHasTaggedValue("ejb3EntityListener", "generateDefault", "true") && 
				operation.exists(e|e.emHasTaggedValue("ejb3Callback", "external", "true"))-»
			@EntityListeners(«asTypeName()-»Listener.class)
			«EXPAND _EntityListenerClass(asTypeName()+"Listener")-»
		«ENDIF»
		«IF emHasTaggedValue("ejb3EntityListener", "excludeDefaultListeners", "true")-»
			@ExcludeDefaultListeners
		«ENDIF-»
		«IF emHasTaggedValue("ejb3EntityListener", "excludeSuperclassListeners", "true")-»
			@ExcludeSuperclassListeners
		«ENDIF-»				
	«ENDIF-»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3EntityListener"
«ENDREM»
«DEFINE _EntityListenerClass(String filename) FOR MClass-»
	«FILE filePath( filename + ".java", basePath() )-»
		/**
		  *	generated entity listener class by the ejb3 cartridge
		  *
		  * @author		andre pflueger
		  * @date		2008 Jun 13
		  * @Version	1.0
		  *
		  */
		package «packageDeclaration( basePackage() ) -»;
		
		/* generated imports */
		«EXPAND Import::CallbackImport»
		
		/* your own imports */
		«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + asTypeName() + "_Imports")-»
		
		/**
		  * generated entity listener class for "«asTypeName()»"
		  *
		  */
		public class «filename-» {
			«EXPAND _CallbackMethods-»
			
			«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + "_restOf" + asTypeName() + "EntityListenerClass")-»
		}
	«ENDFILE»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3ClassInterceptor"
«ENDREM»
«DEFINE _Interceptor FOR MClass-»
	«IF emHasStereotypeAssignment("ejb3ClassInterceptor")-»
		«IF emHasUtilizableTaggedValue("ejb3ClassInterceptor", "interceptors")-»
			@Interceptors(value={«FOREACH emAllTaggedValues("ejb3ClassInterceptor", "interceptors") AS interceptor SEPARATOR ", "-»
				«interceptor-».class
			«ENDFOREACH-»
			«IF emHasTaggedValue("ejb3ClassInterceptor", "generateDefault", "true") &&
				( operation.exists(e|e.emHasTaggedValue("ejb3Callback", "external", "true")) ||
				emHasUtilizableTaggedValue("ejb3ClassInterceptor", "methods") )-»
				«EXPAND _InterceptorClass(asTypeName()+"Interceptor")-»
				, «asTypeName()-»Interceptor.class
			«ENDIF-»})
		«ELSEIF emHasTaggedValue("ejb3ClassInterceptor", "generateDefault", "true") &&
				( operation.exists(e|e.emHasTaggedValue("ejb3Callback", "external", "true")) ||
				emHasUtilizableTaggedValue("ejb3ClassInterceptor", "methods") )-»
			@Interceptors(«asTypeName()»Interceptor.class)
			«EXPAND _InterceptorClass(asTypeName()+"Interceptor")-»
		«ELSE -»
		  @Interceptor
		«ENDIF-»
		«IF emHasTaggedValue("ejb3ClassInterceptor", "excludeDefaultInterceptors", "true")-»
			@ExcludeDefaultInterceptors
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»


«REM» 
	generates an interceptor class
«ENDREM»
«DEFINE _InterceptorClass(String filename) FOR MClass-»
	«FILE filePath( filename + ".java", basePath() )-»
		/**
		  *	generated interceptor class of the ejb3 cartridge
		  *
		  *	@author		andre pflueger
		  * @date		2008 Jun 15
		  * @version 	1.0
		  *
		  */
		package «packageDeclaration( basePackage() ) -»;
		
		/* generated imports */
		«EXPAND Import::CallbackImport»
		import javax.interceptor.AroundInvoke;
		import javax.interceptor.InvocationContext;
		
		/* your own imports */
		«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + asTypeName() + "_Imports")-»
		
		/**
		  * generated interceptor class for "«asTypeName()-»"
		  *
		  */
		public class «filename-» {
			«EXPAND _BusinessMethods-»
			
			«EXPAND _CallbackMethods-»
			
			«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + "_restOf" + asTypeName() + "InterzeptorClass")-»
		}
	«ENDFILE»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Callback and generates source code for the associated methods
	can be used by interceptor and entity listener class generation
	
	takes care of downwards compatibility from ejb3 to ejb2.x by
	not creating callback methods in an interceptor class for some
	special methods with coressponding callback annotations 
	(page 363 of ejb3 professionell of Oliver Ihns) 
	
	downwards compability shoud be done by check language before generation starts 
«ENDREM»
«DEFINE _CallbackMethods FOR MClass-»
	«FOREACH operation.select(e|e.emHasTaggedValue("jpaCallback", "external", "true")) AS methods»
		«IF emHasStereotypeAssignment("ejb3ClassInterceptor")
			&& !(methods.name == "ejbCreate" 
				&& methods.emHasTaggedValue("jpaCallback", "postConstruct", "true"))
			|| !(methods.name == "ejbRemove" 
				&& methods.emHasTaggedValue("jpaCallback", "preDestroy", "true"))
			|| !(methods.name == "ejbActivate" 
				&& methods.emHasTaggedValue("jpaCallback", "postActivate", "true"))
			|| !(methods.name == "ejbPassivate" 
				&& methods.emHasTaggedValue("jpaCallback", "prePassivate", "true"))
		-»
			/**
			  *	generated callback method for class "«asTypeName()»"
			  * method has been annotated in "«asTypeName()»"
			  *
			  */
			«IF methods.emHasTaggedValue("jpaCallback", "external", "true")-»
				«IF methods.classifier.emHasStereotypeAssignment("ejb3SessionBean") || methods.classifier.emHasStereotypeAssignment("ejb3MessageDrivenBean")-»
					«IF methods.emHasTaggedValue("jpaCallback", "postConstruct", "true")-»
						@PostConstruct
					«ENDIF-»
					«IF methods.emHasTaggedValue("jpaCallback", "preDestroy", "true")-»
						@PreDestroy
					«ENDIF-»
				«ENDIF-»
				«IF methods.classifier.emHasTaggedValue("ejb3SessionBean", "stateful", "true")-»
					«IF methods.emHasTaggedValue("jpaCallback", "postActivate", "true")-»
						@PostActivate
					«ENDIF-»
					«IF methods.emHasTaggedValue("jpaCallback", "prePassivate", "true")-»
						@PrePassivate
					«ENDIF-»
				«ENDIF-»
				«IF methods.classifier.emHasStereotypeAssignment("ejb3PersistentEntity")-»
					«IF methods.emHasTaggedValue("jpaCallback", "postPersist", "true")-»
						@PostPersist
					«ENDIF-»
					«IF methods.emHasTaggedValue("jpaCallback", "prePersist", "true")-»
						@PrePersist
					«ENDIF-»
					«IF methods.emHasTaggedValue("jpaCallback", "postUpdate", "true")-»
						@PostUpdate
					«ENDIF-»
					«IF methods.emHasTaggedValue("jpaCallback", "preUpdate", "true")-»
						@PreUpdate
					«ENDIF-»	
					«IF methods.emHasTaggedValue("jpaCallback", "postRemove", "true")-»
						@PostRemove
					«ENDIF-»
					«IF methods.emHasTaggedValue("jpaCallback", "preRemove", "true")-»
						@PreRemove
					«ENDIF-»
					«IF methods.emHasTaggedValue("jpaCallback", "postLoad", "true")-»
						@PostLoad
					«ENDIF-»
				«ENDIF-»
			«ENDIF-»
			public void «methods.name-»(«IF emHasStereotypeAssignment("ejb3EntityListener")-»
				Object obj){
					«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods.name + "Listener")-»
			«ELSEIF emHasStereotypeAssignment("ejb3ClassInterceptor")-»
				InvocationContext ctx){
					«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods.name + "Interceptor")-»
			«ENDIF-»
			}
		«ENDIF-»
	«ENDFOREACH»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Interceptor and generates source code for the 
	associated business methods
«ENDREM»
«DEFINE _BusinessMethods FOR MClass-»
	«IF emHasUtilizableTaggedValue("ejb3ClassInterceptor", "methods")-»
		«FOREACH emAllTaggedValues("ejb3ClassInterceptor", "methods") AS methods SEPARATOR ", "-»
			/**
			  *	generated business method for class "«asTypeName()-»"
			  * method has been mentioned in "ejb3Interceptor"-annotation 
			  * at class "«asTypeName()-»"
			  *
			  */
			@AroundInvoke
			public Object «methods-»(InvocationContext ctx) throws Exception {
				/* throw an exception to avoid execution of the business method */
				«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods + "Interceptor")-»
				return ctx.proceed();
			}
		«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»

«REM» 
	generates a protected region for own implementations
«ENDREM»
«DEFINE _OwnCodeImpl(String proRegId) FOR MClass-»
	/* «PROTECT CSTART "" CEND "" ID (proRegId)» */
	/* TODO: put your own source code here */
	
	/* «ENDPROTECT» */
«ENDDEFINE»

«REM» 
	add public operations from session bean interface (except getter and setter)
«ENDREM»
«DEFINE AddPublicOperations FOR MClass-»
	«IF emHasStereotypeAssignment("ejb3SessionBean")-»
		/**
		  * generated methods from the implementing interface(s)
		  * «FOREACH realization.typeSelect(MInterface).asTypeName() AS name SEPARATOR ", "-»«IF !((name == "I"+asTypeName()+"Local") || (name == "I"+asTypeName()+"Remote"))-»«name-»«ENDIF-»«ENDFOREACH»
		  */
		«REM»
			do not add the operations of the generated session bean interface because these are 
			already implemented in this class
		«ENDREM»
		«FOREACH realization.typeSelect(MInterface) AS interface»
		  	«IF !((interface.asTypeName() == "I"+asTypeName()+"Local") || (interface.asTypeName() == "I"+asTypeName()+"Remote"))-»
		  		«EXPAND org::genesez::platform::java::m2t::Operation::Implementation FOR interface -»
		  	«ENDIF-»
		«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»

«REM»
    evaluates the stereotype ejb3Startup
«ENDREM»
«DEFINE _Startup FOR MClass-»
    «IF emHasStereotypeAssignment("ejb3Startup")-»
        @Startup 
        «IF emHasTaggedValue("ejb3Startup", "depends", "true")-»
            «IF emHasUtilizableTaggedValue("ejb3Startup", "depends")-»
                (depends={
                «FOREACH emAllTaggedValues("ejb3Startup", "depends") AS value SEPARATOR ", "-»
                    "«value-»"
                «ENDFOREACH-»})
            «ENDIF-»
        «ENDIF-»
    «ENDIF-»
«ENDDEFINE»