/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 * 
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * 	modificates the metamodel before generation of the source code  
 *  
 * @author	andre pflueger <andre.pflueger@fh-zwickau.de>
 */

extension org::genesez::platform::java::ejb3::m2m::Attribute;
extension org::genesez::platform::java::ejb3::m2m::Interface;
extension org::genesez::platform::java::ejb3::m2m::Class;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::util::logging::Logging;

MModel additions(MModel this) :
	this.nestedPackage.additions() ->
	this.classifier.typeSelect(MClass).additions() ->
	this;
	
Void additions(MPackage this) :
	this.nestedPackage.additions() ->
	this.classifier.typeSelect(MClass).additions();
	
Void additions(MClass this) :
	transformJacobsonStereotypes() ->
	transformWAMStereotypes() ->
	addRemoteBusinessInterface() ->
	addLocalBusinessInterface() ->
	addSessionBeanInterfaces() ->
	addStandardConstructor() ->
	checkUseOfEntityManager() ->
	addMessageListener();

MModel modifications(MModel this) :
	this.nestedPackage.modifications() ->
	this.classifier.typeSelect(MClass).modifications() ->
	this;
	
Void modifications(MPackage this) :
	this.nestedPackage.modifications() ->
	this.classifier.typeSelect(MClass).modifications();
	
Void modifications(MClass this) :
	this.property.typeSelect(MAttribute).modifications() ->
	this.operation.typeSelect(MOperation).modifications();
	
Void modifications(MOperation this) :
	checkTimerStereotype();
	
Void modifications(MAttribute this) :
	changeSessionBeanAttributeDatatype() ->
	checkEJBStereotype() ->
	checkTimerServiceStereotype() ->
	checkAccessorForEJBStereotypes();

Void modifications(MInterface this) :
	Void;
