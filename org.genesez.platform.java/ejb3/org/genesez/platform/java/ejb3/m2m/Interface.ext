/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::metamodel::core::util::CloneElement;
extension org::genesez::metamodel::core::util::RemoveElement;
extension org::genesez::platform::java::ejb3::m2m::Stereotypes;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::platform::java::m2m::Stereotypes;
extension org::genesez::util::logging::Logging;


/**
  *	adds a business interface for the session bean if stereotype "ejb3Local" or "ejb3Remote" is used 
  *	(see further conditions beyond)
  *	for using an own business interface which is also modelled, annotate the interface with the named stereotypes
  *	and DO NOT use these stereotypes at the session bean class
  *
  * the method checks if an interface with a given name in the "ejb3Local" or "ejb3Remote" stereotype exists and do not
  *	create a new one (modelled interface over generated)
  */
Void addSessionBeanInterfaces(MClassifier this) :
	isRemoteInterfaceNeeded()
		? ( 
			this.emHasUtilizableTaggedValue("ejb3Remote", "name")
				? (
					!allNestedClassifiers(this.navModel()).typeSelect(MInterface).exists(e|e.name == this.emGetTaggedValue("ejb3Remote", "name"))
						? (	
							let interface = createInterface(this.navPackage(), this.emGetTaggedValue("ejb3Remote", "name"), this.emGetTaggedValue("ejb3Remote", "name")) : 
								this.realization.add(interface) ->
								interface.addRemoteStereotype("") ->
								this.operation.typeSelect(MOperation).select(e|e.visibility == "public" && !e.isConstructor() ).cloneSessionBeanOperation(interface) ->
								this.operation.typeSelect(MOperation).select(e|e.visibility == "public" && !e.isConstructor() ).addOverrideStereotype() ->
								this.emRemoveStereotypeAssignment(this.emGetStereotypeAssignment("ejb3Remote"))
						)
						: ""
				)
				: (
					let interface = createInterface(this.navPackage(), asTypeName()+"Remote", asTypeName()+"Remote") : 
						this.realization.add(interface) ->
						interface.addRemoteStereotype("") ->
						interface.navModel().externalTypes.remove("I"+asTypeName()+"Remote") ->
						this.operation.typeSelect(MOperation).select(e|e.visibility == "public" && !e.isConstructor() ).cloneSessionBeanOperation(interface) ->
						this.operation.typeSelect(MOperation).select(e|e.visibility == "public" && !e.isConstructor() ).addOverrideStereotype() ->
						this.emRemoveStereotypeAssignment(this.emGetStereotypeAssignment("ejb3Remote"))
				)
		) 
		: "" ->
	isLocalInterfaceNeeded()
		? (
			this.emHasUtilizableTaggedValue("ejb3Local", "name")
				? (	
					!allNestedClassifiers(this.navModel()).typeSelect(MInterface).exists(e|e.name == this.emGetTaggedValue("ejb3Local", "name"))
						? (	
							let interface = createInterface(this.navPackage(), this.emGetTaggedValue("ejb3Local", "name"), this.emGetTaggedValue("ejb3Local", "name")) : 
								this.realization.add(interface) ->
								interface.addLocalStereotype("") ->
								this.operation.select(e|e.visibility == "public" && !e.isConstructor()).cloneSessionBeanOperation(interface) ->
								this.operation.select(e|e.visibility == "public" && !e.isConstructor()).addOverrideStereotype() ->
								this.emRemoveStereotypeAssignment(this.emGetStereotypeAssignment("ejb3Local"))
						)
						: ""
				)
				: (
					let interface = createInterface(this.navPackage(), asTypeName()+"Local", asTypeName()+"Local") : 
						this.realization.add(interface) ->
						interface.addLocalStereotype("") ->
						interface.navModel().externalTypes.remove("I"+asTypeName()+"Local") ->
						this.operation.select(e|e.visibility == "public" && !e.isConstructor()).cloneSessionBeanOperation(interface) ->
						this.operation.select(e|e.visibility == "public" && !e.isConstructor()).addOverrideStereotype() ->
						this.emRemoveStereotypeAssignment(this.emGetStereotypeAssignment("ejb3Local"))
				)
		)
		: "";
		
/**
 *	checks whether a remote session bean interface should be created
 */		
boolean isRemoteInterfaceNeeded(MClassifier this) :
	this.emHasStereotypeAssignment("ejb3SessionBean") && this.emHasStereotypeAssignment("ejb3Remote")
		? true
		: false;

/**
 *	checks whether a local session bean interface should be created
 */	
boolean isLocalInterfaceNeeded(MClassifier this) :
	this.emHasStereotypeAssignment("ejb3SessionBean") && this.emHasStereotypeAssignment("ejb3Local")
		? true
		: false;
		
/**
 *	clone an operation of a session bean for the business interface
 *	clone also the stereotypes and tagged values (especially primitive and accessor)
 *
 *	@TODO: just clone the stereotype primitive and accessor by using special operations
 */		
private MOperation cloneSessionBeanOperation(MOperation source, MInterface container) :
	let operation = source.cloneOperation(container) :
		cloneStereotypeAssignments(source.return, operation.return) ->
		cloneTaggedValues(source.return, operation.return);