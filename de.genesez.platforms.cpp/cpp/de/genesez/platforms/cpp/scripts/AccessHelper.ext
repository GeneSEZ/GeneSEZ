import gcore;

extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::log::Log;

boolean hasDefaultValue(MParameter this) : defaultvalue.length > 0;

boolean isInterface(MInterface this) : true;

boolean isInterface(MClassifier this) : false;

String getTypeModifier(MClassifier this) :
	stereotype.exists(e|e.name.matches("typeModifier")) ? taggedValue.selectFirst(e|e.tag.name.matches("typeModifier")).value : "";
	
String getTypeModifier(MGeneric this) :
	"";
	//warn("MGeneric " + specification + ": Stereotypes for MGeneric ist not supported!");
	//stereotype.exists(e|e.name.matches("typeModifier")) ? taggedValue.selectFirst(e|e.tag.name.matches("typeModifier")).value : "";	

String getTypeModifier(MParameter this) :	
	stereotype.exists(e|e.name.matches("typeModifier")) ? taggedValue.selectFirst(e|e.tag.name.matches("typeModifier")).value : "";	

String getTypeModifier(MOperation this) :
	stereotype.exists(e|e.name.matches("typeModifier")) ? taggedValue.selectFirst(e|e.tag.name.matches("typeModifier")).value : "";
	
String getTypeModifier(MProperty this) :
	stereotype.exists(e|e.name.matches("typeModifier")) ? taggedValue.selectFirst(e|e.tag.name.matches("typeModifier")).value : "";

String getTypeModifier(MPrimitiveType this) :
	stereotype.exists(e|e.name.matches("typeModifier")) ? taggedValue.selectFirst(e|e.tag.name.matches("typeModifier")).value : "";	
	
String getTypeModifier(MType this) :
	"";
	//warn("MType " + name() + ": Stereotypes for MType ist not supported!");
	//stereotype.exists(e|e.name.matches("typeModifier")) ? taggedValue.selectFirst(e|e.tag.name.matches("typeModifier")).value : "";	

String hasTypeModifier(MClass this) :
	stereotype.select(e|e.name == "typeModifier").toString();

boolean isOperatorOverload(MOperation this) : 
	stereotype.exists(e| e.name == "operator" || e.name == "globalOperator");
	
boolean hasBidirectionalAssociation(MClassifier this) :
	property.typeSelect(MAssociationRole).isBidirectionalAssociation();
	
boolean isBidirectionalAssociation(MAssociationRole this) :
	opposite != null;
//	association.end.size > 1;

Set[MType] getBidirectionalAssociationTypes(MClassifier this) :
	let deps = {} :
		deps.addAll(property.typeSelect(MAssociationRole).select(e|e.isBidirectionalAssociation()).type) ->
		deps.toSet();

boolean isTypedef(MProperty this) :
	hasStereotype("typedef");
	
boolean hasTypedefType(MProperty this) :
	taggedValue.exists(e|e.tag.name.contains("targetType") && e.value != "null");
	
List[String] getTypedefType(MProperty this) :
	hasTypedefType(this) ? taggedValue.select(e|e.tag.name.contains("targetType")).value : "";
	
/**
 *
 * Generics
 *
 */
 
/**
 * checks if an attribute has one or more generic realizations
 * @return	true if the attribute has at least one generic realization, otherwise false
 */
boolean hasGenericRealization(MParameter this) :
	genericRealization.size > 0;
	
/**
 *
 * Getter & Setter generation
 *
 */
boolean generateGetter(MAttribute this) :
	hasTaggedValue("accessor", "getter", "true");
	
boolean generateSetter(MAttribute this) :
	hasTaggedValue("accessor", "setter", "true");
	
boolean isTyped(MElement this) :
	hasStereotype("typed");
	
List[String] getTypeInformation(MElement this) :
	taggedValue.select(e| e.tag.name == "types").value;
	
/**
 *	class operator, like << or >>
 */
boolean isClassOperator(MOperation this) :
	hasStereotype("globalOperator");
	
boolean hasGenericParameter(MType this) :
	false;
	
boolean isConstOp(MOperation this) :
	hasStereotype("const");
	
	