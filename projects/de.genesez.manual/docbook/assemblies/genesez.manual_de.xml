<?xml version='1.0'?>
<!DOCTYPE book 
	PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
	[
		<!ENTITY % isolat1 PUBLIC "ISO 8879:1986//ENTITIES Added Latin 1//EN//XML" "../../lib/docbook-xml-4.5/ent/isolat1.ent">
		%isolat1;
	]
>
<book>
  <bookinfo>
    <title>Das GeneSEZ Generator Framework</title>
    <copyright><year>2006 - 2012</year><holder>GeneSEZ Research 
    Group</holder></copyright>
  </bookinfo>
  <part>

    <title>Getting Started</title>

    <partintro>

      <para>In <xref linkend="de.genesez.background"/> wird 
      etwas Hintergrundwissen zu modellgetriebenen Ans&auml;tzen und GeneSEZ 
      vermittelt. F&uuml;r einen praktischen Einstieg kann direkt zu 
      <xref linkend="de.genesez.installation"/> gesprungen 
      werden.</para>

    </partintro>

    <chapter id="de.genesez.background">

      <title>Hintergrund und Idee von GeneSEZ</title>

      <para>Nach einem kleinen Einblick in modellgetriebene Ans&auml;tze 
      wird die Idee des GeneSEZ Ansatzes beschrieben, gefolgt von einem 
      kleinen &Uuml;berblick von GeneSEZ.</para>

      <xi:include href="../core/intro/de.genesez.intro.mdsd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      <xi:include href="../core/intro/de.genesez.intro.idea.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      <xi:include href="../core/intro/de.genesez.intro.overview.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </chapter>

    <xi:include href="../core/de.genesez.install.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <chapter>

      <title>GeneSEZ: Just Try It Out</title>

      <para>Dieser Artikel verdeutlicht die Funktionweise und Anwendung 
      des GeneSEZ-Frameworks an einem kleinen Beispiel. Dazu wird ein 
      Projekt aus dem GeneSEZ-Repository ausgecheckt, die 
      Projektstruktur erl&auml;utert und ein vorhandenes UML-Modell in 
      Quellcode transformiert.</para>

      <sect1>

        <title>Checkout Beispielprojekt</title>

        <para>Um das Beispielprojekt aus dem GeneSEZ-Repository 
        auszuchecken, muss zuerst die GeneSEZ-Repository Location 
        konfiguriert werden. Dies wird genauer unter GeneSEZ Source 
        Control Management beschrieben.</para>

        <para />

        <para>Anschlie&szlig;end kann das Beispielprojekt 
        de.genesez.example.java.forms sowie das zugeh&ouml;rige 
        Generatorprojekt de.genesez.example.java.forms.generator 
        ausgecheckt werden.</para>

      </sect1>

      <sect1>

        <title>Projektstruktur</title>

        <para>F&uuml;r ein Softwareprojekt wird eine Aufteilung in 
        mindestens zwei Projekte vorgeschlagen. Dies ist zum Einen ein 
        so genanntes Generatorprojekt, welches Konfigurationen, 
        Bibliotheken und weitere spezifische Artefakte f&uuml;r den 
        modellgetriebenen Entwicklungsprozess beinhaltet. Neben diesem 
        existiert mindestens noch ein weiteres Projekt welches den 
        anwendungsspezifischen Quellcode beinhaltet. Durch diese 
        Aufteilung sind in jedem Projekt nur die Artefakte enthalten, 
        die f&uuml;r das jeweilige Projekt relevant sind.</para>

        <sect2>

          <title>Generatorprojekt</title>

          <para>Das Generatorprojekt ist ein 
          openArchitectureWare-Projekt, welches wiederum ein 
          Eclipse-Plug-In-Projekt ist. Dadurch k&ouml;nnen die ben&ouml;tigten 
          Bibliotheken f&uuml;r den Generator einfach als Eclipse-Plug-Ins 
          referenziert werden. Neben den spezifischen Verzeichnissen 
          und Dateien von Eclipse-Plug-In-Projekten existieren die 
          folgenden Verzeichnisse:</para>

          <para />

          <para>* config</para>

          <para>* model-exp</para>

          <para>* model-gen</para>

          <para />

          <para>Das Verzeichnis config enth&auml;lt den Workflow, welcher 
          die einzelnen Schritte beschreibt, die notwendig sind, um ein 
          Modell in Quellcode zu transformieren. Weiterhin kann 
          optional noch die Datei log4j.properties enthalten sein, 
          welche das von GeneSEZ und openArchitectureWare genutzte 
          Logging-Framework Log4J konfiguriert.</para>

          <para />

          <para>Im Verzeichnis model-exp befindet sich das Modell der 
          Anwendung im XMI-Format des Eclipse UML2-Projektes. Im Falle 
          des Beispielprojektes wurde das Modell mit dem 
          Modellierungswerkzeug Magic Draw erstellt und als Eclipse 
          UML2-Modell exportiert. Daraus ergibt sich auch der Name des 
          Verzeichnisses model-exp, der f&uuml;r &quot;exportiertes 
          Modell&quot; steht. Dieses Modell dient als Ausgangspunkt der 
          Codegenerierung.</para>

          <para />

          <para>Der Ordner model-gen enth&auml;lt ein serialisiertes 
          GeneSEZ-Modell, welches durch den Workflow erzeugt wurde. 
          Sich dieses Modell einmal n&auml;her anzusehen, kann z.B. n&uuml;tzlich 
          sein, um zu &uuml;berpr&uuml;fen, ob Modellmodifikationen korrekt 
          funktionieren. Die XMI-Datei kann mit Hilfe des Sample 
          Reflective Ecore Model Editor ge&ouml;ffnet werden. Dieser stellt 
          das Modell in einer Baumstruktur dar, &auml;hnlich wie der UML 
          Model Editor f&uuml;r Eclipse UML2-Modelle.</para>

          <para />

          <para>Weiterhin k&ouml;nnen sich noch weitere Dateien und 
          Verzeichnisse wie z.B. projektspezifische 
          Type-Mapping-Dateien und Artefakte f&uuml;r die Anpassung des 
          Generators im Generator-Projekt befinden.</para>

        </sect2>

        <sect2>

          <title>Anwendungsprojekt</title>

          <para>Bei gr&ouml;&szlig;eren Projekten ist es sinnvoll, mehrere 
          Anwendungsprojekte zu erstellen (z.B. wenn neben einer 
          Desktopoberfl&auml;che eine Weboberfl&auml;che entwickelt wird). 
          Ansonsten ist ein Anwendungsprojekt in der Regel ausreichend. 
          Das Anwendungsprojekt kann ein Eclipse-Projekt der 
          entsprechenden Zielplattform sein: ein Java-Projekt, ein 
          PHP-Projekt oder ein Web-Projekt (je nachdem, welche 
          Eclipse-Nature am besten geeignet ist). Es kann sich aber 
          genauso gut um ein Projekt einer anderen Entwicklungsumgebung 
          handeln (z.B. ein Visual Studio-Projekt f&uuml;r die 
          C#-Entwicklung). F&uuml;r den modellgetriebenen 
          Entwicklungsprozess an sich ist lediglich ein Verzeichnis im 
          Dateisystem notwendig (siehe unten), jedoch sollte dies 
          sinnvoll in einer Projektstruktur eingegliedert sein.</para>

          <para />

          <para>Die Verzeichnisstruktur ist sehr vom verwendeten 
          Projekt abh&auml;ngig. Deshalb werden hier nur die wichtigsten 
          Verzeichnisse kurz vorgestellt. Im Falle des 
          Beispielprojektes handelt es sich um ein Java-Projekt, das 
          die folgenden Verzeichnisse enth&auml;lt:</para>

          <para />

          <para>* src</para>

          <para>* src-gen</para>

          <para>* lib</para>

          <para>* model</para>

          <para />

          <para>Die Verzeichnisse src und src-gen enhalten den 
          Quellcode des Projektes. Der generierte Quellcode befindet 
          sich dabei im Verzeichnis src-gen und der manuell erstellte 
          in src.</para>

          <para />

          <para>Im lib-Verzeichnis sind die Bibliotheken f&uuml;r das 
          Projekt enthalten. Im Beispielprojekt ist hier die Bibliothek 
          zum Assoziations-Handling enthalten.</para>

          <para />

          <para>Der model-Ordner enth&auml;lt das Modell, welches mit der 
          eingesetzten Modelliersoftware erstellt wurde. Dieses Modell 
          ist dem Anwendungsprojekt zugeordnet, da aus diesem Modell 
          Teile des Quellcodes automatisch erzeugt werden, wodurch das 
          Modell selbst zum Quellcode wird.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Ausf&uuml;hren des Workflows</title>

        <sect2>

          <title>Hinweis GeneSEZ Version 1.6.0</title>

          <para>Durch einen Bug im GeneSEZ-Plug-In m&uuml;ssen bei Version 
          1.6.0 im Beispiel-Generator-Projekt noch folgende 
          Plug-In-Abh&auml;ngigkeiten und -Bibliotheken hinzugef&uuml;gt 
          werden:</para>

          <para />

          <para>* openArchitectureWare UML2 Adapter</para>

          <para>* GeneSEZ Metamodell</para>

          <para>* dom4j Bibliothek</para>

          <para />

          <para>Dazu im Ordner META-INF die Datei MANIFEST.MF &ouml;ffnen 
          und im Tab Dependencies unter Required Plug-Ins die beiden 
          Plug-Ins de.genesez.metamodel und 
          org.openarchitectureware.uml2.adapter hinzuf&uuml;gen. Die 
          Bibliothek dom4j.jar wird &uuml;ber den Build Path hinzugef&uuml;gt: 
          Rechtsklick auf das Projekt und &#x00BB; Build Path &#x00BB; Configure 
          Build Path... w&auml;hlen und dann im Tab Libraries auf Add 
          External JARs... klicken. Nun kann die Datei dom4j-1.6.1.jar 
          aus dem GeneSEZ-Plug-In-Verzeichnis gew&auml;hlt werden (z.B. 
          ...\eclipse-extensions\genesez\eclipse\plugins\de.genesez.platforms.common_1.6.0).</para>

          <para>Um den Workflow zu starten, einfach Rechtsklick auf die 
          Datei workflow.oaw im Verzeichnis config und Run As &#x00BB; oAW 
          Workflow w&auml;hlen. In der Konsole sollte bei erfolgreicher 
          Ausf&uuml;hrung in den letzten Zeilen die folgende Ausgabe 
          erscheinen:</para>

          <mediaobject><imageobject>
          <imagedata fileref="workflow.finish.png"/></imageobject></mediaobject>
          <para>Im Verzeichnis src-gen des Anwendungsprojektes sollte 
          nun der aktuelle generierte Quellcode vorhanden sein.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Workflow Details</title>

        <para>Der Workflow kann mit einem Doppelklick ge&ouml;ffnet werden. 
        Die Definition des Workflows ist &auml;hnlich der von 
        ANT-Build-Skripten. In der ersten H&auml;lfte sind Properties 
        definiert. Dies sind projektspezifische Einstellungen wie Pfad 
        und Dateiname des Modells sowie Standardwerte f&uuml;r die Workflow 
        Komponenten. In der zweiten H&auml;lfte des Workflows sind die 
        Workflowkomponenten definiert, die die Transformationsschritte 
        vom Modell bis zum Quellcode definieren:</para>

        <para />

        <para>1. Die erste Workflowkomponente liest ein UML2-Modell 
        ein, validiert es und transformiert es in ein 
        GeneSEZ-Modell</para>

        <para>2. Danach wird das GeneSEZ-Modell mit allgemeinen Regeln 
        auf Korrektheit &uuml;berpr&uuml;ft</para>

        <para>3. Als drittes wird das GeneSEZ-Modell auf 
        Java-Konformit&auml;t &uuml;berpr&uuml;ft</para>

        <para>4. Die vierte Workflowkomponente serialisiert das 
        GeneSEZ-Modell in eine Datei</para>

        <para>5. Als letztes wird das GeneSEZ-Modell mit Hilfe der 
        Java-Templates in Java-Quellcode transformiert</para>

        <para />

        <para>Die Parameter der einzelnen Workflow Komponenten sind in 
        der Workflow-Referenz erkl&auml;rt: GeneSEZ Workflow Referenz.</para>

      </sect1>

      <sect1>

        <title>Generierter Quellcode</title>

        <para>Wesentlich f&uuml;r die Akzeptanz der MDSD ist, dass der 
        generierte Quellcode den Coding-Guidelines der Entwickler 
        entspricht. Um dies zu erreichen, stehen mehrere M&ouml;glichkeiten 
        bereit.</para>

        <para />

        <para>Die Workflowkomponente zur Durchf&uuml;hrung einer 
        Modell-zu-Text-Transformation stellt Parameter bereit, um das 
        Aussehen des generierten Quellcodes zu beeinflussen. Dazu wird 
        hier auf die Referenz dieser Workflowkomponente verwiesen: 
        GeneSEZ Modell-zu-Text Workflow Komponente</para>

        <para />

        <para>Gr&ouml;&szlig;ere &auml;nderungen an der Struktur des Quellcodes k&ouml;nnen 
        mit Hilfe des Customization Guide erreicht werden: GeneSEZ 
        Customization Guide?</para>

        <para />

        <para>F&uuml;r Informationen, wie die GeneSEZ-Templates 
        Modellinformationen in Quellcode umsetzen, wird auf die 
        GeneSEZ-Generator-Pattern verwiesen.</para>

      </sect1>

    </chapter>

  </part>

  <part>

    <title>Benutzer-Referenz</title>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../core/features/de.genesez.platform.common.logging.xml" />
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../core/features/de.genesez.platform.common.workflow.components.xml" />
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../core/features/de.genesez.platform.common.accessors.xml" />
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../core/features/de.genesez.platform.common.external.types.xml" />
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../core/features/de.genesez.platform.common.type.mapping.xml" />
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../core/features/de.genesez.platform.common.statistic.xml" />

    <chapter>

      <title>GeneSEZ UML Profil</title>

      <para>Um Konzepte des GeneSEZ-Metamodells in UML zu modellieren 
      sowie n&uuml;tzliche und fachlich relevante Informationen zur 
      Umsetzung im Modell zu hinterlegen, wurde ein GeneSEZ-UML-Profil 
      eingef&uuml;hrt. Dieses ist prinzipiell plattformunabh&auml;ngig, jedoch 
      m&uuml;ssen nicht alle Aspekte, die das UML-Profil enth&auml;lt, auch von 
      den plattform-spezifischen Template-Sets ausgewertet 
      werden.</para>

      <para />

      <para>Welche Aspekte die plattformspezifischen Templates 
      unterst&uuml;tzen, ist in der Dokumentation zu den jeweiligen 
      Plattformen zu finden.</para>

      <para />

      <para>source:trunk/de.genesez.docs/GeneSezProfile/genesez.profile.png</para>

      <para>Folgend werden die einzelnen Stereotypen und ihre Bedeutung 
      n&auml;her erl&auml;utert.</para>

    </chapter>

  </part>
  
  <part>

    <title>Plattform Projekte</title>
    <!-- chapter>
      <title>Java Plattform</title>
	  <para></para>
    </chapter -->
    
    <partintro>

      <para>Das GeneSEZ Framework stellt aktuell Modelltransformationen 
      f&uuml;r die folgenden Plattformen bereit:</para>

      <variablelist>

        <varlistentry>

          <term><emphasis role="bold">Java</emphasis></term>

          <listitem>

            <para>Die Programmiersprache Java in Version 4 und 5 sowie 
            darauf aufbauenden Technologien und Frameworks</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis role="bold">PHP</emphasis></term>

          <listitem>

            <para>Die Programmiersprache PHP in Version 5 sowie 
            Unterst&uuml;tzung von Frameworks</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis role="bold">dot.net</emphasis></term>

          <listitem>

            <para>Die Programmiersprache C#</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis role="bold">C++</emphasis></term>

          <listitem>

            <para>Die Programmiersprache C++</para>

          </listitem>

        </varlistentry>

      </variablelist>

      <para>In Abbildung <xref linkend="de.genesez.platform.support"/> 
      sind die unterst&uuml;tzten Plattformen grafisch dargestellt.</para>

      <figure id="de.genesez.platform.support">

        <title>&Uuml;bersicht zur aktuellen Plattformunterst&uuml;tzung</title>

        <mediaobject><imageobject role="html"><imagedata align="center"
         fileref="de.genesez.platforms.support.png"/></imageobject>
        <imageobject role="fo"><imagedata align="center"
         fileref="de.genesez.platforms.support.png" scalefit="1"
         width="100%"/></imageobject></mediaobject>
      </figure>

    </partintro>
    
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../php/de.genesez.platform.php_content.xml" />
	
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../java/de.genesez.platform.java.xml" />
    
	<!--chapter>
      <title>C# Plattform</title>
	  <para></para>
    </chapter -->
  </part>

  <part>
    <title>Weitere GeneSEZ Projekte</title>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../php/de.genesez.platform.php_metaframework.xml" />
	
  </part>
</book>
