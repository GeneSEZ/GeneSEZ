<?xml version="1.0" encoding="utf-8" ?>
<!--DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"-->
<!DOCTYPE book
	PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
	[
		<!ENTITY % isolat1 PUBLIC "ISO 8879:1986//ENTITIES Added Latin 1//EN//XML" "lib/docbook-xml-4.5/ent/isolat1.ent">
		%isolat1;
	]
>
<book>

  <bookinfo>

    <title>Das GeneSEZ Generator Framework</title>

    <!-- authorgroup>

      <author><firstname>Oliver</firstname><surname>Arnold</surname></author>

      <author><firstname>Georg</firstname><surname>Beier</surname></author>

      <author><firstname>Gerrit</firstname><surname>Beine</surname></author>

      <author><firstname>Wolfgang</firstname><surname>Golubski</surname></author>

      <author><firstname>Frank</firstname><surname>Grimm</surname></author>

      <author><firstname>Tobias</firstname><surname>Haubold</surname></author>

      <author><firstname>Nico</firstname><surname>Herbig</surname></author>

      <author><firstname>Robert</firstname><surname>Meichsner</surname></author>

      <author><firstname>Andr&eacute;</firstname><surname>Pfl&uuml;ger</surname></author>

    </authorgroup>  -->

    <!-- edition>Handbuch Version 1.6</edition>
    <pubdate>2009</pubdate> -->

    <copyright><year>2006 - 2011</year><holder>GeneSEZ Research Group</holder></copyright>
  </bookinfo>

  <part>

    <title>Getting Started</title>

    <partintro>

      <para>In <xref linkend="de.genesez.background"/> wird 
      etwas Hintergrundwissen zu modellgetriebenen Ans&auml;tzen und GeneSEZ 
      vermittelt. F&uuml;r einen praktischen Einstieg kann direkt zu 
      <xref linkend="de.genesez.installation"/> gesprungen 
      werden.</para>

    </partintro>

    <chapter id="de.genesez.background">

      <title>Hintergrund und Idee von GeneSEZ</title>

      <para>Nach einem kleinen Einblick in modellgetriebene Ans&auml;tze 
      wird die Idee des GeneSEZ Ansatzes beschrieben, gefolgt von einem 
      kleinen &Uuml;berblick von GeneSEZ.</para>

      <xi:include href="de.genesez.intro.mdsd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      <xi:include href="de.genesez.intro.idea.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      <xi:include href="de.genesez.intro.overview.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </chapter>

    <xi:include href="de.genesez.install.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <chapter>

      <title>GeneSEZ: Just Try It Out</title>

      <para>Dieser Artikel verdeutlicht die Funktionweise und Anwendung 
      des GeneSEZ-Frameworks an einem kleinen Beispiel. Dazu wird ein 
      Projekt aus dem GeneSEZ-Repository ausgecheckt, die 
      Projektstruktur erl&auml;utert und ein vorhandenes UML-Modell in 
      Quellcode transformiert.</para>

      <sect1>

        <title>Checkout Beispielprojekt</title>

        <para>Um das Beispielprojekt aus dem GeneSEZ-Repository 
        auszuchecken, muss zuerst die GeneSEZ-Repository Location 
        konfiguriert werden. Dies wird genauer unter GeneSEZ Source 
        Control Management beschrieben.</para>

        <para />

        <para>Anschlie&szlig;end kann das Beispielprojekt 
        de.genesez.example.java.forms sowie das zugeh&ouml;rige 
        Generatorprojekt de.genesez.example.java.forms.generator 
        ausgecheckt werden.</para>

      </sect1>

      <sect1>

        <title>Projektstruktur</title>

        <para>F&uuml;r ein Softwareprojekt wird eine Aufteilung in 
        mindestens zwei Projekte vorgeschlagen. Dies ist zum Einen ein 
        so genanntes Generatorprojekt, welches Konfigurationen, 
        Bibliotheken und weitere spezifische Artefakte f&uuml;r den 
        modellgetriebenen Entwicklungsprozess beinhaltet. Neben diesem 
        existiert mindestens noch ein weiteres Projekt welches den 
        anwendungsspezifischen Quellcode beinhaltet. Durch diese 
        Aufteilung sind in jedem Projekt nur die Artefakte enthalten, 
        die f&uuml;r das jeweilige Projekt relevant sind.</para>

        <sect2>

          <title>Generatorprojekt</title>

          <para>Das Generatorprojekt ist ein 
          openArchitectureWare-Projekt, welches wiederum ein 
          Eclipse-Plug-In-Projekt ist. Dadurch k&ouml;nnen die ben&ouml;tigten 
          Bibliotheken f&uuml;r den Generator einfach als Eclipse-Plug-Ins 
          referenziert werden. Neben den spezifischen Verzeichnissen 
          und Dateien von Eclipse-Plug-In-Projekten existieren die 
          folgenden Verzeichnisse:</para>

          <para />

          <para>* config</para>

          <para>* model-exp</para>

          <para>* model-gen</para>

          <para />

          <para>Das Verzeichnis config enth&auml;lt den Workflow, welcher 
          die einzelnen Schritte beschreibt, die notwendig sind, um ein 
          Modell in Quellcode zu transformieren. Weiterhin kann 
          optional noch die Datei log4j.properties enthalten sein, 
          welche das von GeneSEZ und openArchitectureWare genutzte 
          Logging-Framework Log4J konfiguriert.</para>

          <para />

          <para>Im Verzeichnis model-exp befindet sich das Modell der 
          Anwendung im XMI-Format des Eclipse UML2-Projektes. Im Falle 
          des Beispielprojektes wurde das Modell mit dem 
          Modellierungswerkzeug Magic Draw erstellt und als Eclipse 
          UML2-Modell exportiert. Daraus ergibt sich auch der Name des 
          Verzeichnisses model-exp, der f&uuml;r &quot;exportiertes 
          Modell&quot; steht. Dieses Modell dient als Ausgangspunkt der 
          Codegenerierung.</para>

          <para />

          <para>Der Ordner model-gen enth&auml;lt ein serialisiertes 
          GeneSEZ-Modell, welches durch den Workflow erzeugt wurde. 
          Sich dieses Modell einmal n&auml;her anzusehen, kann z.B. n&uuml;tzlich 
          sein, um zu &uuml;berpr&uuml;fen, ob Modellmodifikationen korrekt 
          funktionieren. Die XMI-Datei kann mit Hilfe des Sample 
          Reflective Ecore Model Editor ge&ouml;ffnet werden. Dieser stellt 
          das Modell in einer Baumstruktur dar, &auml;hnlich wie der UML 
          Model Editor f&uuml;r Eclipse UML2-Modelle.</para>

          <para />

          <para>Weiterhin k&ouml;nnen sich noch weitere Dateien und 
          Verzeichnisse wie z.B. projektspezifische 
          Type-Mapping-Dateien und Artefakte f&uuml;r die Anpassung des 
          Generators im Generator-Projekt befinden.</para>

        </sect2>

        <sect2>

          <title>Anwendungsprojekt</title>

          <para>Bei gr&ouml;&szlig;eren Projekten ist es sinnvoll, mehrere 
          Anwendungsprojekte zu erstellen (z.B. wenn neben einer 
          Desktopoberfl&auml;che eine Weboberfl&auml;che entwickelt wird). 
          Ansonsten ist ein Anwendungsprojekt in der Regel ausreichend. 
          Das Anwendungsprojekt kann ein Eclipse-Projekt der 
          entsprechenden Zielplattform sein: ein Java-Projekt, ein 
          PHP-Projekt oder ein Web-Projekt (je nachdem, welche 
          Eclipse-Nature am besten geeignet ist). Es kann sich aber 
          genauso gut um ein Projekt einer anderen Entwicklungsumgebung 
          handeln (z.B. ein Visual Studio-Projekt f&uuml;r die 
          C#-Entwicklung). F&uuml;r den modellgetriebenen 
          Entwicklungsprozess an sich ist lediglich ein Verzeichnis im 
          Dateisystem notwendig (siehe unten), jedoch sollte dies 
          sinnvoll in einer Projektstruktur eingegliedert sein.</para>

          <para />

          <para>Die Verzeichnisstruktur ist sehr vom verwendeten 
          Projekt abh&auml;ngig. Deshalb werden hier nur die wichtigsten 
          Verzeichnisse kurz vorgestellt. Im Falle des 
          Beispielprojektes handelt es sich um ein Java-Projekt, das 
          die folgenden Verzeichnisse enth&auml;lt:</para>

          <para />

          <para>* src</para>

          <para>* src-gen</para>

          <para>* lib</para>

          <para>* model</para>

          <para />

          <para>Die Verzeichnisse src und src-gen enhalten den 
          Quellcode des Projektes. Der generierte Quellcode befindet 
          sich dabei im Verzeichnis src-gen und der manuell erstellte 
          in src.</para>

          <para />

          <para>Im lib-Verzeichnis sind die Bibliotheken f&uuml;r das 
          Projekt enthalten. Im Beispielprojekt ist hier die Bibliothek 
          zum Assoziations-Handling enthalten.</para>

          <para />

          <para>Der model-Ordner enth&auml;lt das Modell, welches mit der 
          eingesetzten Modelliersoftware erstellt wurde. Dieses Modell 
          ist dem Anwendungsprojekt zugeordnet, da aus diesem Modell 
          Teile des Quellcodes automatisch erzeugt werden, wodurch das 
          Modell selbst zum Quellcode wird.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Ausf&uuml;hren des Workflows</title>

        <sect2>

          <title>Hinweis GeneSEZ Version 1.6.0</title>

          <para>Durch einen Bug im GeneSEZ-Plug-In m&uuml;ssen bei Version 
          1.6.0 im Beispiel-Generator-Projekt noch folgende 
          Plug-In-Abh&auml;ngigkeiten und -Bibliotheken hinzugef&uuml;gt 
          werden:</para>

          <para />

          <para>* openArchitectureWare UML2 Adapter</para>

          <para>* GeneSEZ Metamodell</para>

          <para>* dom4j Bibliothek</para>

          <para />

          <para>Dazu im Ordner META-INF die Datei MANIFEST.MF &ouml;ffnen 
          und im Tab Dependencies unter Required Plug-Ins die beiden 
          Plug-Ins de.genesez.metamodel und 
          org.openarchitectureware.uml2.adapter hinzuf&uuml;gen. Die 
          Bibliothek dom4j.jar wird &uuml;ber den Build Path hinzugef&uuml;gt: 
          Rechtsklick auf das Projekt und &#x00BB; Build Path &#x00BB; Configure 
          Build Path... w&auml;hlen und dann im Tab Libraries auf Add 
          External JARs... klicken. Nun kann die Datei dom4j-1.6.1.jar 
          aus dem GeneSEZ-Plug-In-Verzeichnis gew&auml;hlt werden (z.B. 
          ...\eclipse-extensions\genesez\eclipse\plugins\de.genesez.platforms.common_1.6.0).</para>

          <para>Um den Workflow zu starten, einfach Rechtsklick auf die 
          Datei workflow.oaw im Verzeichnis config und Run As &#x00BB; oAW 
          Workflow w&auml;hlen. In der Konsole sollte bei erfolgreicher 
          Ausf&uuml;hrung in den letzten Zeilen die folgende Ausgabe 
          erscheinen:</para>

          <mediaobject><imageobject>
          <imagedata fileref="images/workflow.finish.png"/></imageobject></mediaobject>
          <para>Im Verzeichnis src-gen des Anwendungsprojektes sollte 
          nun der aktuelle generierte Quellcode vorhanden sein.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Workflow Details</title>

        <para>Der Workflow kann mit einem Doppelklick ge&ouml;ffnet werden. 
        Die Definition des Workflows ist &auml;hnlich der von 
        ANT-Build-Skripten. In der ersten H&auml;lfte sind Properties 
        definiert. Dies sind projektspezifische Einstellungen wie Pfad 
        und Dateiname des Modells sowie Standardwerte f&uuml;r die Workflow 
        Komponenten. In der zweiten H&auml;lfte des Workflows sind die 
        Workflowkomponenten definiert, die die Transformationsschritte 
        vom Modell bis zum Quellcode definieren:</para>

        <para />

        <para>1. Die erste Workflowkomponente liest ein UML2-Modell 
        ein, validiert es und transformiert es in ein 
        GeneSEZ-Modell</para>

        <para>2. Danach wird das GeneSEZ-Modell mit allgemeinen Regeln 
        auf Korrektheit &uuml;berpr&uuml;ft</para>

        <para>3. Als drittes wird das GeneSEZ-Modell auf 
        Java-Konformit&auml;t &uuml;berpr&uuml;ft</para>

        <para>4. Die vierte Workflowkomponente serialisiert das 
        GeneSEZ-Modell in eine Datei</para>

        <para>5. Als letztes wird das GeneSEZ-Modell mit Hilfe der 
        Java-Templates in Java-Quellcode transformiert</para>

        <para />

        <para>Die Parameter der einzelnen Workflow Komponenten sind in 
        der Workflow-Referenz erkl&auml;rt: GeneSEZ Workflow Referenz.</para>

      </sect1>

      <sect1>

        <title>Generierter Quellcode</title>

        <para>Wesentlich f&uuml;r die Akzeptanz der MDSD ist, dass der 
        generierte Quellcode den Coding-Guidelines der Entwickler 
        entspricht. Um dies zu erreichen, stehen mehrere M&ouml;glichkeiten 
        bereit.</para>

        <para />

        <para>Die Workflowkomponente zur Durchf&uuml;hrung einer 
        Modell-zu-Text-Transformation stellt Parameter bereit, um das 
        Aussehen des generierten Quellcodes zu beeinflussen. Dazu wird 
        hier auf die Referenz dieser Workflowkomponente verwiesen: 
        GeneSEZ Modell-zu-Text Workflow Komponente</para>

        <para />

        <para>Gr&ouml;&szlig;ere &auml;nderungen an der Struktur des Quellcodes k&ouml;nnen 
        mit Hilfe des Customization Guide erreicht werden: GeneSEZ 
        Customization Guide?</para>

        <para />

        <para>F&uuml;r Informationen, wie die GeneSEZ-Templates 
        Modellinformationen in Quellcode umsetzen, wird auf die 
        GeneSEZ-Generator-Pattern verwiesen.</para>

      </sect1>

    </chapter>

  </part>

  <part>

    <title>Benutzer-Referenz</title>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="de.genesez.platforms.common.accessors.xml" />
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="de.genesez.platforms.common.workflow.components.xml" />
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="de.genesez.platforms.common.type.mapping.xml" />

    <chapter>

      <title>Externe Typen im Metamodell</title>

      <para>Mit dem Metamodellelement MExternal ist ein Konzept im 
      GeneSEZ-Metamodell vorhanden, welches in dieser Form nicht zur 
      UML geh&ouml;rt. Als externe Typen werden in diesem Zusammenhang im 
      Modell verwendete Typen (Klassen, Interfaces, Enumerations) 
      bezeichnet, die selbst nicht im Modell vorhanden sind. Sie 
      befinden sich stattdessen z.B. in Standard-Bibliotheken der 
      Programmiersprache oder in anderen Bibliotheken, die verwendet 
      werden sollen.</para>

      <sect1>

        <title>Definition im UML-Modell</title>

        <para>Im zugrunde liegenden UML-Modell werden externe Typen als 
        Klassen (bzw. Interfaces oder Enumerations) definiert und 
        speziell gekennzeichnet. Dazu gibt es mehrere 
        M&ouml;glichkeiten:</para>

        <para />

        <para>* Verwendung eines Stereotypes</para>

        <para>* Verwendung eines separaten Packages</para>

        <para>* Ablage des Typs direkt im Modell (der Typ hat eine 
        Containment-Beziehung zum Modell-Element und befindet sich 
        nicht in einem Package)</para>

        <para />

        <para>Die verschiedenen M&ouml;glichkeiten haben spezifische Vor- 
        und Nachteile. Die Annotation der einzelnen Klassen mit einem 
        Stereotyp ist jedoch allgemein zu bevorzugen, da hier in den 
        Modellen und verschiedenen Diagrammen die Semantik einer 
        externen Klasse am deutlichsten zum Ausdruck kommt. Beispiele 
        dazu sind weiter unten zu finden.</para>

      </sect1>

      <sect1>

        <title>Definition im Workflow</title>

        <para>Je nachdem, wie externe Typen im UML-Modell definiert 
        wurden, muss dies auch im Workflow angegeben werden. Dazu 
        werden die folgenden drei Parameter der Workflow-Komponenten 
        makeGenesezModel bzw. makeGenesezModelProfile genutzt:</para>

        <para />

        <para>* mapClassesInModelToExternal &#x00BB; Der Parameter kann als 
        Wert true oder false annehmen und gibt an, ob Typen, die direkt 
        im Modell abgelegt sind und somit zu keinem Package geh&ouml;ren, zu 
        externen Typen transformiert werden (true) oder normal 
        behandelt werden (false). Standardm&auml;&szlig;ig ist der Wert 
        false.</para>

        <para>* externalPackages &#x00BB; Als Wert f&uuml;r den Parameter kann eine 
        mit Komma (oder f&uuml;r eine bessere Lesbarkeit eine mit Komma und 
        Leerzeichen) separierte Liste mit Namen von Packages angegeben 
        werden, welche Container f&uuml;r externe Typen darstellen. Die 
        angegebenen Packages selbst werden ebenfalls nicht in ein 
        GeneSEZ-Package transformiert. Standardm&auml;&szlig;ig ist der Wert ein 
        leerer String.</para>

        <para>* externalStereotypes &#x00BB; Als Wert kann eine mit Komma 
        (oder f&uuml;r eine bessere Lesbarkeit eine mit Komma und 
        Leerzeichen) separierte Liste mit Namen von Stereotypen 
        angegeben werden. Diese Stereotypen k&ouml;nnen im UML-Modell sowohl 
        Typen als auch Packages zugewiesen werden. Ist einer dieser 
        Stereotypen einem Typ zugewiesen, so wird dieser in einen 
        externen Typ transformiert. Ist ein Stereotyp einem Package 
        zugewiesen, so wird dieses als Container f&uuml;r externe Typen 
        betrachtet und wird selbst nicht transformiert. Alle in dem 
        betreffenden Package enthaltenen Typen werden zu externen 
        Typen. Standardm&auml;&szlig;ig ist der Wert ein leerer String.</para>

      </sect1>

      <sect1>

        <title>Umgang in xPand-Templates</title>

        <para>Innerhalb von Templates ist es unwesentlich, ob ein Typ 
        ein externer Typ ist oder nicht. Diese Zuordnung wird durch das 
        GeneSEZ Type-Mapping realisiert.</para>

      </sect1>

      <sect1>

        <title>Beispiel</title>

        <para>Es folgen einige Beispiele, die den Einsatz der 
        vorgestellten M&ouml;glichkeiten zur Definition von externen Typen 
        zeigen. Wie in den Modellen deutlich wird, ist die Verwendung 
        eines Stereotypes zur Annotation von Klassen am 
        ausdrucksst&auml;rksten.</para>

        <sect2>

          <title>Verwendung eines Stereotypes zur Annotation einer 
          Klasse</title>

          <para>Zugeh&ouml;rige Parameter in der Workflow 
          Konfiguration:</para>

        </sect2>

        <sect2>

          <title>Verwendung eines Stereotypes zur Annotation eines 
          Packages</title>

          <para>Zugeh&ouml;rige Parameter in der Workflow Konfiguration 
          (identisch mit dem ersten Beispiel):</para>

        </sect2>

        <sect2>

          <title>Verwendung der Namen von Packages</title>

          <para>Zugeh&ouml;rige Parameter in der Workflow 
          Konfiguration:</para>

        </sect2>

        <sect2>

          <title>Mapping aller Klassen, die direkt im Modell enthalten 
          sind</title>

          <para>Zugeh&ouml;rige Parameter in der Workflow 
          Konfiguration:</para>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="de.genesez.platforms.common.logging">

      <title>Das GeneSEZ-Logging-Konzept</title>

      <para>In diesem Artikel soll in aller K&uuml;rze das 
      GeneSEZ-Logging-Konzept-beschrieben werden. Dabei wird auf das 
      Logging in Java-Code, in Skripten und in Templates sowie auf die 
      Konfiguration eingegangen.</para>

      <para />

      <para>GeneSEZ basiert auf dem Framework openArchitectureWare, 
      welches die Logging-API des Apache Commons Logging Frameworks 
      nutzt und als Implementierung log4j verwendet. Das 
      GeneSEZ-Framework nutzt ebenfalls das Apache Commons Logging 
      Framework.</para>

      <sect1>

        <title>Java</title>

        <para>Das Logging von Java-Code aus unterscheidet sich nicht 
        von der gew&ouml;hnlichen Nutzung der Logging-API. Zuerst wird eine 
        Referenz auf ein Log-Objekt ben&ouml;tigt: Dann kann dieses 
        Log-Objekt genutzt werden, um Log-Ausgaben zu 
        realisieren:Weitere Informationen befinden sich im Manual zu 
        log4j: log4j 1.2 Manual</para>

      </sect1>

      <sect1>

        <title>Skripten + Templates</title>

        <para>F&uuml;r Log-Ausgaben aus den openArchitectureWare-Artefakten 
        steht als Frontend im Common-Projekt unter dem Namespace 
        de.genesez.platforms.common.log das eXtend-Skript Log.ext zur 
        Verf&uuml;gung. Die Funktionen dieses Skriptes rufen Methoden der 
        Java Klasse GenesezLogger auf, welche die Apache Commons 
        Logging-API nutzen.</para>

        <para />

        <para>Sollen Log-Ausgaben erfolgen, so sollte zuerst ein 
        benannter Logger ausgew&auml;hlt werden, damit die Ausgaben sp&auml;ter 
        im Log einem Artefakt zugeordnet werden k&ouml;nnen:</para>

        <para>Die weiteren Funktionen des Skripts dienen zum Logging 
        von Nachrichten mit dem jeweiligen Log-Level:</para>

      </sect1>

      <sect1>

        <title>Konfiguration</title>

        <para>Zur Konfiguration der verwendeten Implementierung log4j 
        hat openArchitectureWare bereits standardm&auml;&szlig;ig die Datei 
        log4j.properties im Classpath, die dementsprechend auch 
        standardm&auml;&szlig;ig genutzt wird. Das GeneSEZ-Framework stellt 
        ebenfalls eine log4j.properties im Namespace 
        de.genesez.platforms.common.log bereit. log4j sucht den 
        kompletten Classpath nach dieser Datei ab und nutzt die erste 
        Datei dieses Namens, die gefunden wird. Daher wird i.d.R. die 
        von openArchitectureWare genutzt, da diese im Classpath eher 
        gefunden wird.</para>

        <para />

        <para>Soll die Log-Konfiguration angepasst werden, so kann die 
        vom GeneSEZ-Framework bereitgestellte als Vorlage genutzt 
        werden. Dazu wird diese in das Konfigurationsverzeichnis des 
        aktuellen Generator-Projekts kopiert (siehe GeneSEZ 
        Projektstruktur).</para>

        <para />

        <para>Zur detaillierten Erkl&auml;rung der Inhalte der 
        Konfigurationsdatei sei auf das log4j Manual verwiesen: log4j 
        1.2 Manual</para>

      </sect1>

    </chapter>

    <chapter>

      <title>GeneSEZ UML Profil</title>

      <para>Um Konzepte des GeneSEZ-Metamodells in UML zu modellieren 
      sowie n&uuml;tzliche und fachlich relevante Informationen zur 
      Umsetzung im Modell zu hinterlegen, wurde ein GeneSEZ-UML-Profil 
      eingef&uuml;hrt. Dieses ist prinzipiell plattformunabh&auml;ngig, jedoch 
      m&uuml;ssen nicht alle Aspekte, die das UML-Profil enth&auml;lt, auch von 
      den plattform-spezifischen Template-Sets ausgewertet 
      werden.</para>

      <para />

      <para>Welche Aspekte die plattformspezifischen Templates 
      unterst&uuml;tzen, ist in der Dokumentation zu den jeweiligen 
      Plattformen zu finden.</para>

      <para />

      <para>source:trunk/de.genesez.docs/GeneSezProfile/genesez.profile.png</para>

      <para>Folgend werden die einzelnen Stereotypen und ihre Bedeutung 
      n&auml;her erl&auml;utert.</para>

    </chapter>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="de.genesez.platforms.common.statistic.xml" />

  </part>
  
  <part>

    <title>Plattform Projekte</title>
    <!-- chapter>
      <title>Java Plattform</title>
	  <para></para>
    </chapter -->
    
    <partintro>

      <para>Das GeneSEZ Framework stellt aktuell Modelltransformationen 
      f&uuml;r die folgenden Plattformen bereit:</para>

      <variablelist>

        <varlistentry>

          <term><emphasis role="bold">Java</emphasis></term>

          <listitem>

            <para>Die Programmiersprache Java in Version 4 und 5 sowie 
            darauf aufbauenden Technologien und Frameworks</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis role="bold">PHP</emphasis></term>

          <listitem>

            <para>Die Programmiersprache PHP in Version 5 sowie 
            Unterst&uuml;tzung von Frameworks</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis role="bold">dot.net</emphasis></term>

          <listitem>

            <para>Die Programmiersprache C#</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis role="bold">C++</emphasis></term>

          <listitem>

            <para>Die Programmiersprache C++</para>

          </listitem>

        </varlistentry>

      </variablelist>

      <para>In Abbildung <xref linkend="de.genesez.platform.support"/> 
      sind die unterst&uuml;tzten Plattformen grafisch dargestellt.</para>

      <figure id="de.genesez.platform.support">

        <title>&Uuml;bersicht zur aktuellen Plattformunterst&uuml;tzung</title>

        <mediaobject><imageobject role="html"><imagedata align="center"
         fileref="images/de.genesez.platforms.support.png"/></imageobject>
        <imageobject role="fo"><imagedata align="center"
         fileref="images/de.genesez.platforms.support.png" scalefit="1"
         width="100%"/></imageobject></mediaobject>
      </figure>

    </partintro>
    
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="de.genesez.platforms.php.xml" />
	
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="de.genesez.platforms.java.xml" />
    
	<!--chapter>
      <title>C# Plattform</title>
	  <para></para>
    </chapter -->
  </part>

  <part>
    <title>Weitere GeneSEZ Projekte</title>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="de.genesez.php.metaframework.xml" />
	
  </part>

</book>
