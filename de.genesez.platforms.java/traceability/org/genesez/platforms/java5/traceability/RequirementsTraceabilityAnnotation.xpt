
«IMPORT gcore»
«IMPORT greq»

«REM»
	Advice template to add requirements traceability information to generated java source code using annotations.
	It generates 3 annotation types and annotates the generated java source code.
	@author tobias haubold
«ENDREM»

«EXTENSION de::genesez::metamodel::navigation::RequirementsTraceability»
«EXTENSION org::genesez::platforms::java5::traceability::RequirementsTraceabilityAnnotation»
«EXTENSION org::genesez::platforms::java::scripts::Conversion»

«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«AROUND org::genesez::platforms::java::java5::templates::Root::Root FOR MModel -»
	«targetDef.proceed() -»
	«EXPAND AnnotationTypes FOR greq() -»
«ENDAROUND»

«AROUND org::genesez::platforms::java::java5::templates::Class::_Annotation FOR MClass -»
	«EXPAND _Scenario -»
	«EXPAND _Requirement -»
«ENDAROUND»

«AROUND org::genesez::platforms::java::java5::templates::Interface::_Annotation FOR MInterface -»
	«EXPAND _Scenario -»
	«EXPAND _Requirement -»
«ENDAROUND»

«AROUND org::genesez::platforms::java::java5::templates::Operation::_Annotation FOR MOperation -»
	«EXPAND _ScenarioStep -»
	«EXPAND _Requirement -»
«ENDAROUND»

«AROUND org::genesez::platforms::java::java5::templates::Operation::_Annotation FOR MParameter -»
	«EXPAND _Requirement -»
«ENDAROUND»

«AROUND org::genesez::platforms::java::java5::templates::Attribute::_Annotation FOR MAttribute -»
	«EXPAND _Requirement -»
«ENDAROUND»

«AROUND org::genesez::platforms::java::java5::templates::Import::_OtherImports FOR MClassifier -»
	«EXPAND _Imports -»
«ENDAROUND»

«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«DEFINE AnnotationTypes FOR RModel -»
	«EXPAND RequirementAnnotation -»
	«EXPAND ScenarioAnnotation -»
	«EXPAND ScenarioStepAnnotation -»
«ENDDEFINE»

«DEFINE RequirementAnnotation FOR RModel -»
«FILE gcore().traceabilityPackage().filePath() + "/" + requirementTypeName() + ".java"»
package «gcore().traceabilityPackage().packageDeclaration()»;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

/**
 * Marks the annotated target as needed to realize the specified requirement.
 */
@Documented
@Retention(RetentionPolicy.RUNTIME)
public @interface «requirementTypeName()» {
	«EXPAND _Requirement -»
	
	/**
	 * @return all requirements fulfilled by a type
	 */
	«requirementValueTypeName()»[] value();
}
«ENDFILE»
«ENDDEFINE»

«DEFINE _Requirement FOR RModel -»
	/**
	 * Defines all requirements which need to be satisfied.
	 */
	public enum «requirementValueTypeName()» {
		«EXPAND _Requirement FOREACH requirement SEPARATOR ", "»
	}
«ENDDEFINE»

«DEFINE _Requirement FOR RRequirement»
		/**
		 * «definition»
		«EXPAND _url -»
		 */
		«requirementLiteralName()»
«ENDDEFINE»


«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«DEFINE ScenarioAnnotation FOR RModel -»
«FILE gcore().traceabilityPackage().filePath() + "/" + scenarioTypeName() + ".java"»
package «gcore().traceabilityPackage().packageDeclaration()»;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Marks the annotated type as needed to realize the specified scenarios.
 */
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.TYPE})
public @interface «scenarioTypeName()» {
	
	«EXPAND _Scenario -»
	
	/**
	 * @return all scenarios fulfilled by a type
	 */
	«scenarioValueTypeName()»[] value();
}
«ENDFILE»
«ENDDEFINE»

«DEFINE _Scenario FOR RModel -»
	/**
	 * Defines all scenarios which need to be realized.
	 */
	public enum «scenarioValueTypeName()» {
		«EXPAND _Scenario FOREACH scenario SEPARATOR ", "»
	}
«ENDDEFINE»

«DEFINE _Scenario FOR RScenario»
		/**
		 * «definition»
		 * 
		 * <h3>Steps:</h3>
		 * <ol>
		«FOREACH step AS s -»
		 * 	<li>«definition»</li>
		«ENDFOREACH -»
		 * </ol>
		 * 
		«EXPAND _url»
		 */
		«scenarioLiteralName()»
«ENDDEFINE»


«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«DEFINE ScenarioStepAnnotation FOR RModel -»
«FILE gcore().traceabilityPackage().filePath() + "/" + scenarioStepTypeName() + ".java"»
package «gcore().traceabilityPackage().packageDeclaration()»;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Marks the annotated type as needed to realize the specified scenario steps.
 */
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})
public @interface «scenarioStepTypeName()» {
	
	«EXPAND _ScenarioStep -»
	
	/**
	 * @return all scenario steps fulfilled by a type
	 */
	«scenarioValueTypeName()»[] value();
}
«ENDFILE»
«ENDDEFINE»

«DEFINE _ScenarioStep FOR RModel -»
	/**
	 * Defines all scenario steps which need to be satisfied.
	 */
	public enum «scenarioValueTypeName()» {
		«EXPAND _ScenarioStep FOREACH scenario.step SEPARATOR ", "»
	}
«ENDDEFINE»

«DEFINE _ScenarioStep FOR RScenarioStep»
		/**
		 * «definition»
		«EXPAND _url -»
		 */
		«scenarioStepLiteralName()»
«ENDDEFINE»


«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«DEFINE _url FOR RSpecObject -»
		«IF url != null -»
		 * @see <a href="«url»">«url»</a>
		«ENDIF -»
«ENDDEFINE»


«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«DEFINE _Scenario FOR MClassifier -»
	«IF !scenario().isEmpty -»
	@«scenarioTypeName()»({«FOREACH scenario() AS s SEPARATOR ", " -»«s.scenarioLiteralName()»«ENDFOREACH -»})
	«ENDIF -»
«ENDDEFINE»

«DEFINE _ScenarioStep FOR MOperation -»
	«IF !scenarioStep().isEmpty -»
	@«scenarioStepTypeName()»({«FOREACH scenarioStep() AS st SEPARATOR ", " -»«st.scenarioStepLiteralName()»«ENDFOREACH -»})
	«ENDIF -»
«ENDDEFINE»

«DEFINE _Requirement FOR MElement -»
	«IF !requirement().isEmpty -»
	@«requirementTypeName()»({«FOREACH requirement() AS r SEPARATOR ", " -»«r.requirementLiteralName()»«ENDFOREACH -»})
	«ENDIF -»
«ENDDEFINE»

«DEFINE _Imports FOR MClassifier -»
import «gcore().traceabilityPackage().packageDeclaration() + "." + requirementTypeName()»;
	«FOREACH (List[RRequirement]) {}.addAll(requirement()).addAll(property.requirement()).addAll(operation.requirement()).addAll(operation.parameter.requirement()) AS r -»
import static «gcore().traceabilityPackage().packageDeclaration()».«requirementTypeName()».«requirementValueTypeName()».«r.requirementLiteralName()»;
	«ENDFOREACH -»
import «gcore().traceabilityPackage().packageDeclaration() + "." + scenarioTypeName()»;
	«FOREACH scenario() AS s -»
import static «gcore().traceabilityPackage().packageDeclaration()».«scenarioTypeName()».«scenarioValueTypeName()».«s.scenarioLiteralName()»;
	«ENDFOREACH -»
import «gcore().traceabilityPackage().packageDeclaration() + "." + scenarioStepTypeName()»;
	«FOREACH operation.scenarioStep() AS st -»
import static «gcore().traceabilityPackage().packageDeclaration()».«scenarioStepTypeName()».«scenarioStepValueTypeName()».«st.scenarioStepLiteralName()»;
	«ENDFOREACH -»
«ENDDEFINE»
