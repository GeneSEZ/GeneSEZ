/**
 * 	functions for creating new MStereotypes, MTags, MTaggedValues and for changing the value
 *	of an MTaggedValue 
 * 
 * 
 * @author	andre pflueger
 * @date	2008-09-05
 */

// based on genesez meta model
import gcore;

extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::m2m::CreateTemplate;

/**
 *	function to create a MAttribute
 *
 *	@param		name			name of the attribute
 *	@param		visibility		modifier of the attribute
 *	@param		multiplicity	multiplicity of the attribute	
 *	@param		derived			attribute is part of a superclass
 *	@param		unique			attribute is unique
 *	@param		ordered			attribute is ordered
 *
 */
create MAttribute makeAttribute(String name, String visibility, int multiplicity, boolean derived, boolean unique, boolean ordered) :
	setName(name) ->
	setVisibility(visibility) ->
	setMultiplicity(multiplicity) ->
	setDerived(derived) ->
	setUnique(unique) ->
	setOrdered(ordered);

/**
 *	function to add the stereotype "ejb3Column" to an existing (in the classifier) MElement
 *
 *	@param		elem		MElement
 *	@param		classifier	classifier of the MElement
 *
 */
MElement addColumnForPrimaryKeyInheritance(MElement this, MClassifier classifier) :
	classifier.property.exists(e|e.name == this.name) 
		? (
			let s = makeColumnStereotype((MProperty) this) :
				this.stereotype.add(s) ->
				createTaggedValue(this, createTag(s, "updatable", "String"), "false") ->
				createTaggedValue(this, createTag(s, "insertable", "String"), "false") ->
				createTaggedValue(this, createTag(s, "name", "String"), this.name) ->
				createTaggedValue(this, createTag(s, "scale", "String"), "0") ->
				createTaggedValue(this, createTag(s, "precision", "String"), "0") ->
				createTaggedValue(this, createTag(s, "length", "String"), "255") ->
				createTaggedValue(this, createTag(s, "columnDefinition", "String"), "null") ->
				createTaggedValue(this, createTag(s, "table", "String"), "null") ->
				createTaggedValue(this, createTag(s, "nullable", "String"), "true") ->
				createTaggedValue(this, createTag(s, "unique", "String"), "false")
		)
		: "";
		
/**
 *	function to create the stereotype "ejb3Column" for primary key inheritance
 *	function can not be used for general "ejb3Column" stereotype creation!!!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MProperty) 
 *
 *	@param		container	container of the stereotype
 *
 */
MStereotype makeColumnStereotype(MProperty container) :
	let s = createStereotype(container.classifier.owningPackage.getModel(), "ejb3Column", "ejb3Column") :
		s.property.add(createTag(s, "updatable", "String")) ->
		s.property.add(createTag(s, "insertable", "String")) ->
		s.property.add(createTag(s, "name", "String")) ->
		s.property.add(createTag(s, "scale", "String")) ->	
		s.property.add(createTag(s, "precision", "String")) ->
		s.property.add(createTag(s, "length", "String")) ->
		s.property.add(createTag(s, "columnDefinition", "String")) ->
		s.property.add(createTag(s, "table", "String")) ->	
		s.property.add(createTag(s, "nullable", "String")) ->
		s.property.add(createTag(s, "unique", "String")) ->
		s;

/**
 *	function to add an "ejb3Association" stereotype to a MProperty
 *	standard values are not set by this function!
 *
 *	@param		associationType		value of "ejb3AssociationType" (standard: "AutoDetect")
 *	@param		targetEntity		String (standard: "")
 *	@param		cascade 			value of "ejb3CascadeType" as array (standard: "[]")
 *	@param		fetch				value of "ejb3FetchType" (standard: "DEFAULT")
 *	@param		optional			boolean value (standard: true)
 *	@param		mappedBy			String (standard: "")
 *
 */
Void addAssociationStereotype(MProperty this, String associationType, String targetEntity, String cascade, String fetch, String optional, String mappedBy) :
	let s = makeAssociationStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "type", "ejb3AssociationType"), associationType) ->
		createTaggedValue(this, createTag(s, "cascade", "ejb3CascadeType"), cascade) ->
		createTaggedValue(this, createTag(s, "fetch", "ejb3FetchType"), fetch) ->
		createTaggedValue(this, createTag(s, "optional", "Boolean"), optional) ->
		createTaggedValue(this, createTag(s, "mappedBy", "String"), mappedBy) ->
		createTaggedValue(this, createTag(s, "targetEntity", "String"), targetEntity);
		
/**
 *	function to create an "ejb3Association" stereotype
 *	standard values are not set by this function!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MProperty) 
 *
 *	@param		associationType		value of "ejb3AssociationType" (standard: "AutoDetect")
 *	@param		targetEntity		String (standard: "")
 *	@param		cascade 			value of "ejb3CascadeType" as array (standard: "[]")
 *	@param		fetch				value of "ejb3FetchType" (standard: "DEFAULT")
 *	@param		optional			boolean value (standard: true)
 *	@param		mappedBy			String (standard: "")
 *
 */
MStereotype makeAssociationStereotype(MProperty container) :
	let s = createStereotype(container.classifier.owningPackage.getModel(), "ejb3Association", "ejb3Association") :
		s.property.add(createTag(s, "type", "ejb3AssociationType")) ->
		s.property.add(createTag(s, "cascade", "ejb3CascadeType")) ->
		s.property.add(createTag(s, "fetch", "ejb3FetchType")) ->
		s.property.add(createTag(s, "optional", "Boolean")) ->	
		s.property.add(createTag(s, "mappedBy", "String")) ->
		s.property.add(createTag(s, "targetEntity", "String")) ->
		s;

/**
 *	function to add an "ejb3PrimaryKey" stereotype to a MProperty
 *	default values are not set by this function!
 *
 *	@param		this			instance of MProperty
 *	@param		generatedValue	boolean value
 *	@param		embeddedId		boolean value
 *	@param		strategy		generation strategy
 *	@param		generatorName	name of the generator
 *
 */
Void addPrimaryKeyStereotype(MProperty this, String generatedValue, String embeddedId, String strategy, String generatorName) :
	let s = makePrimaryKeyStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "generatedValue", "Boolean"), generatedValue) ->
		createTaggedValue(this, createTag(s, "embeddedId", "Boolean"), embeddedId) ->
		createTaggedValue(this, createTag(s, "strategy", "String"), strategy) ->
		createTaggedValue(this, createTag(s, "generatorName", "String"), generatorName);

/**
 *	function to create an "ejb3PrimaryKey" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MProperty) 
 *
 *	@param		container		instance of MProperty
 *
 */
MStereotype makePrimaryKeyStereotype(MProperty container) :
	let s = createStereotype(container.classifier.owningPackage.getModel(), "ejb3PrimaryKey", "ejb3PrimaryKey") :
		s.property.add(createTag(s, "generatedValue", "Boolean")) ->
		s.property.add(createTag(s, "embeddedId", "Boolean")) ->
		s.property.add(createTag(s, "strategy", "String")) ->
		s.property.add(createTag(s, "generatorName", "String")) ->
		s;
	
/**
 *	function to add an "ejb3Inheritance" stereotype to a MClass
 *	standard values are not set by this function!
 *
 *	@param		strategy		value of "ejb3InheritanceType" (standard: "SINGLE_TABLE")
 *
 */
Void addInheritanceStereotype(MClass this, String strategy) :
	let s = makeInheritanceStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "strategy", "ejb3InheritanceType"), strategy);

/**
 *	function to create an "ejb3Inheritance" stereotype
 *	standard values are not set by this function!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MClass) 
 *
 *	@param		strategy		value of "ejb3InheritanceType" (standard: "SINGLE_TABLE")
 *
 */
MStereotype makeInheritanceStereotype(MClass container) :
	let s = createStereotype(container.owningPackage.getModel(), "ejb3Inheritance", "ejb3Inheritance") :
		s.property.add(createTag(s, "strategy", "ejb3InheritanceType")) ->
		s;
	
/**
 *	function to add an "ejb3DiscriminatorColumn" stereotype to a MClass
 *	standard values are not set by this function!
 *
 *	@param		columnDefinition	
 *	@param		description			
 *	@param		length				
 *	@param		name				
 *
 */
Void addDiscriminatorColumnStereotype(MClass this, String columnDefinition, String discriminatorType, String length, String name) :
	let s = makeDiscriminatorColumnStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "columnDefinition", "String"), columnDefinition) ->
		createTaggedValue(this, createTag(s, "discriminatorType", "ejb3DiscriminatorType"), discriminatorType) ->
		createTaggedValue(this, createTag(s, "length", "String"), length) ->
		createTaggedValue(this, createTag(s, "name", "String"), name);

/**
 *	function to create an "ejb3DiscriminatorColumn" stereotype
 *	standard values are not set by this function!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MClass) 
 *
 *	@param		container	container of the stereotype
 *
 */
MStereotype makeDiscriminatorColumnStereotype(MClass container) :
	let s = createStereotype(container.owningPackage.getModel(), "ejb3DiscriminatorColumn", "ejb3DiscriminatorColumn") :
		s.property.add(createTag(s, "columnDefinition", "String")) ->
		s.property.add(createTag(s, "discriminatorType", "ejb3DiscriminatorType")) ->
		s.property.add(createTag(s, "length", "String")) ->
		s.property.add(createTag(s, "name", "String")) ->
		s;
	
/**
 *	function to add an "ejb3DiscriminatorValue" stereotype to a MClass
 *	default values are not set by this function!
 *
 *	@param		value		identifier of discriminator column
 *
 */
Void addDiscriminatorValueStereotype(MClass this, String value) :
	let s = makeDiscriminatorValueStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "value", "String"), value);

/**
 *	function to create an "ejb3DiscriminatorValue" stereotype
 *	standard values are not set by this function!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MClass) 
 *
 *	@param		container	container of the stereotype
 *
 */
MStereotype makeDiscriminatorValueStereotype(MClass container) :
	let s = createStereotype(container.owningPackage.getModel(), "ejb3DiscriminatorValue", "ejb3DiscriminatorValue") :
		s.property.add(createTag(s, "columnDefinition", "String"));

/**
 *	function to add an "ejb3ersistenceUnit" stereotype to a MAttribute
 *	default values are not set by this function!
 *
 *	@param		this		instance of MAttribute 
 *	@param		name		
 *	@param		unitName	
 *
 */
Void addPersistenceUnitStereotype(MAttribute this, String name, String unitName) :
	let s = makePersistenceUnitStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "unitName", "String"), name) ->
		createTaggedValue(this, createTag(s, "name", "String"), unitName);

/**
 *	function to create an "ejb3PersistenceUnit" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MAttribute) 
 *
 *	@param		attribute	instance of MAttribute 
 *	@param		name		
 *	@param		unitName	
 *
 */
MStereotype makePersistenceUnitStereotype(MAttribute container) :
	let s = createStereotype(container.classifier.owningPackage.getModel(), "ejb3PersistenceUnit", "ejb3PersistenceUnit") :
		s.property.add(createTag(s, "unitName", "String")) ->
		s.property.add(createTag(s, "name", "String"));

/**
 *	function to add an "ejb3ersistenceContext" stereotype to a MAttribute
 *	default values are not set by this function!
 *
 *	@param		this		instance of MAttribute 
 *	@param		type		
 *	@param		name		
 *	@param		unitName	
 *
 */
Void addPersistenceContextStereotype(MAttribute this, String type, String name, String unitName) :
	let s = makePersistenceContextStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "type", "ejb3PersistenceContextType"), type) ->
		createTaggedValue(this, createTag(s, "name", "String"), name) ->
		createTaggedValue(this, createTag(s, "unitName", "String"), unitName);

/**
 *	function to create an "ejb3PersistenceContext" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to the anyStereotype list of MModel, not to the list
 *	of the container (MAttribute) 
 *
 *	@param		attribute	instance of MAttribute 
 *	@param		type		
 *	@param		name		
 *	@param		unitName	
 *
 */
MStereotype makePersistenceContextStereotype(MAttribute container) :
	let s = createStereotype(container.classifier.owningPackage.getModel(), "ejb3PersistenceContext", "ejb3PersistenceContext") :
		s.property.add(createTag(s, "type", "ejb3PersistenceContextType")) ->
		s.property.add(createTag(s, "unitName", "String")) ->
		s.property.add(createTag(s, "name", "String")) ->
		s;