«REM»
	Performs the generation of data types
	
	@author	nico herbig
	@author	tobias haubold (last)
	@date	2007-07-13
«ENDREM»

«REM» based on genesez meta model «ENDREM»
«IMPORT gcore»

«REM» useful support functions «ENDREM»
«EXTENSION de::genesez::platforms::common::AccessHelper»
«EXTENSION de::genesez::platforms::common::typemapping::TypeMapping»

«REM» use java naming conventions «ENDREM»
«EXTENSION de::genesez::platforms::java::scripts::Naming»
«REM» use java conversions «ENDREM»
«EXTENSION de::genesez::platforms::java::scripts::Conversion»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	processes a data type
«ENDREM»
«DEFINE Root FOR MDataType -»
package «packageDeclaration() -»;
«EXPAND Import::Import -»
«EXPAND Comment::Type -»
«EXPAND Type::Modifier -» class «asTypeName() -» «EXPAND Type::Generics» «EXPAND Type::Generalization -» «EXPAND Type::Realization -» {
	
	«IF hasAttributes() -»
	// -- generated attribute, constant + association declarations ----------
	«ENDIF -»
	«EXPAND Attribute::Declaration -»
	
	// -- generated constructors --------------------------------------------
	«EXPAND Operation::Constructor -»
	«EXPAND _InitialisingConstructor -»
	
	«IF hasOperationDeclarations() -»
	// -- generated method declarations -------------------------------------
	«ENDIF -»
	«EXPAND Operation::Declaration -»
	
	«IF hasOperations() -»
	// -- generated method stubs for implementations + derived attributes ---
	«ENDIF -»
	«EXPAND Operation::Implementation -»
	
	«IF hasAttributes() -»
	// -- generated association + attribute accessors -----------------------
	«ENDIF -»
	«EXPAND Attribute::Getter FOREACH property.typeSelect(MAttribute).select( e| !e.derived ) -»
	
	// -- own code implementation -------------------------------------------
	«EXPAND Type::OwnCodeImpl("java.datatype.own.code.implementation." + xmiGuid) -»
}
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	generates an initialising constructor
	all attributes of class + superclasses are set within constructor
«ENDREM»
«DEFINE _InitialisingConstructor FOR MClassifier -»
«EXPAND Comment::InitConstructor -»
public «mapName().asTypeName()» («EXPAND _AllAttributesAsParams») {
	«EXPAND _InitAttributes -»
	«EXPAND _OwnCodeImplInitConstructor("java.initializing.constructor.own.code." + xmiGuid) -»
}
«ENDDEFINE»

«REM»
	generates all attributes as parameters
«ENDREM»
// get all attributes as parameter list
«DEFINE _AllAttributesAsParams FOR MClassifier -»
«FOREACH getAllAttributes() AS attr SEPARATOR ", "»«attr.type.mapName().asTypeName()» _«attr.asAttribute()»«ENDFOREACH -»
«ENDDEFINE»

«REM»
	generates the constructor initialization code
	all properties are initialized with parameters
«ENDREM»
// init all attributes in initializing constructor
«DEFINE _InitAttributes FOR MClassifier -»
«IF !supertype.isEmpty -»
	super(«FOREACH getParentAttributes() AS attr SEPARATOR ", "» _«attr.asAttribute()»«ENDFOREACH»);
«ENDIF -»
«FOREACH getOwnAttributes() AS attr -»
	«attr.asAttribute()» = _«attr.asAttribute()»;
«ENDFOREACH -»
«ENDDEFINE»

«REM»
	generates a region for own code implementations
	within an initializing constructor
«ENDREM»
«DEFINE _OwnCodeImplInitConstructor(String id) FOR MClassifier -»
	«PROTECT CSTART "/* " CEND " */" ID (id)»
	// TODO: put your further initialization code here
	«ENDPROTECT»
«ENDDEFINE»
