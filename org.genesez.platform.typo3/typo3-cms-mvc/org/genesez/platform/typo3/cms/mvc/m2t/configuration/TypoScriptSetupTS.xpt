«REM»
	(c) GeneSEZ Research Group
	All rights reserved.
	
	Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
«ENDREM»

«IMPORT gcore»


«REM»
	Entry point for generating "setup.txt".
	
	@author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
«ENDREM»

«REM» use TYPO3 CMS specific Extbase + Fluid access element scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3::cms::mvc::util::AccessElement»

«REM» use TYPO3 CMS specific Extbase + Fluid file system convention scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3::cms::mvc::util::FileSystemConvention»

«REM» use TYPO3 CMS specific Extbase + Fluid naming convention scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3::cms::mvc::util::NamingConvention»


«REM»
	-- Public Templates (THE FOLLOWING TEMPLATES CAN BE INVOKED FROM OUTSIDE OF THIS FILE) ------------------
«ENDREM»

«REM»
	Processes the generation of "ext_typoscript_setup.txt".
«ENDREM»
«DEFINE Root FOR MModel -»
«FILE filePathTypoScriptSetupTs() -»
«LET extensionPrefix() AS extensionPrefix -»
«EXPAND PluginConfiguration(extensionPrefix) -»
«EXPAND ModuleConfiguration(extensionPrefix) -»
«EXPAND PersistenceClassesMapping -»
«EXPAND OwnCode("setup.txt.own.code." + xmiGuid) -»
«ENDLET -»
«ENDFILE -»
«ENDDEFINE»


«REM»
	-- Private Templates (THE FOLLOWING TEMPLATES SHOULD NOT BE INVOKED FROM OUTSIDE OF THIS FILE) ----------
«ENDREM»

«REM»
«ENDREM»
«DEFINE PluginConfiguration(String extensionPrefix) FOR MModel -»
«IF !allPlugins().isEmpty -»
plugin.«extensionPrefix -» {
	«EXPAND PluginPersistence(extensionPrefix) -»
	«EXPAND PluginView(extensionPrefix) -»
	«EXPAND OwnPluginCode("setup.txt.own.plugin.code." + xmiGuid) -»
}

«ENDIF -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PluginPersistence(String extensionPrefix) FOR MModel -»
	persistence {
		storagePid = {$plugin.«extensionPrefix -».persistence.storagePid}
	}
«ENDDEFINE»


«REM»
	@todo	Support of templateRootPaths
«ENDREM»
«DEFINE PluginView(String extensionPrefix) FOR MModel -»
	view {
		templateRootPath = {$plugin.«extensionPrefix -».view.templateRootPath}
		partialRootPath = {$plugin.«extensionPrefix -».view.partialRootPath}
		layoutRootPath = {$plugin.«extensionPrefix -».view.layoutRootPath}
	}
«ENDDEFINE»


«REM»
	Generates a protected region for own plugin code.
«ENDREM»
«DEFINE OwnPluginCode(String id) FOR MModel -»
	«PROTECT CSTART '// ' CEND '' ID (id)»
	// TODO: put your further plugin code here
	«ENDPROTECT»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ModuleConfiguration(String extensionPrefix) FOR MModel -»
«IF !allModules().isEmpty -»
module.«extensionPrefix -» {
	«EXPAND ModulePersistence(extensionPrefix) -»
	«EXPAND ModuleView(extensionPrefix) -»
	«EXPAND OwnModuleCode("setup.txt.own.module.code." + xmiGuid) -»
}

«ENDIF -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ModulePersistence(String extensionPrefix) FOR MModel -»
	persistence {
		storagePid = {$module.«extensionPrefix -».persistence.storagePid}
	}
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ModuleView(String extensionPrefix) FOR MModel -»
	view {
		templateRootPath = {$module.«extensionPrefix -».view.templateRootPath}
		partialRootPath = {$module.«extensionPrefix -».view.partialRootPath}
		layoutRootPath = {$module.«extensionPrefix -».view.layoutRootPath}
	}
«ENDDEFINE»


«REM»
	Generates a protected region for own module code.
«ENDREM»
«DEFINE OwnModuleCode(String id) FOR MModel -»
	«PROTECT CSTART '// ' CEND '' ID (id) »
	// TODO: put your further module code here
	«ENDPROTECT»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceClassesMapping FOR MModel -»
«IF !allPersistenceClassMappings().isEmpty -»
config.tx_extbase {
	persistence {
		classes {
			«EXPAND PersistenceClassMapping FOREACH allPersistenceClassMappings().sortBy( e | e.asGeneralName() ) -»
		}
	}
}

«ENDIF -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceClassMapping FOR MClass -»
			«asGeneralName() -» {
				mapping {
					«EXPAND PersistenceClassMappingTableName -»
					«EXPAND PersistenceClassMappingRecordType -»
					«EXPAND PersistenceColumnsMapping -»
				}
				«EXPAND PersistenceSubclasses -»
			}
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceClassMapping FOR MType -»
			«asGeneralName() -» {
				«EXPAND PersistenceSubclasses -»
			}
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceClassMappingTableName FOR MClass -»
					tableName = «asPersistenceName()»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceClassMappingRecordType FOR MClass -»
					recordType = «asGeneralName()»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceColumnsMapping FOR MClass -»
«IF !owningPersistencePropertyMappings().isEmpty -»
					columns {
						«EXPAND PersistenceColumnMapping FOREACH owningPersistencePropertyMappings().sortBy( p | p.asGeneralName() ) -»
					}
«ENDIF -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceColumnMapping FOR MProperty -»
						«asPersistenceName() -».mapOnProperty = «asGeneralName()»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceSubclasses FOR MType -»
«IF !owningSingleTableInheritanceSpecializations().isEmpty -»
				subclasses {
					«EXPAND PersistenceSubclass FOREACH owningSingleTableInheritanceSpecializations().sortBy( c | c.asGeneralName() ) -»						
				}
«ENDIF -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE PersistenceSubclass FOR MClass -»
					«asGeneralName() -» = «asGeneralName()»
«ENDDEFINE»


«REM»
	Generates a protected region for own code.
«ENDREM»
«DEFINE OwnCode(String id) FOR MModel -»
«PROTECT CSTART '// ' CEND '' ID (id)»
// TODO: put your further code here
«ENDPROTECT»
«ENDDEFINE»