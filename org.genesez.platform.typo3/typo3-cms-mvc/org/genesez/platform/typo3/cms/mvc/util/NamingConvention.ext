/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Naming convention scripts for TYPO3 CMS specific Extbase + Fluid.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS naming convention scripts and reexport them
extension org::genesez::platform::typo3::cms::util::NamingConvention reexport;


// use TYPO3 CMS specific Extbase profile scripts
extension org::genesez::platform::typo3::cms::mvc::profile::Typo3CmsExtbaseProfile;


// use TYPO3 CMS specific Extbase + Fluid access element scripts
extension org::genesez::platform::typo3::cms::mvc::util::AccessElement;

// use TYPO3 CMS specific Extbase + Fluid file system convention scripts
extension org::genesez::platform::typo3::cms::mvc::util::FileSystemConvention;


// use GeneSEZ common Persistence profile scripts
extension org::genesez::metamodel::core::util::profile::GenesezPersistenceAccessElement;


// use GeneSEZ common access element scripts
extension org::genesez::metamodel::core::util::AccessElement;

// use GeneSEZ common conversion scripts
extension org::genesez::metamodel::core::util::Conversion;

// use GeneSEZ common navigate element scripts
extension org::genesez::metamodel::core::util::NavigateElement;

// use GeneSEZ common type mapping scripts
extension org::genesez::metamodel::core::util::mapping::TypeMapping;


// -- TYPO3 CMS specific Extbase + Fluid namespace conventions ----------------------------------------------

/**
 * Getter of namespace seperator which is added between namespace sections.
 *
 * @return	The namespace seperator.
 */
String namespaceSeperator() :
	// namespace seperator "\" needs to be escaped by a second backslash 
	'\\';


// -- Extension vendor name + extension package name --

/**
 * Getter of the vendor + package name separated by the namespace seperator, which are added as namespace section.
 * E.g.: If the extension vendor name is "GeneSEZ" and the extension package name is "BlogExample"
 *       then this method returns "GeneSEZ\BlogExample".
 *
 * @return	The vendor + package name in namespace notation.
 */
String namespaceVendorNameAndPackageName() :
	extensionVendorName() + namespaceSeperator() + extensionPackageName();


// -- Extension category name --

/**
 * Getter of the category name of a classifier, which is added as namespace section.
 * E.g.: If the classifier is modeled inside package path "Classes/Domain/Model" 
 *       then this method returns "Domain\Model".
 *
 * @return	The category name in namespace notation.
 */
cached String namespaceCategoryName(MClassifier this) :
	// get the namespace of the classifier inside the model and remove the namespace part 'Classes'
	dirPath() != dirPathClasses() // e.g. Classes == Classes/Domain/Model
		? navPackage().qn( dirPathSeparator() )	// e.g. Classes/Domain/Model 
			.replaceFirst( dirPathClasses() + dirPathSeparator(), "" ) // e.g. Domain/Model
			.replaceAll( dirPathSeparator() , "\\" + namespaceSeperator() ) // e.g. Domain\Model
		: "";


/**
 * Getter of the namespace of a classifier.
 * E.g.: If the extension vendor name is "GeneSEZ", the extension package name is "BlogExample" 
 *       and the classifier is modeled inside package path "Classes/Domain/Model" 
 *       then this method returns "GeneSEZ\BlogExample\Domain\Model".
 * @return	The namespace of a classifier.
 */
cached String namespace(MClassifier this) :
	namespaceCategoryName().length != 0 
		? namespaceVendorNameAndPackageName() + namespaceSeperator() + namespaceCategoryName() // e.g. GeneSEZ\BlogExample\Domain\Model 
		: namespaceVendorNameAndPackageName(); // e.g. GeneSEZ\BlogExample


// -- TYPO3 CMS specific Extbase + Fluid type name conventions ----------------------------------------------

/**
 * Getter of the prefix which is added to the name of a class.
 *
 * @return	The prefix to prepend.
 */
String typeNamePrefix(MClass this) : 
	switch {
		// checks if class is abstract and does not already starts with "Abstract"
		case abstract && !name.startsWith("Abstract") : 
			"Abstract"
		default :
			""
	};


/**
 * Getter of the suffix which is added to the name of a class.
 *
 * @return	The suffix to append.
 */
String typeNameSuffix(MClass this) : 
	switch {
		// checks if class is an TYPO3 CMS specific Extbase controller and does not already ends with "Controller"
		case isController() && !name.endsWith("Controller") :
			"Controller"
		// checks if class is an TYPO3 CMS specific Extbase repository and does not already ends with "Repository"
		case isRepository() && !name.endsWith("Repository") :
			"Repository"
		// checks if class is an TYPO3 CMS specific Extbase validator and does not already ends with "Validator"
		case isValidator() && !name.endsWith("Validator") :
			"Validator"
		// checks if class is an TYPO3 CMS specific Fluid viewhelper and does not already ends with "ViewHelper"
		case isViewHelper() && !name.endsWith("ViewHelper") :
			"ViewHelper"
		default :
			""
	};


/**
 * Getter of the prefix which is added to the name of an interface.
 *
 * @return	The prefix to prepend.
 */
String typeNamePrefix(MInterface this) :
	"";


/**
 * Getter of the suffix which is added to the name of an interface.
 *
 * @return	The suffix to append.
 */
String typeNameSuffix(MInterface this) : 
	switch {
		// checks if interface does not already ends with "Interface" 
		case !name.endsWith("Interface") : 
			"Interface"
		default : 
			""
	};


/**
 * Getter of the prefix which is added to the name of an enumeration.
 *
 * @return	The prefix to prepend.
 */
String typeNamePrefix(MEnumeration this) :
	"";


/**
 * Getter of the suffix which is added to the name of an enumeration.
 *
 * @return	The suffix to append.
 */
String typeNameSuffix(MEnumeration this) : 
	"";


/**
 * Getter of the prefix which is added to the name of a classifier.
 * 
 * @return	An empty string.
 */
String typeNamePrefix(MClassifier this) : 
	"";


/**
 * Getter of the suffix which is added to the name of an classifier.
 * 
 * @return	An empty string.
 */
String typeNameSuffix(MClassifier this) : 
	"";


// -- "Short General" naming context --

/**
 * Formats the name of a classifier in "Short General" naming context.
 * Example for modeled classes: Class "Blog" would become "Blog".
 * Example for modeled interfaces: Interface "ControllerInterface" would become "ControllerInterface".
 * 
 * @return	The formatted classifier name.
 */
cached String asShortGeneralName(MClassifier this) :
	typeNamePrefix() + name.toFirstUpper() + typeNameSuffix();


/**
 * Formats the name of an external in "Short General" naming context.
 * E.g.: Mapped external "AbstractEntity" would become "AbstractEntity".
 * 
 * @return	The formatted external name.
 */
cached String asShortGeneralName(MExternal this) :
	mapName().split( namespaceSeperator() ).last();


/**
 * Formats the name of a type in "Short General" naming context.
 *
 * @return	The formatted type name.
 * @todo	Log error
 */
cached String asShortGeneralName(MType this) :
	mapName();



// -- "General" naming context --

/**
 * Formats the name of a classifier in "General" naming context.
 * E.g.: If the extension vendor name is "GeneSEZ", the extension package name is "BlogExample" 
 *       and the domain object class "Blog" is modeled inside package path "Classes/Domain/Model" 
 *       then this method returns "\GeneSEZ\BlogExample\Domain\Model\Blog".
 * 
 * @return	The formatted classifier name.
 */
cached String asGeneralName(MClassifier this) :
	namespaceSeperator() + namespace() + namespaceSeperator() + asShortGeneralName();	


/**
 * Formats the name of an external in "General" naming context.
 * E.g.: Mapped external "AbstractEntity" would become "\TYPO3\CMS\Extbase\DomainObject\AbstractEntity".
 * 
 * @return	The formatted external name.
 */
cached String asGeneralName(MExternal this) :
	mapName();


/**
 * Formats the name of a type in "General" naming context.
 *
 * @return	The formatted type name.
 * @todo	Log error
 */
cached String asGeneralName(MType this) :
	mapName();


// -- "Configuration" naming context --

/**
 * Formats the name of a classifier in "Configuration" naming context.
 * E.g.: If the extension key is "blog_example", the corresponding extension package name is "BlogExample"
 *       and the domain object class "Blog" is modeled inside package path "Classes/Domain/Model" 
 *       then this method returns "tx_blogexample_domain_model_blog".
 * 
 * @return	The formatted classifier name.
 */
cached String asConfigurationName(MClassifier this) :
	namespaceCategoryName().length != 0
		? extensionPrefix() + "_" + namespaceCategoryName().replaceAll("\\\\", "").toLowerUnderscore() + "_" + asShortGeneralName().toLowerCase()
		: extensionPrefix() + "_" + asShortGeneralName().toLowerCase();


// -- "Localization" naming context --

/**
 * Formats the name of a classifier in "Localization" naming context.
 * E.g.: If the domain object class "Blog" is modeled inside package path "Classes/Domain/Model" 
 *       then this method returns "domain_model_blog".
 * 
 * @return	The formatted classifier name.
 */
cached String asLocalizationName(MClassifier this) :
	namespaceCategoryName().length != 0
		? namespaceCategoryName().replaceAll("\\\\", "").toLowerUnderscore() + "_" + asShortGeneralName().toLowerCase()
		: asShortGeneralName().toLowerCase();


// -- "LocalizationCsh" naming context --

/**
 * Formats the name of a classifier in "LocalizationCsh" naming context.
 * E.g.: If the extension key is "blog_example", the corresponding extension package name is "BlogExample"
 *       and the domain object class "Blog" is modeled inside package path "Classes/Domain/Model" 
 *       then this method returns "tx_blogexample_domain_model_blog".
 * 
 * @return	The formatted classifier name.
 * @see		asConfigurationName(MClassifier this)
 */
//cached String asLocalizationCshName(MClassifier this) :
//	"";


// -- "Persistence" naming context --

/**
 * Formats the name of a classifier in "Persistence" naming context.
 * 
 * @return	The formatted class name.
 */
cached String asPersistenceName(MClass this) :
	isSingleTableInheritance()
		? generalization.first().asPersistenceName()
		: (	isTableMapping()
				? emGetTableMappingTableName()
				: asConfigurationName()	
		);


/**
 * Formats the name of an external in "Persistence" naming context.
 * E.g.: Mapped external "FrontendUser" would become "fe_users".
 * 
 * @return	The formatted external name.
 */
cached String asPersistenceName(MExternal this) :
	mapName("SqlTableName");


/**
 * Formats the name of a type in "Persistence" naming context.
 *
 * @return	The formatted type name.
 * @todo	Log error
 */
cached String asPersistenceName(MType this) :
	mapName();


// -- TYPO3 CMS specific Extbase + Fluid property name conventions ------------------------------------------

// -- "General" naming context --

/**
 * Formats the name of an attribute in "General" naming context.
 * E.g.: Attribute "title" would become "title".
 * 
 * @return	The formatted attribute name.
 
 */
cached String asGeneralName(MAttribute this) :
	final && static && hasDefaultValue()
		? name.toUpperCase()
		: name.toFirstLower();


/**
 * Formats the name of an association role in "General" naming context.
 * E.g.: Association role "blogPosts" would become "blogPosts".
 * 
 * @return	The formatted association role name.
 */
cached String asGeneralName(MAssociationRole this) :
	name.toFirstLower();


/**
 * Formats the name of an property in "General" naming context.
 * 
 * @return	The formatted property name.
 * @todo	Log error
 */
cached String asGeneralName(MProperty this) :
	name;
	

// -- "Configuration" naming context --

/**
 * Formats the name of an attribute or association role in "Configuration" naming context.
 * E.g.: Attribute or accociation role "blogPosts" would become "blog_posts".
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asConfigurationName(MProperty this) :
	name.toLowerUnderscore();


// -- "Localization" naming context --

/**
 * Formats the name of an attribute or association role in "Persistence" naming context.
 * E.g.: If the extension key is "blog_example", the corresponding extension package name is "BlogExample",
 *       the domain object class "Blog" is modeled inside package path "Classes/Domain/Model" 
 *       and the name of the attribute or association role is "blogPosts" 
 *       then this method returns "tx_blogexample_domain_model_blog.blog_posts".
 * 
 * @return	The formatted attribute or association role name.
 * @see		asLocalizationName(MClassifier this)
 * @see		asConfigurationName(MProperty this)
 */
cached String asLocalizationName(MProperty this) :
	classifier.asLocalizationName() + "." + asConfigurationName();
	

// -- "LocalizationCsh" naming context --

/**
 * Formats the name of an attribute or association role in "LocalizationCsh" naming context.
 * E.g.: Attribute or accociation role "blogPosts" would become "blog_posts".
 * 
 * @return	The formatted attribute or association role name.
 * @see		asConfigurationName(MProperty this)
 */
cached String asLocalizationCshName(MProperty this) :
	asConfigurationName();


// -- "Persistence" naming context --

/**
 * Formats the name of an attribute or association role in "Persistence" naming context.
 * E.g.: Attribute or accociation role "blogPosts" would become "blog_posts".
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asPersistenceName(MProperty this) :
	emHasColumnMappingStereotype()
		? emGetColumnMappingColumnName()
		: asConfigurationName();


// -- "IntermediateTable" naming context --

/**
 * Formats the name of an attribute in "IntermediateTable" naming context.
 * E.g.: If the extension key is "blog_example", the corresponding extension package name is "BlogExample"
 *       and the domain object class "Post" has an attribute "tags" with a multiplicity of "0..*" 
 *       and a reference type to the domain object class "Tag"
 *       then this method returns "tx_blogexample_post_tag_tags_mm".
 *
 * @return	The formatted attribute name.
 */
String asIntermediateTableName(MAttribute this, MClass class) :
	// tx_blogexample_
	extensionPrefix() + "_"
		// post_
		+ class.asShortGeneralName().toLowerCase() + "_"
			// tag_
			+ type.asShortGeneralName().toLowerCase() + "_"
				// tags
	 			+ asPersistenceName()
					// _mm  
					+ "_mm";


/**
 * Formats the name of an association role in "IntermediateTable" naming context.
 * E.g.: If the extension key is "blog_example", the corresponding extension package name is "BlogExample"
 *       and the domain object class "Post" has an association role "tags" with a multiplicity of "0..*",
 *       an unidirectional direction and a reference type to the domain object class "Tag"
 *       then this method returns "tx_blogexample_post_tag_tags_mm".
 *
 * @return	The formatted association role name.
 */
String asIntermediateTableName(MAssociationRole this, MClass class) :
	// tx_blogexample_
	extensionPrefix() + "_"
	+	( !hasOpposite()
			?	(	// post_
					class.asShortGeneralName().toLowerCase() + "_"
						// tag_
						+ type.asShortGeneralName().toLowerCase() + "_"
							// tags 
							+ asPersistenceName()
				)
			: 	(	// compare the class name and the type name
					class.asShortGeneralName().compareTo( type.asShortGeneralName() ) < 0 || ( class.asShortGeneralName().compareTo( type.asShortGeneralName() ) == 0 && opposite.asGeneralName().compareTo( asGeneralName() ) < 0 )
						?	(	// post
								class.asShortGeneralName().toLowerCase() + "_"
									// posts
									+ opposite.asPersistenceName() + "_"
										// tag
										+ type.asShortGeneralName().toLowerCase() + "_"
											// tags 
											+ asPersistenceName()
							)
						: 	(	// comment
								type.asShortGeneralName().toLowerCase() + "_"
									// comments
									+ asPersistenceName() + "_"
										// post
										+ class.asShortGeneralName().toLowerCase() + "_"
											// post
											+ opposite.asPersistenceName()
							)
				)
		)
		// _mm  
		+ "_mm";


/**
 * Formats the name of an property in "IntermediateTable" naming context.
 * 
 * @return	The formatted association role name.
 * @todo	Log error
 */
String asIntermediateTableName(MProperty this, MClass class) :
	"";


// -- TYPO3 CMS specific Extbase + Fluid accessor conventions for attributes --------------------------------

// -- Get accessor methods for attributes --

/**
 * Getter of the prefix which is added to the name of a getter for an attribute.
 *
 * @return	the prefix to prepend
 */
String getAccessorPrefix(MAttribute this) : 
	"get";


/**
 * Formats an attribute name as a getter method.
 *
 * @return	The formatted name of the getter method.
 */
cached String asGetAccessorName(MAttribute this) : 
	getAccessorPrefix() + name.toFirstUpper();


// -- Set accessor methods for attributes --

/**
 * Getter of the prefix which is added to the name of a setter for an attribute.
 *
 * @return	the prefix to prepend
 */
String setAccessorPrefix(MAttribute this) :
	"set";


/**
 * Formats an attribute name as a setter method.
 * 
 * @return	the formatted name of the setter method
 */
cached String asSetAccessorName(MAttribute this) : 
	setAccessorPrefix() + name.toFirstUpper();


// -- Add accessor methods for attributes --

/**
 * Getter of the prefix which is added to the name of an inserIn for an attribute.
 *
 * @return	the prefix to prepend
 */
String addAccessorPrefix(MAttribute this) : 
	"add";


/**
 * Formats an attribute name as a 'insert in' method.
 * 
 * @return	The formatted name of the 'insert in' method.
 */
cached String asAddAccessorName(MAttribute this) : 
	addAccessorPrefix() + name.toFirstUpper();


// -- Remove accessor methods for Attributes --

/**
 * Getter of the prefix which is added to the name of a removeFrom for an attribute.
 *
 * @return	the prefix to prepend
 */
String removeAccessorPrefix(MAttribute this) : 
	"remove";


/**
 * Formats an attribute name as a 'remove from' method.
 * 
 * @return	The formatted name of the 'remove from' method.
 */
cached String asRemoveAccessorName(MAttribute this) : 
	removeAccessorPrefix() + name.toFirstUpper();


// -- TYPO3 CMS specific TYPO3 Extbase + TYPO3 Fluid accessor conventions for association roles -------------


// -- Get accessor methods for association roles --

/**
 * Getter of the prefix which is added to the name of a getter for an association role.
 *
 * @return	the prefix to prepend
 */
String getAccessorPrefix(MAssociationRole this) : 
	"get";


/**
 * Formats an association role name as a getter method.
 *
 * @return	The formatted name of the getter method.
 */
cached String asGetAccessorName(MAssociationRole this) : 
	getAccessorPrefix() + name.toFirstUpper();


// -- Set accessor methods for association roles --

/**
 * Getter of the prefix which is added to the name of a setter for an association role.
 *
 * @return	the prefix to prepend
 */
String setAccessorPrefix(MAssociationRole this) : 
	"set";


/**
 * Formats an association role name as a setter method.
 * 
 * @return	The formatted name of the setter method.
 */
cached String asSetAccessorName(MAssociationRole this) : 
	setAccessorPrefix() + name.toFirstUpper();


// -- Add accessor methods for association roles --

/**
 * Getter of the prefix which is added to the name of an inserIn for an association role.
 *
 * @return	the prefix to prepend
 */
String addAccessorPrefix(MAssociationRole this) : 
	"add";


/**
 * Formats an association role name as a 'insert in' method.
 * 
 * @return	The formatted name of the 'insert in' method.
 */
cached String asAddAccessorName(MAssociationRole this) : 
	addAccessorPrefix() + name.toFirstUpper();


// -- Remove accessor methods for association roles --

/**
 * Getter of the prefix which is added to the name of a removeFrom for an association role.
 *
 * @return	the prefix to prepend
 */
String removeAccessorPrefix(MAssociationRole this) : 
	"remove";


/**
 * Formats an association role name as a 'remove from' method.
 * 
 * @return	The formatted name of the 'remove from' method.
 */
cached String asRemoveAccessorName(MAssociationRole this) : 
	removeAccessorPrefix() + name.toFirstUpper();


// -- TYPO3 CMS specific Extbase + Fluid enumeration literal name conventions -------------------------------

// -- "General" naming context --

/**
 * Formats the name of an enumeration literal in "General" naming context.
 * E.g.: Enumeration literal "PI" would become "PI".
 * 
 * @return	The formatted enumeration literal name.
 
 */
cached String asGeneralName(MLiteral this) :
	name.toUpperCase();


// -- TYPO3 CMS specific Extbase + Fluid operation name conventions -----------------------------------------

/**
 * Getter of the suffix which is added to the name of an operation.
 *
 * @return	the suffix to append
 */
String operationNameSuffix(MOperation this) : 
	switch {
		// checks if operation is an TYPO3 MVC Controller Action and doesn't already ends with "Action"
		case isControllerAction() && !name.endsWith("Action") :
			"Action"
		// checks if operation is an TYPO3 MVC Controller Command and doesn't already ends with "Command"
		case isControllerCommand() && !name.endsWith("Command") :
			"Command"
		default : 
			""
	};


// -- "General" naming context --

/**
 * Formats the name of an operation in "General" naming context.
 * 
 * @return	The formatted operation name.
 */
cached String asGeneralName(MOperation this) :
	name.toFirstLower() + operationNameSuffix();


// -- TYPO3 CMS specific Extbase + Fluid parameter name conventions -----------------------------------------

// -- "General" naming context --

/**
 * Formats the name of a parameter in "General" naming context.
 * 
 * @return	The formatted parameter name.
 */
cached String asGeneralName(MParameter this) : 
	name.toFirstLower();
	

// -- TYPO3 CMS specific Extbase + Fluid element name conventions -----------------------------------------

// -- "General" naming context --

/**
 * Formats the name of an element in "General" naming context.
 * 
 * @return	The formatted element name.
 * @todo	Log error
 */
cached String asGeneralName(MElement this) :
	name;
	

// -- "Configuration" naming context --

/**
 * Formats the name of an element in "Configuration" naming context.
 * 
 * @return	The formatted element name.
 * @todo	Log error
 */
cached String asConfigurationName(MElement this) :
	name;


// -- TYPO3 CMS specific Extbase validator name conventions -------------------------------------------------

/**
 * Format assigned stereotype as validator name.
 *
 * @return	The formatted validator name.
 */
String asAssignedValidatorName(MStereotype this) :
	// first check if the name of the stereotype is equals to a validator class
	model.allValidators().exists( v | v.name == name )
		? model.allValidators().selectFirst( v | v.name == name ).asGeneralName()
		: createExternalTypeOfValidatorStereotype().asGeneralName();


private create MExternal createExternalTypeOfValidatorStereotype(MStereotype validator) :
	setName(validator.name) ->
	this;


// -- TYPO3 CMS specific Extbase controller conventions -----------------------------------------------------

/**
 * This method convert assigned controller actions of a TYPO3 CMS plugin or module.
 *
 * @param 	operations	The list of operations (controller actions).
 * @return	The list of valid controller actions.
 */
List[String] asExtbaseControllerActionPairs(List[MOperation] operations) :
	JAVA org.genesez.platform.typo3.cms.mvc.convention.Conversion.asControllerActionPairs(java.util.List);


// -- TYPO3 CMS specific Extbase plugin conventions ---------------------------------------------------------

String asPluginFlexformName(MInterface this) :
	"flexform_" + name.toLowerCase();
	

/**
 * Formats a string value into a TYPO3 CMS specific Extbase plugin type value.
 *
 * @param	pluginType	The plugin type to format.
 * @return	The TYPO3 CMS specific Extbase plugin type.
 */
String asExtbasePluginType(String pluginType) :
	switch (pluginType) {
		case prExtbasePluginTypeExtbaseContentElement() :
			"\\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::PLUGIN_TYPE_CONTENT_ELEMENT"
		default :
			"\\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::PLUGIN_TYPE_PLUGIN"
	};


// -- TYPO3 CMS specific Extbase persistance conventions ----------------------------------------------------

/**
 * Formats an external in "SqlColumnType" context.
 * E.g.: Mapped external "int" would become "int(11) DEFAULT '0' NOT NULL".
 * 
 * @return	The formatted external name.
 */
cached String asSqlColumnType(MExternal this) :
	mapName("SqlColumnType");


/**
 * Formats a type in "SqlColumnType" context.
 *
 * @return	The formatted type name.
 * @todo	Log error
 */
cached String asSqlColumnType(MType this) :
	mapName();


/**
 * Formats an external in "GuiType" context.
 * E.g.: Mapped external "int" would become "Integer".
 * 
 * @return	The formatted external name.
 */
cached String asGuiType(MExternal this) :
	mapName("GuiType");


/**
 * Formats a type in "GuiType" context.
 *
 * @return	The formatted type name.
 * @todo	Log error
 */
cached String asGuiType(MType this) :
	mapName();