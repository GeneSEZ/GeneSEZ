/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Naming conventions for TYPO3 CMS specific TYPO3 Extbase + TYPO3 Fluid.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS specific TYPO3 Extbase profile scripts
extension org::genesez::platform::typo3::cms::mvc::profile::TYPO3CMSExtbaseAccessElement;

// use TYPO3 CMS specific TYPO3 Fluid profile scripts
extension org::genesez::platform::typo3::cms::mvc::profile::TYPO3CMSFluidAccessElement;



// use GeneSEZ common type mapping scripts
extension org::genesez::metamodel::core::util::mapping::TypeMapping;

// use TYPO3 MVC convention scripts
extension org::genesez::platform::typo3cms::mvc::convention::Convention;

// use TYPO3 MVC access helper scripts which overrides
// general access helper scripts if script name is equals
extension org::genesez::platform::typo3cms::mvc::util::AccessElement;
extension org::genesez::metamodel::core::util::AccessElement;

extension org::genesez::util::Conversion;




/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC extension name and key conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of extension name seperator which is added between extension name 
 * sections.
 *
 * @return	the extension name seperator
 */
String extensionNameSeperator() : 
	"_";


/**
 * Getter of the prefix which is added to each extension.
 *
 * @return	the prefix to prepend
 */
String extensionPrefix() : 
	"Tx";


/**
 * Getter of the extension key. 
 * This script is only a wrapper for "globalVarExtensionKey()" 
 * defined in "GlobalVar.ext".
 * For instance: The extension key is "blog_example" this method returns the
 * extension key which is "blog_example".
 *
 * @return	the extension key
 */
String extensionKey() :
	globalVarExtensionKey();


/**
 * Getter of full qualified extension key.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension key which is "tx_blog_example". 
 *
 * @return	the full qualified extension key
 */
String fullQualifiedExtensionKey() :
	extensionPrefix().toLowerCase() + extensionNameSeperator() + extensionKey();


/**
 * Getter of the extension name.
 * The extension name is generated by the defined extension name.
 * The extension name is equals the extension key without underscores and is 
 * written in upper camel case.
 * For instance: The extension key is "blog_example" this method returns the
 * extension name which is "BlogExample". 
 *
 * @return	the extension name
 */
String extensionName() :
	extensionName( extensionKey() );
	

/**
 * Getter of the extension name in lower case notation.
 * For instance: The extension key is "blog_example" this method returns the
 * extension name in lower case notation which is "blogexample". 
 *
 * @return	the extension name
 */
String extensionNameToLowerCase() :
	extensionName().toLowerCase();


/**
 * Getter of the extension name.
 * This method calls the Java method to remove the underscores and transform
 * the extension key in upper camel case.
 *
 * @param	extensionKey	the extension key
 * @return	the extension name
 */
private cached String extensionName(String extensionKey) :
		JAVA org.genesez.platform.typo3cms.mvc.convention.Convention.extensionName(java.lang.String);


/**
 * Getter of full qualified extension name.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension name which is "Tx_BlogExample". 
 *
 * @return	the full qualified extension name
 */
String fullQualifiedExtensionName() :
	extensionPrefix() + extensionNameSeperator() + extensionName();


/**
 * Getter of full qualified extension name in lower case notation.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension name in lower case notation which is "tx_blogexample". 
 *
 * @return	the full qualified extension name in short notation
 */
String fullQualifiedExtensionNameToLowerCase() :
	fullQualifiedExtensionName().toLowerCase();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name base conventions (first two sections)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of name seperator which is added between classifier name sections.
 *
 * @return	the classifier name seperator
 */
String classifierNameSeperator() : 
	"_";


/**
 * Getter of name base which is prepend to the classifier name.
 * This method is only a wrapper for "fullQualifiedExtensionName()" 
 * defined inside this file. Actually it is only for semantic usage.
 *
 * @return	the classifier name base to prepend
 */
String classifierNameBase() :
	fullQualifiedExtensionName();

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name path conventions (middle sections)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of name path which is prepend to the name of a classifier.
 *
 * @return	the classifier name path to prepend
 */
String classifierNamePath(MClassifier this) :
	// The path depends on the TYPO3 MVC type.
	switch {
		// checks if the classifier is an TYPO3 MVC Extbase controller package element
		case isControllerPackageElement() :
			convertToClassifierNamePath( classesControllerPath() )
		// checks if the classifier is an TYPO3 MVC Extbase factory package element
		case isFactoryPackageElement() :
			convertToClassifierNamePath( classesDomainFactoryPath() )
		// checks if the classifier is an TYPO3 MVC Extbase model package element
		case isModelPackageElement() :
			convertToClassifierNamePath( classesDomainModelPath() )
		// checks if the classifier is an TYPO3 MVC Extbase repository package element
		case isRepositoryPackageElement() :
			convertToClassifierNamePath( classesDomainRepositoryPath() )
		// checks if the classifier is an TYPO3 MVC Extbase service package element
		case isServicePackageElement() :
			convertToClassifierNamePath( classesDomainServicePath() )
		// checks if the classifier is an TYPO3 MVC Extbase validator package element
		case isValidatorPackageElement() :
			convertToClassifierNamePath( classesDomainValidatorPath() )
		// checks if the classifier is an TYPO3 Fluid view helper package element
		case isViewHelperPackageElement() :
			convertToClassifierNamePath( classesViewHelpersPath() )
		default :
			convertToClassifierNamePath( classesPath() + fileSeparator() + owningContext.name.toLowerCase().toFirstUpper() )
	};


/**
 * Converts the path name to the classifier name path.
 *
 * @param	pathName	the path of the classifier
 * @return	the name path of the classifier
 */
private String convertToClassifierNamePath(String pathName) :
	pathName.replaceFirst( classesPath() + fileSeparator(), "" ).replaceAll( fileSeparator(), classifierNameSeperator() );


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name conventions (last section)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String abstractClassPrefix() :
	"Abstract";


String interfaceSuffix() :
	"Interface";


String controllerNameSuffix() :
	"Controller";


String repositoryNameSuffix() :
	"Repository";
	

String validatorNameSuffix() :
	"Validator";


String viewHelperNameSuffix() :
	"ViewHelper";


/**
 * Getter of the prefix which is added to the name of a class.
 *
 * @return	the prefix to prepend
 */
String classifierNamePrefix(MClass this) : 
	switch {
		// checks if class is abstract and doesn't already starts with "Abstract" 
		case abstract && !name.startsWith( abstractClassPrefix() ) : 
			abstractClassPrefix()
		default : 
			""
	};


/**
 * Getter of the suffix which is added to the name of a class.
 *
 * @return	the suffix to append
 */
String classifierNameSuffix(MClass this) : 
	switch {
		// checks if class is an TYPO3 MVC controller and doesn't already ends with "Controller"
		case isController() && !name.endsWith( controllerNameSuffix() ) :
			controllerNameSuffix()
		// checks if class is an TYPO3 MVC repository and doesn't already ends with "Repository" 
		case isRepository() && !name.endsWith( repositoryNameSuffix() ) :
			repositoryNameSuffix()
		case isValidator() && !name.endsWith( validatorNameSuffix() ) :
			validatorNameSuffix()
		// checks if class is an TYPO3 Fluid view helper and doesn't already ends with "ViewHelper" 
		case isViewHelper() && !name.endsWith( viewHelperNameSuffix() ) :
			viewHelperNameSuffix()
		default : 
			""
	};


/**
 * Getter of the prefix which is added to the name of an interface.
 *
 * @return	the prefix to prepend
 */
String classifierNamePrefix(MInterface this) : 
	"";


/**
 * Getter of the suffix which is added to the name of an interface.
 *
 * @return	the suffix to append
 */
String classifierNameSuffix(MInterface this) : 
	switch {
		// checks if interface doesn't already starts with "Interface" 
		case !name.endsWith( interfaceSuffix() ) : 
			interfaceSuffix()
		default : 
			""
	};


/**
 * Getter of the prefix which is added to the name of a classifier.
 * Just there for error free templates.
 * 
 * @return	an empty string
 */
String classifierNamePrefix(MClassifier this) : 
	"";


/**
 * Getter of the suffix which is added to the name of an classifier.
 * Just there for error free templates.
 * 
 * @return	an empty string
 */
String classifierNameSuffix(MClassifier this) : 
	"";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC attribute name + accessor conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the prefix which is added to the name of a getter for an attribute.
 *
 * @return	the prefix to prepend
 */
String getterNamePrefix(MAttribute this) : 
	"get";


/**
 * Getter of the prefix which is added to the name of a setter for an attribute.
 *
 * @return	the prefix to prepend
 */
String setterNamePrefix(MAttribute this) :
	"set";


/**
 * Getter of the prefix which is added to the name of an inserIn for an attribute.
 *
 * @return	the prefix to prepend
 */
String insertInNamePrefix(MAttribute this) : 
	"add";


/**
 * Getter of the prefix which is added to the name of a removeFrom for an attribute.
 *
 * @return	the prefix to prepend
 */
String removeFromNamePrefix(MAttribute this) : 
	"remove";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC association role name + accessor conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the prefix which is added to the name of a getter for an association role.
 *
 * @return	the prefix to prepend
 */
String getterNamePrefix(MAssociationRole this) : 
	"get";


/**
 * Getter of the prefix which is added to the name of a setter for an association role.
 *
 * @return	the prefix to prepend
 */
String setterNamePrefix(MAssociationRole this) : 
	"set";


/**
 * Getter of the prefix which is added to the name of an inserIn for an association role.
 *
 * @return	the prefix to prepend
 */
String insertInNamePrefix(MAssociationRole this) : 
	"add";


/**
 * Getter of the prefix which is added to the name of a removeFrom for an association role.
 *
 * @return	the prefix to prepend
 */
String removeFromNamePrefix(MAssociationRole this) : 
	"remove";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC operation name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String controllerActionNameSuffix() :
	"Action";
	
String controllerCommandNameSuffix() :
	"Command";

/**
 * Getter of the suffix which is added to the name of an operation.
 *
 * @return	the suffix to append
 */
String operationNameSuffix(MOperation this) : 
	switch {
		// checks if operation is an TYPO3 MVC Controller Action and doesn't already ends with "Action"
		case isControllerAction() && !name.endsWith( controllerActionNameSuffix() ) :
			controllerActionNameSuffix()
		// checks if operation is an TYPO3 MVC Controller Command and doesn't already ends with "Command"
		case isControllerCommand() && !name.endsWith( controllerCommandNameSuffix() ) :
			controllerCommandNameSuffix()
		default : 
			""
	};





























































































/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC element name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats the element name 
 * in 'Default' TYPO3 MVC naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asDefaultName(MElement this) :
//	name;


/**
 * Formats the element name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asGeneralName(MElement this) :
//	name;
	
/**
 * Formats the type name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted type name.
 */
//cached String asGeneralName(MType this) :
//	"";


/**
 * Formats the element name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asPHPCompliantName(MElement this) :
//	name;


/**
 * Formats the element name 
 * in 'Configuration' TYPO3 MVC naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asConfigurationName(MElement this) :
//	name;


/**
 * Formats the element name 
 * in 'Persistence' TYPO3 MVC naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asPersistenceName(MElement this) :
//	name;


/**
 * Formats the element name 
 * in 'Localization' TYPO3 MVC naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asLocalizationName(MElement this) :
//	name;
	
	
/**
 * Formats the element name 
 * in 'LocalizationCSH' TYPO3 MVC naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asLocalizationCSHName(MElement this) :
//	name;


/**
 * Formats the element name 
 * in 'Object' TYPO3 MVC naming context.
 * 
 * @return	The formatted element name.
 */
//cached String asObjectName(MElement this) :
//	name;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a classifier name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted classifier name.
 */
cached String asGeneralName(MClassifier this) :
	classifierNameBase() + classifierNameSeperator() + classifierNamePath() + classifierNameSeperator() + classifierNamePrefix() + name.toFirstUpper() + classifierNameSuffix();	

/**
 * Formats an external name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted external name.
 */
cached String asGeneralName(MExternal this) :
	mapName();

/**
 * Formats a classifier name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	The formatted classifier name.
 */
cached String asPHPCompliantName(MClassifier this) :
	name.toFirstUpper();


/**
 * Formats a classifier name 
 * in 'Configuration' TYPO3 MVC naming context.
 * 
 * @return	The formatted classifier name.
 */
cached String asConfigurationName(MClassifier this) :
	asGeneralName().toLowerCase();
	

/**
 * Formats an interface name 
 * in 'Configuration' TYPO3 MVC naming context.
 * 
 * @return	The formatted interface name.
 */
cached String asConfigurationName(MInterface this) :
	switch {
		case isPlugin() : 
			asPHPCompliantName()
		case isModule() : 
			fullQualifiedExtensionNameToLowerCase() + extensionNameSeperator() + asPHPCompliantName().toLowerCase()
		default :
			asGeneralName().toLowerCase()
	};

/**
 * Formats the class name 
 * in 'Persistence' TYPO3 MVC naming context.
 * 
 * @return	The formatted class name.
 */
cached String asPersistenceName(MClass this) :
	hasT3ExtbaseInheritanceStereotype() && getT3ExtbaseInheritanceInheritanceType() == prT3ExtbaseInheritanceTypeSingleTable()
		? generalization.first().name( namingContextPersistence(), typeMappingContextSQLTableName() )
		: (	hasT3ExtbaseTableMappingStereotype()
				? getT3ExtbaseTableMappingTableName()
				: asConfigurationName()	);


/**
 * Formats a classifier name 
 * in 'Localization' TYPO3 MVC naming context.
 * 
 * @return	The formatted classifier name.
 */
cached String asLocalizationName(MClassifier this) :
	asConfigurationName();


/**
 * Formats an interface name 
 * in 'Localization' TYPO3 MVC naming context.
 * 
 * @return	The formatted interface name.
 */
cached String asLocalizationName(MInterface this) :
	isPlugin() || isModule()
		? asPHPCompliantName().toLowerCase()
		: asConfigurationName();


/**
 * Formats a classifier name 
 * in 'LocalizationCSH' TYPO3 MVC naming context.
 * 
 * @return	The formatted classifier name.
 */
cached String asLocalizationCSHName(MClassifier this) :
	asConfigurationName();


/**
 * Formats a classifier name 
 * in 'Object' TYPO3 MVC naming context.
 * 
 * @return	The formatted classifier name.
 */
cached String asObjectName(MClassifier this) :
	name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC property name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'General' naming context.
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asGeneralName(MProperty this) :
	name.toFirstLower();
	

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'PHPComplaint' naming context.
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asPHPCompliantName(MProperty this) :
	asGeneralName();


/**
 * Formats an attribute or association role name as a normal attribute
 * in 'Configuration' TYPO3 MVC naming context. 
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asConfigurationName(MProperty this) :
	name.toLowerUnderscore();


/**
 * Formats an attribute or association role name as a normal attribute
 * in 'Persistence' TYPO3 MVC naming context. 
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asPersistenceName(MProperty this) :
	hasT3ExtbaseColumnMappingStereotype()
				? getT3ExtbaseColumnMappingMapOnProperty()
				: asConfigurationName();


/**
 * Formats an attribute or association role name as a normal attribute
 * in 'Localization' TYPO3 MVC naming context. 
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asLocalizationName(MProperty this) :
	classifier.metaType == MInterface && ( ((MInterface)classifier).isPlugin() || ((MInterface)classifier).isModule() )
		? asConfigurationName()
		: classifier.asLocalizationName() + "." + asConfigurationName();
	

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'LocalizationCSH' TYPO3 MVC naming context. 
 * 
 * @return	The formatted attribute or association role name.
 */
cached String asLocalizationCSHName(MProperty this) :
	asConfigurationName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC attribute name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an attribute name as a normal attribute or constant
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted attribute name.
 */
cached String asGeneralName(MAttribute this) :
	final && static && hasDefaultValue()
		? name.toUpperCase()
		: name.toFirstLower();


/**
 * Formats an attribute name as a getter method.
 *
 * @return	The formatted name of the getter method.
 */
cached String asGetterName(MAttribute this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an attribute name as a setter method.
 * 
 * @return	the formatted name of the setter method
 */
cached String asSetterName(MAttribute this) : 
	setterNamePrefix() + name.toFirstUpper();

	
/**
 * Formats an attribute name as a 'insert in' method.
 * 
 * @return	The formatted name of the 'insert in' method.
 */
cached String asInsertInName(MAttribute this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an attribute name as a 'remove from' method.
 * 
 * @return	The formatted name of the 'remove from' method.
 */
cached String asRemoveFromName(MAttribute this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC association role name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an association role name as a normal attribute
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted association role name.
 */
cached String asGeneralName(MAssociationRole this) :
	name.toFirstLower();
	

/**
 * Formats an association role name as a getter method.
 *
 * @return	The formatted name of the getter method.
 */
cached String asGetterName(MAssociationRole this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a setter method.
 * 
 * @return	The formatted name of the setter method.
 */
cached String asSetterName(MAssociationRole this) : 
	setterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a 'insert in' method.
 * 
 * @return	The formatted name of the 'insert in' method.
 */
cached String asInsertInName(MAssociationRole this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an association role name as a 'remove from' method.
 * 
 * @return	The formatted name of the 'remove from' method.
 */
cached String asRemoveFromName(MAssociationRole this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC operation name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an operation name using suffix 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted operation name.
 */
cached String asGeneralName(MOperation this) :
	name.toFirstLower() + operationNameSuffix();


/**
 * Formats an operation name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	The formatted operation name.
 */
cached String asPHPCompliantName(MOperation this) :
	name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC parameter name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a parameter name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	The formatted parameter name.
 */
cached String asGeneralName(MParameter this) : 
	name.toFirstLower();
	

/**
 * Formats a parameter name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	The formatted parameter name.
 */
cached String asPHPCompliantName(MParameter this) : 
	asGeneralName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC controller
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats assigned controller actions of a TYPO3 MVC plugin or module
 * as list of valid controller actions.
 *
 * @param 	operations	The list of operations (controller actions).
 * @return	The list of valid controller actions.
 */
List[String] asControllerActionPairs(List[MOperation] operations) :
	JAVA org.genesez.platform.typo3.cms.mvc.convention.Naming.asControllerActionPairs(java.util.List);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC validators
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Format assigned stereotype as validator name.
 *
 * @return	The formatted validator name.
 */
String asAssignedValidatorName(MStereotype this) :
	// first check is if the stereotype starts with the prefix "T3Extbase" 
	// and ends with the suffix "Validator". So it is a TYPO3 MVC Extbase validator. 
	name.startsWith("T3Extbase") && name.endsWith("Validator")
		? name.replaceFirst("T3Extbase", "").replaceFirst("Validator", "")
		: model.allValidators().selectFirst( v | name == v.name ).name( namingContextGeneral() );


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC plugins and modules
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asPluginFlexformName(MInterface this) :
	extensionNameToLowerCase() + "_" + asPHPCompliantName().toLowerCase();
	

/**
 * Formats a string value into a TYPO3 plugin type value.
 *
 * @param	pluginType	The plugin type to format.
 * @return	The TYPO3 plugin type.
 */
String asPluginType(String pluginType) :
	switch (pluginType) {
		case prT3ExtbasePluginTypeExtbaseContentElement() :
			"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_CONTENT_ELEMENT"
		default :
			"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_PLUGIN"
	};


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC persistence
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/**
 * Returns the intermediate table name for an attribute.
 * This method needs to be called in SQL context.
 * 
 * For instance: The extension key is "blog_example" and we have a
 * class "Post" which has a 1:n attribute called "tags" to the class "Tag".
 * Because this is like a 1:n unidirectional association we need a
 * intermediate table. This method returns "tx_blogexample_post_tag_tags_mm".
 */
String asIntermediateTableName(MAttribute this, MClass class) :
	// tx_blogexample_
	fullQualifiedExtensionNameToLowerCase() + classifierNameSeperator()
		// post_
		+ class.asIntermediateTableName() + classifierNameSeperator()
			// tag_
			+ type.asIntermediateTableName() + classifierNameSeperator()
				// tags
	 			+ name()
					// _mm  
					+ classifierNameSeperator() + "mm";


/**
 * Returns the intermediate table name for a association role.
 * This method needs to be called in SQL context.
 * 
 * For instance: The extension key is "blog_example" and we have a
 * class "Post" which has a 1:n association role called "tags" to the class "Tag".
 * Because this is a 1:n association we need a intermediate table. 
 * This method returns "tx_blogexample_post_tag_tags_mm".
 */
String asIntermediateTableName(MAssociationRole this, MClass class) :
	// tx_blogexample_
	fullQualifiedExtensionNameToLowerCase() + classifierNameSeperator()
	+	( !hasOpposite()
			?	(	// post_
					class.asIntermediateTableName() + classifierNameSeperator()
						// tag_
						+ type.asIntermediateTableName() + classifierNameSeperator()
							// tags 
							+ name()
				)
			: 	(	// compare the class name and the type name
					class.name().compareTo( type.name() ) < 0
						?	(	// post
								class.asIntermediateTableName() + classifierNameSeperator()
									// posts
									+ opposite.name() + classifierNameSeperator()
										// tag
										+ type.asIntermediateTableName() + classifierNameSeperator()
											// tags 
											+ name()
							)
						: 	(	// comment
								type.asIntermediateTableName() + classifierNameSeperator()
									// comments
									+ name() + classifierNameSeperator()
										// post
										+ class.asIntermediateTableName() + classifierNameSeperator()
											// post
											+ opposite.name()
							)
				)
		)
	// _mm  
	+ classifierNameSeperator() + "mm";


String asIntermediateTableName(MProperty this, MClass class) :
	"";


private String asIntermediateTableName(MType this) :
	name().split( classifierNameSeperator() ).last().toLowerCase();
