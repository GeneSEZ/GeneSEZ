/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * File system conventions for TYPO3 CMS specific Extbase + Fluid. 
 *
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS file system convention scripts and reexport them
extension org::genesez::platform::typo3::cms::util::FileSystemConvention reexport;


// use TYPO3 CMS specific Extbase + Fluid naming convention scripts
extension org::genesez::platform::typo3::cms::mvc::util::NamingConvention;


// use GeneSEZ common conversion scripts
extension org::genesez::metamodel::core::util::Conversion;


// -- TYPO3 CMS specific Extbase + Fluid file name + path conventions ---------------------------------------

/**
 * Formats the file name of a classifier as PHP file.
 *
 * @return	The file name of the classifier as PHP file.
 */
String fileNamePhp(MClassifier this) :
	asShortGeneralName() + fileExtensionPhp();


/**
 * Gets the file name of "flexform_<plugin name>.xml".
 *
 * @return	The file name of "flexform_<plugin name>.xml". 
 */
String fileNameFlexFormXml(MInterface this) :
	"flexform_" + name.toLowerCase() + fileExtensionXml();


/**
 * Gets the file path of "flexform_<plugin name>.xml".
 *
 * @return	The file path of "flexform_<plugin name>.xml". 
 */
String filePathFlexFormXml(MInterface this) :
	dirPathConfigurationFlexForms() + dirPathSeparator() + fileNameFlexFormXml();


/**
 * Gets the file name of "<table name of domain object>.php".
 *
 * @return	The file name of "<table name of domain object>.php". 
 */
String fileNameTcaPhp(MClass this) :
	asConfigurationName() + fileExtensionPhp();


/**
 * Gets the file path of "<table name of domain object>.php".
 *
 * @return	The file path of "<table name of domain object>.php". 
 */
String filePathTcaPhp(MClass this) :
	dirPathConfigurationTCA() + dirPathSeparator() + fileNameTcaPhp();


/**
 * Gets the file name of "constants.txt".
 *
 * @return	The file name of "constants.txt". 
 */
String fileNameTypoScriptConstantsTs() :
	"constants" + fileExtensionTs();


/**
 * Gets the file path of "constants.txt".
 *
 * @return	The file path of "constants.txt". 
 */
String filePathTypoScriptConstantsTs() :
	dirPathConfigurationTypoScript() + dirPathSeparator() + fileNameTypoScriptConstantsTs();


/**
 * Gets the file name of "setup.txt".
 *
 * @return	The file name of "setup.txt". 
 */
String fileNameTypoScriptSetupTs() :
	"setup" + fileExtensionTs();


/**
 * Gets the file path of "setup.txt".
 *
 * @return	The file path of "setup.txt". 
 */
String filePathTypoScriptSetupTs() :
	dirPathConfigurationTypoScript() + dirPathSeparator() + fileNameTypoScriptSetupTs();


/**
 * Gets the file name of "locallang.xlf".
 *
 * @return	The file name of "locallang.xlf". 
 */
String fileNameLocallangXlf() :
	"locallang" + fileExtensionXlf();


/**
 * Gets the file path of "locallang.xlf".
 *
 * @return	The file path of "locallang.xlf". 
 */
String filePathLocallangXlf() :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangXlf();


/**
 * Gets the file name of "<iso language code>.locallang.xlf".
 *
 * @return	The file name of "<iso language code>.locallang.xlf". 
 */
String fileNameLocallangXlf(String isoLanguageCode) :
	isoLanguageCode + "." + fileNameLocallangXlf();


/**
 * Gets the file path of "<iso language code>.locallang.xlf".
 *
 * @return	The file path of "<iso language code>.locallang.xlf". 
 */
String filePathLocallangXlf(String isoLanguageCode) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangXlf(isoLanguageCode);


/**
 * Gets the file name of "locallang_tca.xlf".
 *
 * @return	The file name of "locallang_tca.xlf". 
 */
String fileNameLocallangTcaXlf() :
	"locallang_tca" + fileExtensionXlf();


/**
 * Gets the file path of "locallang_tca.xlf".
 *
 * @return	The file path of "locallang_tca.xlf". 
 */
String filePathLocallangTcaXlf() :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangTcaXlf();


/**
 * Gets the file name of "<iso language code>.locallang_tca.xlf".
 *
 * @return	The file name of "<iso language code>.locallang_tca.xlf". 
 */
String fileNameLocallangTcaXlf(String isoLanguageCode) :
	isoLanguageCode + "." + fileNameLocallangTcaXlf();


/**
 * Gets the file path of "<iso language code>.locallang_tca.xlf".
 *
 * @return	The file path of "<iso language code>.locallang_tca.xlf". 
 */
String filePathLocallangTcaXlf(String isoLanguageCode) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangTcaXlf(isoLanguageCode);


/**
 * Gets the file name of "locallang_csh_<table name of domain object>.xlf".
 *
 * @return	The file name of "locallang_csh_<table name of domain object>.xlf". 
 */
String fileNameLocallangCshXlf(MClass this) :
	"locallang_csh_" + asConfigurationName() + fileExtensionXlf();


/**
 * Gets the file path of "locallang_csh_<table name of domain object>.xlf".
 *
 * @return	The file path of "locallang_csh_<table name of domain object>.xlf". 
 */
String filePathLocallangCshXlf(MClass this) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangCshXlf();


/**
 * Gets the file name of "<iso language code>.locallang_csh_<table name of domain object>.xlf".
 *
 * @return	The file name of "<iso language code>.locallang_csh_<table name of domain object>.xlf". 
 */
String fileNameLocallangCshXlf(MClass this, String isoLanguageCode) :
	isoLanguageCode + "." + fileNameLocallangCshXlf();


/**
 * Gets the file path of "<iso language code>.locallang_csh_<table name of domain object>.xlf".
 *
 * @return	The file path of "<iso language code>.locallang_csh_<table name of domain object>.xlf". 
 */
String filePathLocallangCshXlf(MClass this, String isoLanguageCode) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangCshXlf(isoLanguageCode);


/**
 * Gets the file name of "locallang_plugin_<plugin name>.xlf".
 *
 * @return	The file name of "locallang_plugin_<plugin name>.xlf". 
 */
String fileNameLocallangPluginXlf(MInterface this) :
	"locallang_plugin_" + name.toLowerCase() + fileExtensionXlf();


/**
 * Gets the file path of "locallang_plugin_<plugin name>.xlf".
 *
 * @return	The file path of "locallang_plugin_<plugin name>.xlf". 
 */
String filePathLocallangPluginXlf(MInterface this) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangPluginXlf();


/**
 * Gets the file name of "<iso language code>.locallang_plugin_<plugin name>.xlf".
 *
 * @return	The file name of "<iso language code>.locallang_plugin_<plugin name>.xlf". 
 */
String fileNameLocallangPluginXlf(MInterface this, String isoLanguageCode) :
	isoLanguageCode + "." + fileNameLocallangPluginXlf();


/**
 * Gets the file path of "<iso language code>.locallang_plugin_<plugin name>.xlf".
 *
 * @return	The file path of "<iso language code>.locallang_plugin_<plugin name>.xlf". 
 */
String filePathLocallangPluginXlf(MInterface this, String isoLanguageCode) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangPluginXlf(isoLanguageCode);


/**
 * Gets the file name of "locallang_module_<module name>.xlf".
 *
 * @return	The file name of "locallang_module_<module name>.xlf". 
 */
String fileNameLocallangModuleXlf(MInterface this) :
	"locallang_module_" + name.toLowerCase() + fileExtensionXlf();


/**
 * Gets the file path of "locallang_module_<module name>.xlf".
 *
 * @return	The file path of "locallang_module_<module name>.xlf". 
 */
String filePathLocallangModuleXlf(MInterface this) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangModuleXlf();


/**
 * Gets the file name of "<iso language code>.locallang_module_<module name>.xlf".
 *
 * @return	The file name of "<iso language code>.locallang_module_<module name>.xlf". 
 */
String fileNameLocallangModuleXlf(MInterface this, String isoLanguageCode) :
	isoLanguageCode + "." + fileNameLocallangModuleXlf();


/**
 * Gets the file path of "<iso language code>.locallang_module_<module name>.xlf".
 *
 * @return	The file path of "<iso language code>.locallang_module_<module name>.xlf". 
 */
String filePathLocallangModuleXlf(MInterface this, String isoLanguageCode) :
	dirPathResourcesPrivateLanguage() + dirPathSeparator() + fileNameLocallangModuleXlf(isoLanguageCode);


// -- TYPO3 CMS specific TYPO3 Extbase + TYPO3 Fluid directory path conventions -----------------------------

// -- Classes --

String dirPathClasses() :
	"Classes";


String dirPathClassesController() :
	"Classes/Controller";


String dirPathClassesDomain() :
	"Classes/Domain";


String dirPathClassesDomainFactory() :
	"Classes/Domain/Factory";


String dirPathClassesDomainModel() :
	"Classes/Domain/Model";

	
String dirPathClassesDomainRepository() :
	"Classes/Domain/Repository";


String dirPathClassesDomainService() :
	"Classes/Domain/Service";


String dirPathClassesValidation() :
	"Classes/Validation";

	
String dirPathClassesValidationValidator() :
	"Classes/Validation/Validator";


String dirPathClassesViewHelpers() :
	"Classes/ViewHelpers";


// -- Configuration --

String dirPathConfiguration() :
	"Configuration";


String dirPathConfigurationFlexForms() :
	"Configuration/FlexForms";


String dirPathConfigurationTCA() :
	"Configuration/TCA";


String dirPathConfigurationTypoScript() :
	"Configuration/TypoScript";


// -- Documentation --

String dirPathDocumentation() :
	"Documentation";


String dirPathDocumentationManual() :
	"Documentation/Manual";
	

// -- Resources --

String dirPathResources() :
	"Resources";
	

String dirPathResourcesPrivate() :
	"Resources/Private";


String dirPathResourcesPrivateBackend() :
	"Resources/Private/Backend";


String dirPathResourcesPrivateBackendLayouts() :
	"Resources/Private/Backend/Layouts";


String dirPathResourcesPrivateBackendPartials() :
	"Resources/Private/Backend/Partials";


String dirPathResourcesPrivateBackendTemplates() :
	"Resources/Private/Backend/Templates";


String dirPathResourcesPrivateLanguage() :
	"Resources/Private/Language";


String dirPathResourcesPrivateLayouts() :
	"Resources/Private/Layouts";


String dirPathResourcesPrivatePartials() :
	"Resources/Private/Partials";


String dirPathResourcesPrivateTemplates() :
	"Resources/Private/Templates";


String dirPathResourcesPublic() :
	"Resources/Public";


String dirPathResourcesPublicBackendIcons() :
	"Resources/Public/Backend/Icons";


String dirPathResourcesPublicIcons() :
	"Resources/Public/Icons";