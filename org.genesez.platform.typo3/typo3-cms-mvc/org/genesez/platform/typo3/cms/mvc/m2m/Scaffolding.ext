/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Scaffolding before generation of source code begins.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS specific Extbase profile scripts
extension org::genesez::platform::typo3::cms::mvc::profile::Typo3CmsExtbaseProfile;

// use GeneSEZ common Domain Driven Design profile scripts
extension org::genesez::metamodel::core::util::profile::GenesezDomainDrivenDesignAccessElement;


// use TYPO3 CMS specific Extbase + Fluid access element scripts
extension org::genesez::platform::typo3::cms::mvc::util::AccessElement;


// use GeneSEZ common create element scripts
extension org::genesez::metamodel::core::util::CreateElement;

// use GeneSEZ common conversion scripts
extension org::genesez::metamodel::core::util::Conversion;

// use GeneSEZ common navigate element scripts
extension org::genesez::metamodel::core::util::NavigateElement;

// use GeneSEZ common logging scripts
extension org::genesez::util::logging::Logging;


// -- Interation over Model and Package Structures ----------------------------------------------------------

MModel modelScaffolding(MModel this) :
	useLogger("org.genesez.platform.typo3") ->
	packageScaffolding();


MPackage packageScaffolding(MPackage this) :
	// perform model scaffolding for all classes
	classifier.typeSelect(MClass).classScaffolding() ->
	// perform model scaffolding for all nested packages
	nestedPackage.packageScaffolding() ->
	this;


// -- Selection of scaffolding Classes ----------------------------------------------------------------------

MClass classScaffolding(MClass this) :
	switch {
		case isEntity() :
			entityScaffolding()
		default :
			Void
	} ->
	this;


// -- Scaffolding of Entities -------------------------------------------------------------------------------

MClass entityScaffolding(MClass this) :
	// perform scaffolding for all aggregate roots
	emHasAggregateRootStereotype()
		? (	logTrace( "GeneSEZ: Scaffolding for aggregate root! Model element: " + fqmn() ) ->
			(	let extbaseDomainObjectStereotype = navModel().ensureStereotypeExistence( prExtbaseDomainObject(), prExtbaseDomainObject() ) :
					ensureStereotypeAssignment(extbaseDomainObjectStereotype)
						.ensureSingleTaggedValueExistence( extbaseDomainObjectStereotype.ensureTagExistence( prExtbaseDomainObjectCreateController(), "Boolean" ), "true" ).owningElement
						.ensureSingleTaggedValueExistence( extbaseDomainObjectStereotype.ensureTagExistence( prExtbaseDomainObjectCreateRepository(), "Boolean" ), "true" ).owningElement
						.ensureSingleTaggedValueExistence( extbaseDomainObjectStereotype.ensureTagExistence( prExtbaseDomainObjectCreatePlugin(), "Boolean" ), "true" )
			)
		) : Void ->
	this;