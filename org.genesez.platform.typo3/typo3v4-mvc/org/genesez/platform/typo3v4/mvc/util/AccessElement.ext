/**
 * Simplifies access to genesez models + makes working with the genesez metamodel more easier.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-05-07
 */

// based on genesez meta model
import gcore;

// use TYPO3 MVC Extbase profile + access helper scripts
extension org::genesez::platform::typo3v4::mvc::profile::ExtbaseProfile;
extension org::genesez::platform::typo3v4::mvc::profile::ExtbaseAccessHelper;

// use TYPO3 MVC Fluid access helper scripts
extension org::genesez::platform::typo3v4::mvc::profile::FluidAccessHelper;

// use TYPO3 naming context and common naming scripts
extension org::genesez::metamodel::core::util::mapping::NameMapping;
extension org::genesez::platform::typo3v4::mvc::convention::NamingContext;

// use TYPO3 MVC conversion scripts
extension org::genesez::platform::typo3v4::mvc::convention::Conversion;

// use TYPO3 MVC workflow global var scripts
extension org::genesez::platform::typo3v4::mvc::util::GlobalVar;

// use common access helper scripts
extension org::genesez::metamodel::core::util::AccessElement;

// use common conversion scripts
extension org::genesez::metamodel::core::util::Conversion;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Controller 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase controllers.
 * 
 * @return	the list of TYPO3 MVC Extbase controllers or an empty list
 */
cached List[MClass] allControllers(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( e | e.isController() );
	

/**
 * Returns the a list of TYPO3 MVC Extbase command controllers.
 * 
 * @return	the list of TYPO3 MVC Extbase command controllers or an empty list
 */
cached List[MClass] allCommandControllers(MModel this) :
	allControllers().select( e | e.operation.select( o | o.hasT3ExtbaseControllerCommandStereotype() ).size != 0 );


/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase controller package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase controller package, otherwise false
 */
cached boolean isControllerPackageElement(MClassifier this) :
	// first check if this model is TYPO3 MVC complaint and this classifier is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesControllerPath() ) ||
	// second check if the package of this classifier has an stereotype
	owningContext.hasT3ExtbaseControllerPackageStereotype() ||
	// third check if this classifier is a class and is a controller
	( MClass.isInstance(this) && ((MClass)this).isController() );


/**
 * Checks if a class is a TYPO3 MVC Extbase controller.
 *
 * @return	true if the class is a TYPO3 MVC Extbase controller, otherwise false
 */
cached boolean isController(MClass this) :
	// first check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesControllerPath() ) ||
	// second check if this class has an stereotype
	hasT3ExtbaseControllerStereotype() ||
	// third check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseControllerPackageStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Extbase controller
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isController()
			: false
	);


/*
- - Controller Action settings  - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a operation is a TYPO3 MVC Extbase controller action.
 * 
 * @return	true if the operation is a TYPO3 MVC Extbase controller action, otherwise false
 */
cached boolean isControllerAction(MOperation this) :
	// first check if the operation has an stereotype
	hasT3ExtbaseControllerActionStereotype() ||
	// second check if the class is a controller AND the operation is not a controller command nor a non controller action
	( MClass.isInstance(classifier) && ((MClass)classifier).isController() && !isControllerCommand() && !isControllerNoAction() );


/*
- - Controller Command settings  - - - - - - - - - - - - - - - - - - - -
*/


/**
 * Checks if a operation is a TYPO3 MVC Extbase controller command.
 * 
 * @return	true if the operation is a TYPO3 MVC Extbase controller command, otherwise false
 */
cached boolean isControllerCommand(MOperation this) :
	// first check if the operation has an stereotype
	hasT3ExtbaseControllerCommandStereotype();


/*
- - No Controller Action settings - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a operation is not a TYPO3 MVC Extbase controller action.
 *
 * @return	true if the operation is not a TYPO3 MVC Extbase controller action, otherwise false
 */
cached boolean isControllerNoAction(MOperation this) :
	// first check if the operation has an stereotype
	hasT3ExtbaseControllerNoActionStereotype();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Factory 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase factory package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase factory package, otherwise false
 */
cached boolean isFactoryPackageElement(MClassifier this) :
	// first check if this model is TYPO3 MVC complaint and this classifier is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainFactoryPath() ) ||
	// second check if the package of this classifier has an stereotype
	owningContext.hasT3ExtbaseFactoryPackageStereotype() ||
	// third check if this classifier is a class and is a factory
	( MClass.isInstance(this) && ((MClass)this).isFactory() );


/**
 *
 * Checks if a class is a TYPO3 MVC Extbase factory.
 * 
 * @return	true if the class is a TYPO3 MVC Extbase factory, otherwise false
 */
cached boolean isFactory(MClass this) :
	// first check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() &&  dirPath() == classesDomainFactoryPath() ) ||
	// second check if this class has an stereotype
	hasT3ExtbaseFactoryStereotype() ||
	// third check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseFactoryPackageStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Extbase factory
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isFactory()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Domain Objects 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase entities and value objects.
 * 
 * @return	the list of TYPO3 MVC Extbase entities and value objects or an empty list
 */
cached List[MClass] allEntitiesAndValueObjects(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( e | e.isEntity() || e.isValueObject() );


/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase model package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase model package, otherwise false
 */
cached boolean isModelPackageElement(MClassifier this) :
	// first check if this model is TYPO3 MVC complaint and this classifier is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainModelPath() ) ||
	// second check if the package of this classifier has an stereotype
	( owningContext.hasT3ExtbaseModelPackageStereotype() || owningContext.hasT3ExtbaseEntityPackageStereotype() || owningContext.hasT3ExtbaseValueObjectPackageStereotype() ) ||
	// third check if this classifier is a class and is a entity or value object
	( MClass.isInstance(this) && ( ((MClass)this).isEntity() || ((MClass)this).isValueObject() ) );


/**
 * Getter for a list of all instance properties.
 * Inherited instance properties first.
 * Excluding final and derived for MAttribute and derived for MAssociationRole.
 * 
 * @return	a list of instance properties or an empty list
 */
List[MProperty] allInstanceProperties(MClassifier this) :
	{}.addAll(
		allInstanceAttributes()
	).addAll(
		allInstanceAssociationRoles()
	);


/**
 * Getter for a list of all instance attributes.
 * Inherited instance attributes first.
 * Excluding final and derived.
 * 
 * @return	a list of instance attributes or an empty list
 */
List[MAttribute] allInstanceAttributes(MClassifier this) :
	allAttributes().select( e |
		!e.static && !e.derived && !( e.final && e.hasDefaultValue())
	); 


/**
 * Getter for a list of all instance association roles.
 * Inherited instance association roles first.
 * Excluding derived.
 * 
 * @return	a list of instance association roles or an empty list
 */
List[MAssociationRole] allInstanceAssociationRoles(MClassifier this) :
	allAssociationRoles().select( e |
		!e.derived
	);


/**
 * Checks if a class should be generated as concrete table.
 * 
 * @return	true if the class should be generated as concrete table, otherwise false
 */
boolean isConcreteTableInheritance(MClass this) :
	!isSingleTableInheritance();


/**
 * Checks if a class should be generated as single table.
 * 
 * @return	true if the class should be generated as single table, otherwise false
 */
boolean isSingleTableInheritance(MClass this) :
	hasT3ExtbaseInheritanceStereotype() && getT3ExtbaseInheritanceInheritanceType() == prT3ExtbaseInheritanceTypeSingleTable();


/**
 * Checks if a class should be mapped.
 * 
 * @return	true if the class should be mapped, otherwise false
 */
boolean isMappingTable(MClass this) :
	hasT3ExtbaseTableMappingStereotype();



cached List[MClass] allConreteTableInheritances(MModel this) :
	allEntitiesAndValueObjects().select( e | !e.isSingleTableInheritance() && !e.isMappingTable() );


cached List[MClass] allSingleTableInheritances(MModel this) :
	allEntitiesAndValueObjects().select( e | e.isSingleTableInheritance() && !e.isMappingTable() );
	

cached List[MClass] allMappingTables(MModel this) :
	allEntitiesAndValueObjects().select( e | e.isMappingTable() );



String getPersistenceRecordTypeColumnName(MClass this) :
	isSingleTableInheritance() 
		? getT3ExtbaseInheritanceTypeColumn()
		: (	isMappingTable()
				? getT3ExtbaseTableMappingTypeColumn()
				 : ( !allSingleTableInheritanceSpecializations().isEmpty
						? allSingleTableInheritanceSpecializations().first().getPersistenceRecordTypeColumnName()
						: "record_type" ) );


/**
 * Getter for a list of types which should be mapped or stored as single table inheritance.
 * 
 * @return	a list of types or an empty list
 */
cached List[MType] allPersistenceClassMappings(MModel this) :
	let classMappings = {} :
		classMappings.addAll(
			// first add all domain objects which should be mapped
			allMappingTables()
		) ->
		classMappings.addAll(
			// second add all domain objects which should be stored as single table inheritance
			allSingleTableInheritances()
		) ->
		allSingleTableInheritances().
			// add all generalizations for "subclasses" from domain objects which should be stored as single table inheritance
			// maybe this is not needed (see other example implementations) but it is documented in "Zukunftssichere Extensionentwicklung mit Extbase und Fluid"
			collect( e | classMappings.add( e.generalization.first() ) ) ->
		classMappings.toSet();


/**
 * Getter for a list of properties which should be mapped.
 * 
 * @return	a list of properties or an empty list
 */
cached List[MProperty] owningPersistencePropertyMappings(MClass this) :
	// add all properties which should be mapped
	property.select( e | e.hasT3ExtbaseColumnMappingStereotype() );


/**
 * Getter for a list of specialization classes which are direct subclasses of single table inheritance.
 * 
 * @return	a list of classes or an empty list
 */
cached List[MClass] owningSingleTableInheritanceSpecializations(MType this) :
	owningSpecializations().typeSelect(MClass).
		select( e | e.isSingleTableInheritance() );


/**
 * Getter for a list of specialization classes which are direct or indirect subclasses of single table inheritance.
 
 * @return	a list of classes or an empty list
 */
cached List[MClass] allSingleTableInheritanceSpecializations(MType this) :
	allSpecializations().typeSelect(MClass).
		select( e | e.isSingleTableInheritance() );


/**
 * Checks if the versioning fields should be generated for a domain object.
 *
 * @return	true if the versioning fields should be generated, otherwise false
 */
boolean createVersioningFields(MClass this) : 
	!hasT3ExtbaseDomainObjectCreateVersioningFields("false");


/**
 * Checks if the localization fields should be generated for a domain object.
 *
 * @return	true if the localization fields should be generated, otherwise false
 */
boolean createLocalizationFields(MClass this) : 
	!hasT3ExtbaseDomainObjectCreateLocalizationFields("false");


/**
 * Checks if the starttime field should be generated for a domain object.
 *
 * @return	true if the starttime field should be generated, otherwise false
 */
boolean createStarttimeField(MClass this) : 
	!hasT3ExtbaseDomainObjectCreateStarttimeField("false");


/**
 * Checks if the endtime field should be generated for a domain object.
 *
 * @return	true if the endtime field should be generated, otherwise false
 */
boolean createEndtimeField(MClass this) : 
	!hasT3ExtbaseDomainObjectCreateEndtimeField("false");
	

/**
 * Checks if the hidden field should be generated for a domain object.
 *
 * @return	true if the hidden field should be generated, otherwise false
 */
boolean createHiddenField(MClass this) : 
	!hasT3ExtbaseDomainObjectCreateHiddenField("false");


/**
 * Checks if the sorting field should be generated for a domain object.
 *
 * @return	true if the sorting field should be generated, otherwise false
 */
boolean createSortingField(MClass this) : 
	!hasT3ExtbaseDomainObjectCreateSortingField("false");


/**
 * Checks if an attribute is one to one (1:1) unidirectornal.
 * 
 * @return	true if an attribute is one to one unidirectornal, otherwise false
 */
boolean isOneToOneUnidirectional(MAttribute this) :
	multiplicity.isSingleValued();


/**
 * Checks if an attribute is one to many (1:n) unidirectornal.
 * 
 * @return	true if an attribute is one to many unidirectornal, otherwise false
 */
boolean isOneToManyUnidirectional(MAttribute this) :
	multiplicity.isMultiValued();


/**
 * Checks if an association role is one to one (1:1) unidirectornal.
 * 
 * @return	true if an association role is one to one unidirectornal, otherwise false
 */
boolean isOneToOneUnidirectional(MAssociationRole this) :
	oppositeMultiplicity.isSingleValued() && multiplicity.isSingleValued() && !hasOpposite();


/**
 * Checks if an association role is one to one (1:1) bidirectornal.
 * 
 * @return	true if an association role is one to one bidirectornal, otherwise false
 */
boolean isOneToOneBidirectional(MAssociationRole this) :
	oppositeMultiplicity.isSingleValued() && multiplicity.isSingleValued() && hasOpposite();


/**
 * Checks if an association role is one to many (1:n) unidirectornal.
 * 
 * @return	true if an association role is one to many unidirectornal, otherwise false
 */
boolean isOneToManyUnidirectional(MAssociationRole this) :
	oppositeMultiplicity.isSingleValued() && multiplicity.isMultiValued() && !hasOpposite();

	
/**
 * Checks if an association role is one to many (1:n) bidirectornal.
 * 
 * @return	true if an association role is one to many bidirectornal, otherwise false
 */
boolean isOneToManyBidirectional(MAssociationRole this) :
	oppositeMultiplicity.isSingleValued() && multiplicity.isMultiValued() && hasOpposite();


/**
 * Checks if an association role is many to one (n:1) unidirectornal.
 * 
 * @return	true if an association role is many to one unidirectornal, otherwise false
 */
boolean isManyToOneUnidirectional(MAssociationRole this) :
	oppositeMultiplicity.isMultiValued() && multiplicity.isSingleValued() && !hasOpposite();


/**
 * Checks if an association role is many to one (n:1) bidirectornal.
 * 
 * @return	true if an association role is many to one bidirectornal, otherwise false
 */
boolean isManyToOneBidirectional(MAssociationRole this) :
	oppositeMultiplicity.isMultiValued() && multiplicity.isSingleValued() && hasOpposite();
	

/**
 * Checks if an association role is many to many (m:n) unidirectornal.
 * 
 * @return	true if an association role is many to many unidirectornal, otherwise false
 */
boolean isManyToManyUnidirectional(MAssociationRole this) :
	oppositeMultiplicity.isMultiValued() && multiplicity.isMultiValued() && !hasOpposite();
	

/**
 * Checks if an association role is many to many (m:n) bidirectornal.
 * 
 * @return	true if an association role is many to many bidirectornal, otherwise false
 */
boolean isManyToManyBidirectional(MAssociationRole this) :
	oppositeMultiplicity.isMultiValued() && multiplicity.isMultiValued() && hasOpposite();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Entity 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase entities.
 * 
 * @return	the list of TYPO3 MVC Extbase entities or an empty list
 */
cached List[MClass] allEntities(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( e | e.isEntity() );


/**
 * Checks if a class is a TYPO3 MVC Extbase entity.
 *
 * @return	true if the class is a TYPO3 MVC Extbase entity, otherwise false
 */
cached boolean isEntity(MClass this) :
	// first check if this model is TYPO3 MVC complaint and this class is inside the correct package and is not a TYPO3 MVC Extbase Value Object
	( globalVarIsT3MVCCompliant() &&  dirPath() == classesDomainModelPath() && !isValueObject() ) ||
	// second check if this class has an stereotype
	hasT3ExtbaseEntityStereotype() ||
	// third check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseEntityPackageStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Extbase entitry
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isEntity()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Value Object 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase value objects.
 * 
 * @return	the list of TYPO3 MVC Extbase value objects or an empty list
 */
cached List[MClass] allValueObjects(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( e | e.isValueObject() );
	

/**
 * Checks if a class is a TYPO3 MVC Extbase value object.
 *
 * @return	true if the class is a TYPO3 MVC Extbase value object, otherwise false
 */
cached boolean isValueObject(MClass this) :
	// first check if this class has an stereotype
	hasT3ExtbaseValueObjectStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseValueObjectPackageStereotype() ||
	// third check if generalization is an TYPO3 MVC Extbase value object
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isValueObject()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Repository 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase repositories.
 * 
 * @return	the list of TYPO3 MVC Extbase repositories or an empty list
 */
cached List[MClass] allRepositories(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( e | e.isRepository() );


/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase repository package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase repository package, otherwise false
 */
cached boolean isRepositoryPackageElement(MClassifier this) :
	// first check if this model is TYPO3 MVC complaint and this classifier is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainRepositoryPath() ) ||
	// second check if the package of this classifier has an stereotype
	owningContext.hasT3ExtbaseRepositoryPackageStereotype() ||
	// third check if this classifier is a class and is a repository
	( MClass.isInstance(this) && ((MClass)this).isRepository() );


/**
 * Checks if a class is a TYPO3 MVC Extbase repository.
 *
 * @return	true if the class is a TYPO3 MVC Extbase repository, otherwise false
 */
cached boolean isRepository(MClass this) :
	// first check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainRepositoryPath() ) ||
	// second check if this class has an stereotype
	hasT3ExtbaseRepositoryStereotype() ||
	// third check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseRepositoryPackageStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Extbase repository
	(	
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isRepository()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Service 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase service package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase service package, otherwise false
 */
cached boolean isServicePackageElement(MClassifier this) :
	// first check if this model is TYPO3 MVC complaint and this classifier is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainServicePath() ) ||
	// second check if the package of this classifier has an stereotype
	owningContext.hasT3ExtbaseServicePackageStereotype() ||
	// third check if this classifier is a class and is a service
	( MClass.isInstance(this) && ((MClass)this).isService() );


/**
 *
 * Checks if a class is a TYPO3 MVC Extbase service.
 * 
 * @return	true if the class is a TYPO3 MVC Extbase service, otherwise false
 */
cached boolean isService(MClass this) :
	// first check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() &&  dirPath() == classesDomainServicePath() ) ||
	// second check if this class has an stereotype
	hasT3ExtbaseServiceStereotype() ||
	// third check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseServicePackageStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Extbase service
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isService()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Validator 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase validators.
 * 
 * @return	the list of TYPO3 MVC Extbase validators or an empty list
 */
cached List[MClass] allValidators(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( e | e.isValidator() );
	

/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase validator package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase validator package, otherwise false
 */
cached boolean isValidatorPackageElement(MClassifier this) :
	// first check if this model is TYPO3 MVC complaint and this classifier is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainValidatorPath() ) ||
	// second check if the package of this classifier has an stereotype
	owningContext.hasT3ExtbaseValidatorPackageStereotype() ||
	// third check if this classifier is a class and is a validator
	( MClass.isInstance(this) && ((MClass)this).isValidator() );


/**
 * Checks if a class is a TYPO3 MVC Extbase validator.
 *
 * @return	true if the class is a TYPO3 MVC Extbase validator, otherwise false
 */
cached boolean isValidator(MClass this) :
	// first check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainValidatorPath() ) ||
	// second check if this class has an stereotype
	hasT3ExtbaseValidatorStereotype() ||
	// third check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseValidatorPackageStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Extbase validator
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isValidator()
			: false
	);


/**
 * Checks if a stereotype is a TYPO3 MVC Extbase validator.
 *
 * @return	true if the stereotype is a TYPO3 MVC Extbase validator, otherwise false
 */
cached boolean isValidator(MStereotype this) :
	// first check is if the stereotype starts with the prefix "T3Extbase" 
	// and ends with the suffix "Validator". So all TYPO3 MVC Extbase validators are added. 
	( name.startsWith("T3Extbase") && name.endsWith("Validator") ) ||
	// second check if the name of the stereotype is equals to a validator class
	!model.allValidators().select( v | name == v.name ).isEmpty ||
	// third check is if the sterotype has a sterotype
	//hasT3ExtbaseValidatorStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Extbase validator
	(
		!generalization.isEmpty
			? generalization.first().isValidator()
			: false
	);


/**
 * Returns the a list of validators which are assigned to an element.
 * 
 * @return	the list of assigned validators or an empty list
 */
List[MStereotype] allAssignedValidators(MElement this) :
	stereotype.select( s | s.isValidator() );
	

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Fluid ViewHelper 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a classifier is part of the TYPO3 MVC Fluid view helper package.
 * 
 * @return	true if the classifier is part of the TYPO3 Fluid view helper package, otherwise false
 */
cached boolean isViewHelperPackageElement(MClassifier this) :
	// first check if this model is TYPO3 MVC complaint and this classifier is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesViewHelpersPath() ) ||
	// second check if the package of this classifier has an stereotype
	owningContext.hasT3FluidViewHelperPackageStereotype() ||
	// third check if this classifier is a class and is a view helper
	( MClass.isInstance(this) && ((MClass)this).isViewHelper() );


/**
 * Checks if a class is a TYPO3 MVC Fluid view helper.
 *
 * @return	true if the class is a TYPO3 MVC Fluid view helper, otherwise false
 */
cached boolean isViewHelper(MClass this) :
	// first check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesViewHelpersPath() ) ||
	// second check if this class has an stereotype
	hasT3FluidViewHelperStereotype() ||
	// third check if the package of this class has an stereotype
	owningContext.hasT3FluidViewHelperPackageStereotype() ||
	// fourth check if generalization is an TYPO3 MVC Fluid view helper
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isViewHelper()
			: false
	);		


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Plugin and Module 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase plugins.
 * 
 * @return	the list of TYPO3 MVC Extbase plugins or an empty list
 */
cached List[MInterface] allPlugins(MModel this) :
	allNestedClassifiers().typeSelect(MInterface).select( e | e.isPlugin() );


/**
 * Checks if an interface is a TYPO3 MVC Plugin.
 *
 * @return	true if the interface is a TYPO3 MVC Plugin, otherwise false
 */
cached boolean isPlugin(MInterface this) :
	// first check if this interface has an stereotype
	hasT3ExtbasePluginStereotype();


/**
 * Returns the a list of TYPO3 MVC Extbase modules.
 * 
 * @return	the list of TYPO3 MVC Extbase modules or an empty list
 */
cached List[MInterface] allModules(MModel this) :
	allNestedClassifiers().typeSelect(MInterface).select( e | e.isModule() );


/**
 * Checks if an interface is a TYPO3 MVC Module.
 *
 * @return	true if the interface is a TYPO3 MVC Module, otherwise false
 */
cached boolean isModule(MInterface this) :
	// first check if this interface has an stereotype
	hasT3ExtbaseModuleStereotype();	
	

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Misc 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

boolean generatePHPTypeHint(MType this) :
	name( getInternalNamingContext(), typeMappingContextPHPTypeHint() ) != ""
		? true
		: false;
