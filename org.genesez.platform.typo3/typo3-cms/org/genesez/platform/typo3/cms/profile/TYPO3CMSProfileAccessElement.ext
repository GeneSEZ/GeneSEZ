/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Simplifies access to "GeneSEZ TYPO3 CMS Profile" profile and makes working with them more easier.
 * 
 * HINT: All scripts for extension mechanism are available under the prefix 'em'.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer) 
 */


// use metamodel core extension mechanism scripts
extension org::genesez::metamodel::core::util::AccessElement;

// use profile scripts
extension org::genesez::platform::typo3::cms::profile::TYPO3CMSProfile;


// -- Xtend scripts for Stereotype "TYPO3ExtensionManager" --

/**
 * Checks if an element is annotated with the stereotype "TYPO3ExtensionManager".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerStereotype(MElement this) :
	emHasStereotypeAssignment( prTYPO3ExtensionManager() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "TYPO3ExtensionManager".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "TYPO3ExtensionManager".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTYPO3ExtensionManager(), tag, valueReference );


/*
- - "author" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "author" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableAuthor(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthor() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "author" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerAuthor(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthor(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "author" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningAuthor(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthor() );


/**
 * Returns the value of the single-valued tagged value "author"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerAuthor(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthor() );


/*
- - "authorCompany" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "authorCompany" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableAuthorCompany(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorCompany() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "authorCompany" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerAuthorCompany(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorCompany(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "authorCompany" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningAuthorCompany(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorCompany() );


/**
 * Returns the value of the single-valued tagged value "authorCompany"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerAuthorCompany(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorCompany() );


/*
- - "authorEMail" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "authorEMail" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableAuthorEMail(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorEMail() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "authorEMail" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerAuthorEMail(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorEMail(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "authorEMail" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningAuthorEMail(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorEMail() );


/**
 * Returns the value of the single-valued tagged value "authorEMail"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerAuthorEMail(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerAuthorEMail() );


/*
- - "category" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "category" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableCategory(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCategory() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "category" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerCategory(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCategory(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "category" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningCategory(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCategory() );


/**
 * Returns the value of the single-valued tagged value "category"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerCategory(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCategory() );


/*
- - "clearCacheOnLoad" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "clearCacheOnLoad" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableClearCacheOnLoad(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerClearCacheOnLoad() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "clearCacheOnLoad" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerClearCacheOnLoad(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerClearCacheOnLoad(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "clearCacheOnLoad" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningClearCacheOnLoad(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerClearCacheOnLoad() );


/**
 * Returns the value of the single-valued tagged value "clearCacheOnLoad"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerClearCacheOnLoad(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerClearCacheOnLoad() );


/*
- - "conflicts" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "conflicts" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableConflicts(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerConflicts() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "conflicts" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerConflicts(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerConflicts(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "conflicts" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningConflicts(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerConflicts() );


/**
 * Returns the list of values of the multi-valued tagged value "conflicts"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTYPO3ExtensionManagerConflicts(MElement this) : 
	emAllTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerConflicts() );


/*
- - "createDirs" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "createDirs" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableCreateDirs(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCreateDirs() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "createDirs" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerCreateDirs(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCreateDirs(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "createDirs" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningCreateDirs(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCreateDirs() );


/**
 * Returns the list of values of the multi-valued tagged value "createDirs"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTYPO3ExtensionManagerCreateDirs(MElement this) : 
	emAllTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerCreateDirs() );


/*
- - "dependencies" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "dependencies" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableDependencies(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDependencies() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "dependencies" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerDependencies(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDependencies(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "dependencies" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningDependencies(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDependencies() );


/**
 * Returns the list of values of the multi-valued tagged value "dependencies"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTYPO3ExtensionManagerDependencies(MElement this) : 
	emAllTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDependencies() );


/*
- - "description" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "description" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableDescription(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDescription() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "description" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerDescription(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDescription(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "description" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningDescription(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDescription() );


/**
 * Returns the value of the single-valued tagged value "description"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerDescription(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDescription() );


/*
- - "doNotLoadInFE" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "doNotLoadInFE" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableDoNotLoadInFE(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDoNotLoadInFE() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "doNotLoadInFE" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerDoNotLoadInFE(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDoNotLoadInFE(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "doNotLoadInFE" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningDoNotLoadInFE(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDoNotLoadInFE() );


/**
 * Returns the value of the single-valued tagged value "doNotLoadInFE"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerDoNotLoadInFE(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerDoNotLoadInFE() );


/*
- - "internal" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "internal" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableInternal(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerInternal() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "internal" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerInternal(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerInternal(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "internal" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningInternal(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerInternal() );


/**
 * Returns the value of the single-valued tagged value "internal"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerInternal(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerInternal() );


/*
- - "lockType" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "lockType" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableLockType(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerLockType() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "lockType" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerLockType(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerLockType(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "lockType" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningLockType(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerLockType() );


/**
 * Returns the list of values of the multi-valued tagged value "lockType"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTYPO3ExtensionManagerLockType(MElement this) : 
	emAllTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerLockType() );


/*
- - "modifyTables" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "modifyTables" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableModifyTables(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerModifyTables() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "modifyTables" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerModifyTables(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerModifyTables(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "modifyTables" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningModifyTables(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerModifyTables() );


/**
 * Returns the list of values of the multi-valued tagged value "modifyTables"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTYPO3ExtensionManagerModifyTables(MElement this) : 
	emAllTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerModifyTables() );


/*
- - "priority" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "priority" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizablePriority(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerPriority() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "priority" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerPriority(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerPriority(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "priority" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningPriority(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerPriority() );


/**
 * Returns the value of the single-valued tagged value "priority"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerPriority(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerPriority() );


/*
- - "shy" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "shy" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableShy(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerShy() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "shy" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerShy(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerShy(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "shy" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningShy(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerShy() );


/**
 * Returns the value of the single-valued tagged value "shy"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerShy(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerShy() );


/*
- - "state" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "state" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableState(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerState() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "state" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerState(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerState(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "state" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningState(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerState() );


/**
 * Returns the value of the single-valued tagged value "state"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerState(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerState() );


/*
- - "suggests" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "suggests" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableSuggests(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerSuggests() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "suggests" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerSuggests(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerSuggests(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "suggests" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningSuggests(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerSuggests() );


/**
 * Returns the list of values of the multi-valued tagged value "suggests"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTYPO3ExtensionManagerSuggests(MElement this) : 
	emAllTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerSuggests() );


/*
- - "title" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "title" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableTitle(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerTitle() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "title" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerTitle(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerTitle(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "title" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningTitle(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerTitle() );


/**
 * Returns the value of the single-valued tagged value "title"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerTitle(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerTitle() );


/*
- - "uploadFolder" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "uploadFolder" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableUploadFolder(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerUploadFolder() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "uploadFolder" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUploadFolder(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerUploadFolder(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "uploadFolder" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningUploadFolder(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerUploadFolder() );


/**
 * Returns the value of the single-valued tagged value "uploadFolder"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerUploadFolder(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerUploadFolder() );


/*
- - "version" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "version" of the stereotype "TYPO3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerUtilizableVersion(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerVersion() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "version" of the stereotype "TYPO3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3ExtensionManagerVersion(MElement this, String value) :
	emHasTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerVersion(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "version" of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3ExtensionManagerOwningVersion(MElement this) : 
	emOwningTaggedValues( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerVersion() );


/**
 * Returns the value of the single-valued tagged value "version"
 * of the stereotype "TYPO3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3ExtensionManagerVersion(MElement this) :
	emGetTaggedValue( prTYPO3ExtensionManager(), prTYPO3ExtensionManagerVersion() );


// -- Xtend scripts for Stereotype "TYPO3FlexFormProperty" --

/**
 * Checks if an element is annotated with the stereotype "TYPO3FlexFormProperty".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTYPO3FlexFormPropertyStereotype(MElement this) :
	emHasStereotypeAssignment( prTYPO3FlexFormProperty() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "TYPO3FlexFormProperty".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3FlexFormPropertyTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTYPO3FlexFormProperty(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "TYPO3FlexFormProperty".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3FlexFormPropertyTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTYPO3FlexFormProperty(), tag, valueReference );


/*
- - "sheet" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "sheet" of the stereotype "TYPO3FlexFormProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3FlexFormPropertyUtilizableSheet(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3FlexFormProperty(), prTYPO3FlexFormPropertySheet() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "sheet" of the stereotype "TYPO3FlexFormProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3FlexFormPropertySheet(MElement this, String value) :
	emHasTaggedValue( prTYPO3FlexFormProperty(), prTYPO3FlexFormPropertySheet(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "sheet" of the stereotype "TYPO3FlexFormProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3FlexFormPropertyOwningSheet(MElement this) : 
	emOwningTaggedValues( prTYPO3FlexFormProperty(), prTYPO3FlexFormPropertySheet() );


/**
 * Returns the value of the single-valued tagged value "sheet"
 * of the stereotype "TYPO3FlexFormProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3FlexFormPropertySheet(MElement this) :
	emGetTaggedValue( prTYPO3FlexFormProperty(), prTYPO3FlexFormPropertySheet() );


// -- Xtend scripts for Stereotype "TYPO3Localization" --

/**
 * Checks if an element is annotated with the stereotype "TYPO3Localization".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTYPO3LocalizationStereotype(MElement this) :
	emHasStereotypeAssignment( prTYPO3Localization() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "TYPO3Localization".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3LocalizationTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTYPO3Localization(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "TYPO3Localization".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3LocalizationTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTYPO3Localization(), tag, valueReference );


/*
- - "languageKeys" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "languageKeys" of the stereotype "TYPO3Localization" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3LocalizationUtilizableLanguageKeys(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3Localization(), prTYPO3LocalizationLanguageKeys() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "languageKeys" of the stereotype "TYPO3Localization".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3LocalizationLanguageKeys(MElement this, String value) :
	emHasTaggedValue( prTYPO3Localization(), prTYPO3LocalizationLanguageKeys(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "languageKeys" of the stereotype "TYPO3Localization".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3LocalizationOwningLanguageKeys(MElement this) : 
	emOwningTaggedValues( prTYPO3Localization(), prTYPO3LocalizationLanguageKeys() );


/**
 * Returns the list of values of the multi-valued tagged value "languageKeys"
 * of the stereotype "TYPO3Localization".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTYPO3LocalizationLanguageKeys(MElement this) : 
	emAllTaggedValues( prTYPO3Localization(), prTYPO3LocalizationLanguageKeys() );


// -- Xtend scripts for Stereotype "TYPO3TCAAssociationType" --

/**
 * Checks if an element is annotated with the stereotype "TYPO3TCAAssociationType".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeStereotype(MElement this) :
	emHasStereotypeAssignment( prTYPO3TCAAssociationType() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "TYPO3TCAAssociationType".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTYPO3TCAAssociationType(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "TYPO3TCAAssociationType".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTYPO3TCAAssociationType(), tag, valueReference );


/*
- - "columnsConfigWizardAdd" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsConfigWizardAdd" of the stereotype "TYPO3TCAAssociationType" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeUtilizableColumnsConfigWizardAdd(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardAdd() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsConfigWizardAdd" of the stereotype "TYPO3TCAAssociationType".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeColumnsConfigWizardAdd(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardAdd(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsConfigWizardAdd" of the stereotype "TYPO3TCAAssociationType".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAAssociationTypeOwningColumnsConfigWizardAdd(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardAdd() );


/**
 * Returns the value of the single-valued tagged value "columnsConfigWizardAdd"
 * of the stereotype "TYPO3TCAAssociationType".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAAssociationTypeColumnsConfigWizardAdd(MElement this) :
	emGetTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardAdd() );


/*
- - "columnsConfigWizardEdit" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsConfigWizardEdit" of the stereotype "TYPO3TCAAssociationType" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeUtilizableColumnsConfigWizardEdit(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardEdit() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsConfigWizardEdit" of the stereotype "TYPO3TCAAssociationType".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeColumnsConfigWizardEdit(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardEdit(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsConfigWizardEdit" of the stereotype "TYPO3TCAAssociationType".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAAssociationTypeOwningColumnsConfigWizardEdit(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardEdit() );


/**
 * Returns the value of the single-valued tagged value "columnsConfigWizardEdit"
 * of the stereotype "TYPO3TCAAssociationType".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAAssociationTypeColumnsConfigWizardEdit(MElement this) :
	emGetTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardEdit() );


/*
- - "columnsConfigWizardSuggest" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsConfigWizardSuggest" of the stereotype "TYPO3TCAAssociationType" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeUtilizableColumnsConfigWizardSuggest(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardSuggest() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsConfigWizardSuggest" of the stereotype "TYPO3TCAAssociationType".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAAssociationTypeColumnsConfigWizardSuggest(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardSuggest(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsConfigWizardSuggest" of the stereotype "TYPO3TCAAssociationType".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAAssociationTypeOwningColumnsConfigWizardSuggest(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardSuggest() );


/**
 * Returns the value of the single-valued tagged value "columnsConfigWizardSuggest"
 * of the stereotype "TYPO3TCAAssociationType".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAAssociationTypeColumnsConfigWizardSuggest(MElement this) :
	emGetTaggedValue( prTYPO3TCAAssociationType(), prTYPO3TCAAssociationTypeColumnsConfigWizardSuggest() );


// -- Xtend scripts for Stereotype "TYPO3TCAClass" --

/**
 * Checks if an element is annotated with the stereotype "TYPO3TCAClass".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTYPO3TCAClassStereotype(MElement this) :
	emHasStereotypeAssignment( prTYPO3TCAClass() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "TYPO3TCAClass".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTYPO3TCAClass(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "TYPO3TCAClass".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTYPO3TCAClass(), tag, valueReference );


/*
- - "ctrlLabel" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value reference
 * of the tagged value "ctrlLabel" of the stereotype "TYPO3TCAClass" 
 * which is not null.
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassUtilizableCtrlLabel(MElement this) :
	emHasUtilizableTaggedValueReference( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabel() );


/**
 * Checks if an element is annotated with the specified value reference
 * of the tagged value "ctrlLabel" of the stereotype "TYPO3TCAClass".
 *
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassCtrlLabel(MElement this, MElement valueReference) :
	emHasTaggedValue( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabel(), valueReference );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlLabel" of the stereotype "TYPO3TCAClass".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAClassOwningCtrlLabel(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabel() );


/**
 * Returns the value reference of the single-valued tagged value "ctrlLabel"
 * of the stereotype "TYPO3TCAClass".
 * 
 * @return	The value reference of the single-valued tagged value, otherwise null, if the tagged value is not assigned.
 */
MElement emGetTYPO3TCAClassCtrlLabel(MElement this) :
	emGetTaggedValueReference( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabel() );


/*
- - "ctrlLabelAlt" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value reference
 * of the tagged value "ctrlLabelAlt" of the stereotype "TYPO3TCAClass" 
 * which is not null.
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassUtilizableCtrlLabelAlt(MElement this) :
	emHasUtilizableTaggedValueReference( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAlt() );


/**
 * Checks if an element is annotated with the specified value reference
 * of the tagged value "ctrlLabelAlt" of the stereotype "TYPO3TCAClass".
 *
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassCtrlLabelAlt(MElement this, MElement valueReference) :
	emHasTaggedValue( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAlt(), valueReference );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlLabelAlt" of the stereotype "TYPO3TCAClass".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAClassOwningCtrlLabelAlt(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAlt() );


/**
 * Returns the list of value references of the multi-valued tagged value "ctrlLabelAlt"
 * of the stereotype "TYPO3TCAClass".
 * @return	The list of value references of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 * 
 */
List[MElement] emGetTYPO3TCAClassCtrlLabelAlt(MElement this) : 
	emAllTaggedValueReferences( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAlt() );


/*
- - "ctrlLabelAltForce" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "ctrlLabelAltForce" of the stereotype "TYPO3TCAClass" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassUtilizableCtrlLabelAltForce(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAltForce() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "ctrlLabelAltForce" of the stereotype "TYPO3TCAClass".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAClassCtrlLabelAltForce(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAltForce(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlLabelAltForce" of the stereotype "TYPO3TCAClass".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAClassOwningCtrlLabelAltForce(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAltForce() );


/**
 * Returns the value of the single-valued tagged value "ctrlLabelAltForce"
 * of the stereotype "TYPO3TCAClass".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAClassCtrlLabelAltForce(MElement this) :
	emGetTaggedValue( prTYPO3TCAClass(), prTYPO3TCAClassCtrlLabelAltForce() );


// -- Xtend scripts for Stereotype "TYPO3TCAProperty" --

/**
 * Checks if an element is annotated with the stereotype "TYPO3TCAProperty".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTYPO3TCAPropertyStereotype(MElement this) :
	emHasStereotypeAssignment( prTYPO3TCAProperty() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "TYPO3TCAProperty".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTYPO3TCAProperty(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "TYPO3TCAProperty".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTYPO3TCAProperty(), tag, valueReference );


/*
- - "columnsDefaultExtras" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsDefaultExtras" of the stereotype "TYPO3TCAProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyUtilizableColumnsDefaultExtras(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsDefaultExtras() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsDefaultExtras" of the stereotype "TYPO3TCAProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyColumnsDefaultExtras(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsDefaultExtras(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsDefaultExtras" of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAPropertyOwningColumnsDefaultExtras(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsDefaultExtras() );


/**
 * Returns the value of the single-valued tagged value "columnsDefaultExtras"
 * of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAPropertyColumnsDefaultExtras(MElement this) :
	emGetTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsDefaultExtras() );


/*
- - "columnsExclude" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsExclude" of the stereotype "TYPO3TCAProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyUtilizableColumnsExclude(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsExclude() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsExclude" of the stereotype "TYPO3TCAProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyColumnsExclude(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsExclude(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsExclude" of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAPropertyOwningColumnsExclude(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsExclude() );


/**
 * Returns the value of the single-valued tagged value "columnsExclude"
 * of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAPropertyColumnsExclude(MElement this) :
	emGetTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyColumnsExclude() );


/*
- - "typesAltLabel" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesAltLabel" of the stereotype "TYPO3TCAProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyUtilizableTypesAltLabel(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesAltLabel() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesAltLabel" of the stereotype "TYPO3TCAProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyTypesAltLabel(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesAltLabel(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesAltLabel" of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAPropertyOwningTypesAltLabel(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesAltLabel() );


/**
 * Returns the value of the single-valued tagged value "typesAltLabel"
 * of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAPropertyTypesAltLabel(MElement this) :
	emGetTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesAltLabel() );


/*
- - "typesFormStyleCodes" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesFormStyleCodes" of the stereotype "TYPO3TCAProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyUtilizableTypesFormStyleCodes(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesFormStyleCodes() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesFormStyleCodes" of the stereotype "TYPO3TCAProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyTypesFormStyleCodes(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesFormStyleCodes(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesFormStyleCodes" of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAPropertyOwningTypesFormStyleCodes(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesFormStyleCodes() );


/**
 * Returns the value of the single-valued tagged value "typesFormStyleCodes"
 * of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAPropertyTypesFormStyleCodes(MElement this) :
	emGetTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesFormStyleCodes() );


/*
- - "typesPaletteNumber" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesPaletteNumber" of the stereotype "TYPO3TCAProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyUtilizableTypesPaletteNumber(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesPaletteNumber() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesPaletteNumber" of the stereotype "TYPO3TCAProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyTypesPaletteNumber(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesPaletteNumber(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesPaletteNumber" of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAPropertyOwningTypesPaletteNumber(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesPaletteNumber() );


/**
 * Returns the value of the single-valued tagged value "typesPaletteNumber"
 * of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAPropertyTypesPaletteNumber(MElement this) :
	emGetTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesPaletteNumber() );


/*
- - "typesSpecialConfiguration" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesSpecialConfiguration" of the stereotype "TYPO3TCAProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyUtilizableTypesSpecialConfiguration(MElement this) :
	emHasUtilizableTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesSpecialConfiguration() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesSpecialConfiguration" of the stereotype "TYPO3TCAProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTYPO3TCAPropertyTypesSpecialConfiguration(MElement this, String value) :
	emHasTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesSpecialConfiguration(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesSpecialConfiguration" of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTYPO3TCAPropertyOwningTypesSpecialConfiguration(MElement this) : 
	emOwningTaggedValues( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesSpecialConfiguration() );


/**
 * Returns the value of the single-valued tagged value "typesSpecialConfiguration"
 * of the stereotype "TYPO3TCAProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTYPO3TCAPropertyTypesSpecialConfiguration(MElement this) :
	emGetTaggedValue( prTYPO3TCAProperty(), prTYPO3TCAPropertyTypesSpecialConfiguration() );


