«REM» import code gen meta model «ENDREM»
«IMPORT genesezMM»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::DataType»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::Helper»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::Naming»


// //////////////////////////////////////////////////////////////////////////////
// public functions
// //////////////////////////////////////////////////////////////////////////////


// generate attributes for a classifier
«DEFINE AssociationDecl FOR MClassifier»
«EXPAND AssociationDecl FOREACH property.typeSelect(MAssociationRole)»
«ENDDEFINE»


«DEFINE OperationDecl FOR MInterface»
«FOREACH property.typeSelect(MAssociationRole) AS a»
	«EXPAND GetterDecl FOR a»
	«EXPAND SetterDecl FOR a»
	«EXPAND IteratorDecl FOR a»
	«EXPAND InsertInDecl FOR a»
	«EXPAND RemoveFromDecl FOR a»
«ENDFOREACH»
«ENDDEFINE»


«DEFINE OperationImpl FOR MClass»
«FOREACH property.typeSelect(MAssociationRole) AS a»
	«EXPAND GetterImpl FOR a»
	«EXPAND SetterImpl FOR a»
	«EXPAND IteratorImpl FOR a»
	«EXPAND InsertInImpl FOR a»
	«EXPAND RemoveFromImpl FOR a»
«ENDFOREACH»
«ENDDEFINE»


// generate a declaration for an attribute
«DEFINE AssociationDecl FOR MAssociationRole»
«EXPAND ProtectedRegion::Comment("java.massociationrole.declaration.association.comment." + xmiGuid)»
«IF multiplicity == 1»
	private «type.name» «asVariableName(name)»;
«ENDIF»
«IF multiplicity != 1»
	private java.util.Set<«type.name»> «asVariableName(name)» = new java.util.HashSet<«type.name»>();
«ENDIF»
«ENDDEFINE»


// generate a getter declaration method for a massociation
«DEFINE GetterDecl FOR MAssociationRole»
«EXPAND ProtectedRegion::CommentGetter("java.massociation.declaration.getter.comment." + xmiGuid)»
«IF multiplicity == 1»
	public «type.name» «asGetter(name)»();
«ENDIF»
«IF multiplicity != 1»
	public java.util.Set<«type.name»> «asGetter(name)»();
«ENDIF»
«ENDDEFINE»



// generate a getter implementation method for a massociation
«DEFINE GetterImpl FOR MAssociationRole»
«EXPAND ProtectedRegion::CommentGetter("java.massociation.implementation.getter.comment." + xmiGuid)»
«IF multiplicity == 1»
	public «type.name» «asGetter(name)»() {
		return «asVariableName(name)»;
	}
«ENDIF»
«IF multiplicity != 1»
	public java.util.Set<«type.name»> «asGetter(name)»() {
		return java.util.Collections.unmodifiableSet(«asVariableName(name)»);
	}
«ENDIF»
«ENDDEFINE»


// generate a setter declaration method for a massociation
«DEFINE SetterDecl FOR MAssociationRole»
«EXPAND ProtectedRegion::CommentSetter("java.massociation.declaration.setter.comment." + xmiGuid)»
«IF multiplicity == 1»
	public void «asSetter(name)»(«type.name» «asVariableName(name)»);
«ENDIF»
«IF multiplicity != 1»
	public void «asSetter(name)»(java.util.HashSet<«type.name»> «asVariableName(name)»);
«ENDIF»
«ENDDEFINE»


// generate a setter implementation method for a massociation
«DEFINE SetterImpl FOR MAssociationRole»
«EXPAND ProtectedRegion::CommentSetter("java.massociation.implementation.setter.comment." + xmiGuid)»
«IF multiplicity == 1»
	public void «asSetter(name)»(«type.name» «asVariableName(name)») {
		this.«asVariableName(name)» = «asVariableName(name)»;
	}
«ENDIF»
«IF multiplicity != 1»
	public void «asSetter(name)»(java.util.HashSet<«type.name»> «asVariableName(name)») {
		this.«asVariableName(name)» = «asVariableName(name)»;
	}
«ENDIF»
«ENDDEFINE»


// generate a iterator declaration method for a massociation
«DEFINE IteratorDecl FOR MAssociationRole»
«IF multiplicity != 1»
	«EXPAND ProtectedRegion::CommentIterator("java.massociation.declaration.iterator.comment." + xmiGuid)»
	public java.util.Iterator<«type.name»> «asGetter(name)»Iterator();
«ENDIF»
«ENDDEFINE»


// generate a iterator implementation method for a massociation
«DEFINE IteratorImpl FOR MAssociationRole»
«IF multiplicity != 1»
	«EXPAND ProtectedRegion::CommentIterator("java.massociation.implementation.iterator.comment." + xmiGuid)»
	public java.util.Iterator<«type.name»> «asGetter(name)»Iterator() {
		return «asVariableName(name)».iterator();
	}
«ENDIF»
«ENDDEFINE»


// generate a insert in declaration method
«DEFINE InsertInDecl FOR MAssociationRole»
«IF multiplicity != 1»
	«EXPAND ProtectedRegion::CommentInsertIn("java.massociation.declaration.insertin.comment." + xmiGuid)»
	public void insertIn«name.toFirstUpper()»(«type.name» _in);
«ENDIF»
«ENDDEFINE»


// generate a insert in implementation method
«DEFINE InsertInImpl FOR MAssociationRole»
«EXPAND ProtectedRegion::CommentInsertIn("java.massociation.implementation.insertin.comment." + xmiGuid)»
public void insertIn«name.toFirstUpper()»(«type.name» _in) {
	«IF multiplicity == 1»
		if («asVariableName(name)» == _in) {
			return;
		}
		«IF opposite != null»
			if («asVariableName(name)» != null) {
				«asVariableName(name)».removeFrom«opposite.name.toFirstUpper()»(this);
			}
		«ENDIF»
		«asVariableName(name)» = _in;
	«ENDIF»
	«IF multiplicity != 1»
		if («asVariableName(name)».contains(_in)) {
			return;
		}
		«asVariableName(name)».add(_in);
	«ENDIF»
	«IF opposite != null»
		_in.insertIn«opposite.name.toFirstUpper()»(this);
	«ENDIF»
}
«ENDDEFINE»


// generate a remove from declaration method
«DEFINE RemoveFromDecl FOR MAssociationRole»
«IF multiplicity != 1»
	«EXPAND ProtectedRegion::CommentRemoveFrom("java.massociation.declaration.removefrom.comment." + xmiGuid)»
	public void removeFrom«name.toFirstUpper()»(«type.name» _ex);
«ENDIF»
«ENDDEFINE»


// generate a remove from implementation method
«DEFINE RemoveFromImpl FOR MAssociationRole»
«EXPAND ProtectedRegion::CommentRemoveFrom("java.massociation.implementation.removefrom.comment." + xmiGuid)»
public void removeFrom«name.toFirstUpper()»(«type.name» _ex) {
	«IF multiplicity == 1»
		if («asVariableName(name)» != _ex) {
			return;
		}
		«asVariableName(name)» = null;
	«ENDIF»
	«IF multiplicity != 1»
		if (!«asVariableName(name)».contains(_ex)) {
			return;
		}
		«asVariableName(name)».remove(_ex);
	«ENDIF»
	«IF opposite != null»
		_ex.removeFrom«opposite.name.toFirstUpper()»(this);
	«ENDIF»
}
«ENDDEFINE»


// //////////////////////////////////////////////////////////////////////////////
// private functions
// //////////////////////////////////////////////////////////////////////////////


