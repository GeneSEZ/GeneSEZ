/**
 * Simplifies access to "GeneSEZ TYPO3v4 Profile" profile 
 * and makes working with the profile more easier. 
 *  
 */

// based on genesez meta model
import gcore;

// use common access helper scripts
extension de::genesez::platforms::common::AccessHelper;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3ExtensionManager"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3ExtensionManager".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3ExtensionManagerStereotype(MElement this) :
	hasStereotype("T3ExtensionManager");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3ExtensionManager", tag, value);
	
/*
- - "author" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "author" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerAuthor(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "author", value);

/**
 * Checks if an element has a tagged value of the tag "author" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableAuthor(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "author");
/**
 * Returns the tagged value of the tag "author"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerAuthor(MElement this) :
	getTaggedValue("T3ExtensionManager", "author");

/**
 * Sets the tagged value of an existing the tag "author"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerAuthor(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "author", value);

/*
- - "authorCompany" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "authorCompany" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerAuthorCompany(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "authorCompany", value);

/**
 * Checks if an element has a tagged value of the tag "authorCompany" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableAuthorCompany(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "authorCompany");
/**
 * Returns the tagged value of the tag "authorCompany"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerAuthorCompany(MElement this) :
	getTaggedValue("T3ExtensionManager", "authorCompany");

/**
 * Sets the tagged value of an existing the tag "authorCompany"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerAuthorCompany(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "authorCompany", value);

/*
- - "authorEMail" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "authorEMail" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerAuthorEMail(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "authorEMail", value);

/**
 * Checks if an element has a tagged value of the tag "authorEMail" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableAuthorEMail(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "authorEMail");
/**
 * Returns the tagged value of the tag "authorEMail"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerAuthorEMail(MElement this) :
	getTaggedValue("T3ExtensionManager", "authorEMail");

/**
 * Sets the tagged value of an existing the tag "authorEMail"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerAuthorEMail(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "authorEMail", value);

/*
- - "category" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "category" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerCategory(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "category", value);

/**
 * Checks if an element has a tagged value of the tag "category" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableCategory(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "category");
/**
 * Returns the tagged value of the tag "category"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerCategory(MElement this) :
	getTaggedValue("T3ExtensionManager", "category");

/**
 * Sets the tagged value of an existing the tag "category"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerCategory(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "category", value);

/*
- - "clearCacheOnLoad" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "clearCacheOnLoad" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerClearCacheOnLoad(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "clearCacheOnLoad", value);

/**
 * Checks if an element has a tagged value of the tag "clearCacheOnLoad" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableClearCacheOnLoad(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "clearCacheOnLoad");
/**
 * Returns the tagged value of the tag "clearCacheOnLoad"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerClearCacheOnLoad(MElement this) :
	getTaggedValue("T3ExtensionManager", "clearCacheOnLoad");

/**
 * Sets the tagged value of an existing the tag "clearCacheOnLoad"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerClearCacheOnLoad(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "clearCacheOnLoad", value);

/*
- - "conflicts" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "conflicts" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerConflicts(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "conflicts", value);

/**
 * Checks if an element has a tagged value of the tag "conflicts" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableConflicts(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "conflicts");
/**
 * Returns a list of the tagged values of the tag "conflicts"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
List[String] getT3ExtensionManagerConflicts(MElement this) : 
	getTaggedListValue("T3ExtensionManager", "conflicts");

/**
 * Sets the tagged value of an existing the tag "conflicts"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerConflicts(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "conflicts", value);

/*
- - "createDirs" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "createDirs" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerCreateDirs(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "createDirs", value);

/**
 * Checks if an element has a tagged value of the tag "createDirs" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableCreateDirs(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "createDirs");
/**
 * Returns a list of the tagged values of the tag "createDirs"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
List[String] getT3ExtensionManagerCreateDirs(MElement this) : 
	getTaggedListValue("T3ExtensionManager", "createDirs");

/**
 * Sets the tagged value of an existing the tag "createDirs"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerCreateDirs(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "createDirs", value);

/*
- - "dependencies" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "dependencies" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerDependencies(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "dependencies", value);

/**
 * Checks if an element has a tagged value of the tag "dependencies" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableDependencies(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "dependencies");
/**
 * Returns a list of the tagged values of the tag "dependencies"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
List[String] getT3ExtensionManagerDependencies(MElement this) : 
	getTaggedListValue("T3ExtensionManager", "dependencies");

/**
 * Sets the tagged value of an existing the tag "dependencies"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerDependencies(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "dependencies", value);

/*
- - "description" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "description" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerDescription(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "description", value);

/**
 * Checks if an element has a tagged value of the tag "description" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableDescription(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "description");
/**
 * Returns the tagged value of the tag "description"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerDescription(MElement this) :
	getTaggedValue("T3ExtensionManager", "description");

/**
 * Sets the tagged value of an existing the tag "description"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerDescription(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "description", value);

/*
- - "doNotLoadInFE" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "doNotLoadInFE" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerDoNotLoadInFE(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "doNotLoadInFE", value);

/**
 * Checks if an element has a tagged value of the tag "doNotLoadInFE" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableDoNotLoadInFE(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "doNotLoadInFE");
/**
 * Returns the tagged value of the tag "doNotLoadInFE"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerDoNotLoadInFE(MElement this) :
	getTaggedValue("T3ExtensionManager", "doNotLoadInFE");

/**
 * Sets the tagged value of an existing the tag "doNotLoadInFE"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerDoNotLoadInFE(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "doNotLoadInFE", value);

/*
- - "internal" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "internal" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerInternal(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "internal", value);

/**
 * Checks if an element has a tagged value of the tag "internal" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableInternal(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "internal");
/**
 * Returns the tagged value of the tag "internal"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerInternal(MElement this) :
	getTaggedValue("T3ExtensionManager", "internal");

/**
 * Sets the tagged value of an existing the tag "internal"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerInternal(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "internal", value);

/*
- - "lockType" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "lockType" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerLockType(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "lockType", value);

/**
 * Checks if an element has a tagged value of the tag "lockType" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableLockType(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "lockType");
/**
 * Returns a list of the tagged values of the tag "lockType"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
List[String] getT3ExtensionManagerLockType(MElement this) : 
	getTaggedListValue("T3ExtensionManager", "lockType");

/**
 * Sets the tagged value of an existing the tag "lockType"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerLockType(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "lockType", value);

/*
- - "modifyTables" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "modifyTables" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerModifyTables(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "modifyTables", value);

/**
 * Checks if an element has a tagged value of the tag "modifyTables" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableModifyTables(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "modifyTables");
/**
 * Returns a list of the tagged values of the tag "modifyTables"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
List[String] getT3ExtensionManagerModifyTables(MElement this) : 
	getTaggedListValue("T3ExtensionManager", "modifyTables");

/**
 * Sets the tagged value of an existing the tag "modifyTables"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerModifyTables(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "modifyTables", value);

/*
- - "priority" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "priority" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerPriority(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "priority", value);

/**
 * Checks if an element has a tagged value of the tag "priority" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizablePriority(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "priority");
/**
 * Returns the tagged value of the tag "priority"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerPriority(MElement this) :
	getTaggedValue("T3ExtensionManager", "priority");

/**
 * Sets the tagged value of an existing the tag "priority"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerPriority(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "priority", value);

/*
- - "shy" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "shy" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerShy(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "shy", value);

/**
 * Checks if an element has a tagged value of the tag "shy" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableShy(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "shy");
/**
 * Returns the tagged value of the tag "shy"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerShy(MElement this) :
	getTaggedValue("T3ExtensionManager", "shy");

/**
 * Sets the tagged value of an existing the tag "shy"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerShy(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "shy", value);

/*
- - "state" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "state" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerState(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "state", value);

/**
 * Checks if an element has a tagged value of the tag "state" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableState(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "state");
/**
 * Returns the tagged value of the tag "state"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerState(MElement this) :
	getTaggedValue("T3ExtensionManager", "state");

/**
 * Sets the tagged value of an existing the tag "state"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerState(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "state", value);

/*
- - "suggests" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "suggests" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerSuggests(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "suggests", value);

/**
 * Checks if an element has a tagged value of the tag "suggests" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableSuggests(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "suggests");
/**
 * Returns a list of the tagged values of the tag "suggests"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
List[String] getT3ExtensionManagerSuggests(MElement this) : 
	getTaggedListValue("T3ExtensionManager", "suggests");

/**
 * Sets the tagged value of an existing the tag "suggests"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerSuggests(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "suggests", value);

/*
- - "title" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "title" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerTitle(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "title", value);

/**
 * Checks if an element has a tagged value of the tag "title" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableTitle(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "title");
/**
 * Returns the tagged value of the tag "title"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerTitle(MElement this) :
	getTaggedValue("T3ExtensionManager", "title");

/**
 * Sets the tagged value of an existing the tag "title"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerTitle(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "title", value);

/*
- - "uploadFolder" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "uploadFolder" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerUploadFolder(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "uploadFolder", value);

/**
 * Checks if an element has a tagged value of the tag "uploadFolder" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableUploadFolder(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "uploadFolder");
/**
 * Returns the tagged value of the tag "uploadFolder"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerUploadFolder(MElement this) :
	getTaggedValue("T3ExtensionManager", "uploadFolder");

/**
 * Sets the tagged value of an existing the tag "uploadFolder"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerUploadFolder(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "uploadFolder", value);

/*
- - "version" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "version" 
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3ExtensionManagerVersion(MElement this, String value) :
	hasTaggedValue("T3ExtensionManager", "version", value);

/**
 * Checks if an element has a tagged value of the tag "version" 
 * for the stereotype "T3ExtensionManager" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3ExtensionManagerUtilizableVersion(MElement this) :
	hasUtilizableValue("T3ExtensionManager", "version");
/**
 * Returns the tagged value of the tag "version"
 * for the stereotype "T3ExtensionManager".
 *
 * @return	value of the tagged value
 */
String getT3ExtensionManagerVersion(MElement this) :
	getTaggedValue("T3ExtensionManager", "version");

/**
 * Sets the tagged value of an existing the tag "version"
 * for the stereotype "T3ExtensionManager".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3ExtensionManagerVersion(MElement this, String value) :
	setTaggedValue("T3ExtensionManager", "version", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3Localization"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3Localization".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3LocalizationStereotype(MElement this) :
	hasStereotype("T3Localization");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3Localization".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3LocalizationTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3Localization", tag, value);
	
/*
- - "languageKeys" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "languageKeys" 
 * for the stereotype "T3Localization".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3LocalizationLanguageKeys(MElement this, String value) :
	hasTaggedValue("T3Localization", "languageKeys", value);

/**
 * Checks if an element has a tagged value of the tag "languageKeys" 
 * for the stereotype "T3Localization" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3LocalizationUtilizableLanguageKeys(MElement this) :
	hasUtilizableValue("T3Localization", "languageKeys");
/**
 * Returns a list of the tagged values of the tag "languageKeys"
 * for the stereotype "T3Localization".
 *
 * @return	value of the tagged value
 */
List[String] getT3LocalizationLanguageKeys(MElement this) : 
	getTaggedListValue("T3Localization", "languageKeys");

/**
 * Sets the tagged value of an existing the tag "languageKeys"
 * for the stereotype "T3Localization".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3LocalizationLanguageKeys(MElement this, String value) :
	setTaggedValue("T3Localization", "languageKeys", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3Singleton"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3Singleton".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3SingletonStereotype(MElement this) :
	hasStereotype("T3Singleton");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCAAssociationType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCAAssociationType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCAAssociationTypeStereotype(MElement this) :
	hasStereotype("T3TCAAssociationType");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCAAssociationType".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAAssociationTypeTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCAAssociationType", tag, value);
	
/*
- - "columnsConfigWizardAdd" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "columnsConfigWizardAdd" 
 * for the stereotype "T3TCAAssociationType".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAAssociationTypeColumnsConfigWizardAdd(MElement this, String value) :
	hasTaggedValue("T3TCAAssociationType", "columnsConfigWizardAdd", value);

/**
 * Checks if an element has a tagged value of the tag "columnsConfigWizardAdd" 
 * for the stereotype "T3TCAAssociationType" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAAssociationTypeUtilizableColumnsConfigWizardAdd(MElement this) :
	hasUtilizableValue("T3TCAAssociationType", "columnsConfigWizardAdd");
/**
 * Returns the tagged value of the tag "columnsConfigWizardAdd"
 * for the stereotype "T3TCAAssociationType".
 *
 * @return	value of the tagged value
 */
String getT3TCAAssociationTypeColumnsConfigWizardAdd(MElement this) :
	getTaggedValue("T3TCAAssociationType", "columnsConfigWizardAdd");

/**
 * Sets the tagged value of an existing the tag "columnsConfigWizardAdd"
 * for the stereotype "T3TCAAssociationType".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAAssociationTypeColumnsConfigWizardAdd(MElement this, String value) :
	setTaggedValue("T3TCAAssociationType", "columnsConfigWizardAdd", value);

/*
- - "columnsConfigWizardEdit" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "columnsConfigWizardEdit" 
 * for the stereotype "T3TCAAssociationType".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAAssociationTypeColumnsConfigWizardEdit(MElement this, String value) :
	hasTaggedValue("T3TCAAssociationType", "columnsConfigWizardEdit", value);

/**
 * Checks if an element has a tagged value of the tag "columnsConfigWizardEdit" 
 * for the stereotype "T3TCAAssociationType" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAAssociationTypeUtilizableColumnsConfigWizardEdit(MElement this) :
	hasUtilizableValue("T3TCAAssociationType", "columnsConfigWizardEdit");
/**
 * Returns the tagged value of the tag "columnsConfigWizardEdit"
 * for the stereotype "T3TCAAssociationType".
 *
 * @return	value of the tagged value
 */
String getT3TCAAssociationTypeColumnsConfigWizardEdit(MElement this) :
	getTaggedValue("T3TCAAssociationType", "columnsConfigWizardEdit");

/**
 * Sets the tagged value of an existing the tag "columnsConfigWizardEdit"
 * for the stereotype "T3TCAAssociationType".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAAssociationTypeColumnsConfigWizardEdit(MElement this, String value) :
	setTaggedValue("T3TCAAssociationType", "columnsConfigWizardEdit", value);

/*
- - "columnsConfigWizardSuggest" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "columnsConfigWizardSuggest" 
 * for the stereotype "T3TCAAssociationType".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAAssociationTypeColumnsConfigWizardSuggest(MElement this, String value) :
	hasTaggedValue("T3TCAAssociationType", "columnsConfigWizardSuggest", value);

/**
 * Checks if an element has a tagged value of the tag "columnsConfigWizardSuggest" 
 * for the stereotype "T3TCAAssociationType" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAAssociationTypeUtilizableColumnsConfigWizardSuggest(MElement this) :
	hasUtilizableValue("T3TCAAssociationType", "columnsConfigWizardSuggest");
/**
 * Returns the tagged value of the tag "columnsConfigWizardSuggest"
 * for the stereotype "T3TCAAssociationType".
 *
 * @return	value of the tagged value
 */
String getT3TCAAssociationTypeColumnsConfigWizardSuggest(MElement this) :
	getTaggedValue("T3TCAAssociationType", "columnsConfigWizardSuggest");

/**
 * Sets the tagged value of an existing the tag "columnsConfigWizardSuggest"
 * for the stereotype "T3TCAAssociationType".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAAssociationTypeColumnsConfigWizardSuggest(MElement this, String value) :
	setTaggedValue("T3TCAAssociationType", "columnsConfigWizardSuggest", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCACheckType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCACheckType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCACheckTypeStereotype(MElement this) :
	hasStereotype("T3TCACheckType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCAClass"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCAClass".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCAClassStereotype(MElement this) :
	hasStereotype("T3TCAClass");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCAClass".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCAClass", tag, value);
	
/*
- - "ctrlLabel" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "ctrlLabel" 
 * for the stereotype "T3TCAClass".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassCtrlLabel(MElement this, String value) :
	hasTaggedValue("T3TCAClass", "ctrlLabel", value);

/**
 * Checks if an element has a tagged value of the tag "ctrlLabel" 
 * for the stereotype "T3TCAClass" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAClassUtilizableCtrlLabel(MElement this) :
	hasUtilizableValue("T3TCAClass", "ctrlLabel");
/**
 * Returns the tagged value of the tag "ctrlLabel"
 * for the stereotype "T3TCAClass".
 *
 * @return	value of the tagged value
 */
String getT3TCAClassCtrlLabel(MElement this) :
	getTaggedValue("T3TCAClass", "ctrlLabel");

/**
 * Sets the tagged value of an existing the tag "ctrlLabel"
 * for the stereotype "T3TCAClass".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAClassCtrlLabel(MElement this, String value) :
	setTaggedValue("T3TCAClass", "ctrlLabel", value);

/*
- - "ctrlLabelAlt" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "ctrlLabelAlt" 
 * for the stereotype "T3TCAClass".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassCtrlLabelAlt(MElement this, String value) :
	hasTaggedValue("T3TCAClass", "ctrlLabelAlt", value);

/**
 * Checks if an element has a tagged value of the tag "ctrlLabelAlt" 
 * for the stereotype "T3TCAClass" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAClassUtilizableCtrlLabelAlt(MElement this) :
	hasUtilizableValue("T3TCAClass", "ctrlLabelAlt");
/**
 * Returns a list of the tagged values of the tag "ctrlLabelAlt"
 * for the stereotype "T3TCAClass".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCAClassCtrlLabelAlt(MElement this) : 
	getTaggedListValue("T3TCAClass", "ctrlLabelAlt");

/**
 * Sets the tagged value of an existing the tag "ctrlLabelAlt"
 * for the stereotype "T3TCAClass".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAClassCtrlLabelAlt(MElement this, String value) :
	setTaggedValue("T3TCAClass", "ctrlLabelAlt", value);

/*
- - "ctrlLabelAltForce" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "ctrlLabelAltForce" 
 * for the stereotype "T3TCAClass".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassCtrlLabelAltForce(MElement this, String value) :
	hasTaggedValue("T3TCAClass", "ctrlLabelAltForce", value);

/**
 * Checks if an element has a tagged value of the tag "ctrlLabelAltForce" 
 * for the stereotype "T3TCAClass" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAClassUtilizableCtrlLabelAltForce(MElement this) :
	hasUtilizableValue("T3TCAClass", "ctrlLabelAltForce");
/**
 * Returns the tagged value of the tag "ctrlLabelAltForce"
 * for the stereotype "T3TCAClass".
 *
 * @return	value of the tagged value
 */
String getT3TCAClassCtrlLabelAltForce(MElement this) :
	getTaggedValue("T3TCAClass", "ctrlLabelAltForce");

/**
 * Sets the tagged value of an existing the tag "ctrlLabelAltForce"
 * for the stereotype "T3TCAClass".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAClassCtrlLabelAltForce(MElement this, String value) :
	setTaggedValue("T3TCAClass", "ctrlLabelAltForce", value);

/*
- - "ctrlSectionAdditions" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "ctrlSectionAdditions" 
 * for the stereotype "T3TCAClass".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassCtrlSectionAdditions(MElement this, String value) :
	hasTaggedValue("T3TCAClass", "ctrlSectionAdditions", value);

/**
 * Checks if an element has a tagged value of the tag "ctrlSectionAdditions" 
 * for the stereotype "T3TCAClass" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAClassUtilizableCtrlSectionAdditions(MElement this) :
	hasUtilizableValue("T3TCAClass", "ctrlSectionAdditions");
/**
 * Returns a list of the tagged values of the tag "ctrlSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCAClassCtrlSectionAdditions(MElement this) : 
	getTaggedListValue("T3TCAClass", "ctrlSectionAdditions");

/**
 * Sets the tagged value of an existing the tag "ctrlSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAClassCtrlSectionAdditions(MElement this, String value) :
	setTaggedValue("T3TCAClass", "ctrlSectionAdditions", value);

/*
- - "interfaceSectionAdditions" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "interfaceSectionAdditions" 
 * for the stereotype "T3TCAClass".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassInterfaceSectionAdditions(MElement this, String value) :
	hasTaggedValue("T3TCAClass", "interfaceSectionAdditions", value);

/**
 * Checks if an element has a tagged value of the tag "interfaceSectionAdditions" 
 * for the stereotype "T3TCAClass" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAClassUtilizableInterfaceSectionAdditions(MElement this) :
	hasUtilizableValue("T3TCAClass", "interfaceSectionAdditions");
/**
 * Returns a list of the tagged values of the tag "interfaceSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCAClassInterfaceSectionAdditions(MElement this) : 
	getTaggedListValue("T3TCAClass", "interfaceSectionAdditions");

/**
 * Sets the tagged value of an existing the tag "interfaceSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAClassInterfaceSectionAdditions(MElement this, String value) :
	setTaggedValue("T3TCAClass", "interfaceSectionAdditions", value);

/*
- - "palettesSectionAdditions" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "palettesSectionAdditions" 
 * for the stereotype "T3TCAClass".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassPalettesSectionAdditions(MElement this, String value) :
	hasTaggedValue("T3TCAClass", "palettesSectionAdditions", value);

/**
 * Checks if an element has a tagged value of the tag "palettesSectionAdditions" 
 * for the stereotype "T3TCAClass" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAClassUtilizablePalettesSectionAdditions(MElement this) :
	hasUtilizableValue("T3TCAClass", "palettesSectionAdditions");
/**
 * Returns a list of the tagged values of the tag "palettesSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCAClassPalettesSectionAdditions(MElement this) : 
	getTaggedListValue("T3TCAClass", "palettesSectionAdditions");

/**
 * Sets the tagged value of an existing the tag "palettesSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAClassPalettesSectionAdditions(MElement this, String value) :
	setTaggedValue("T3TCAClass", "palettesSectionAdditions", value);

/*
- - "typesSectionAdditions" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "typesSectionAdditions" 
 * for the stereotype "T3TCAClass".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAClassTypesSectionAdditions(MElement this, String value) :
	hasTaggedValue("T3TCAClass", "typesSectionAdditions", value);

/**
 * Checks if an element has a tagged value of the tag "typesSectionAdditions" 
 * for the stereotype "T3TCAClass" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAClassUtilizableTypesSectionAdditions(MElement this) :
	hasUtilizableValue("T3TCAClass", "typesSectionAdditions");
/**
 * Returns a list of the tagged values of the tag "typesSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCAClassTypesSectionAdditions(MElement this) : 
	getTaggedListValue("T3TCAClass", "typesSectionAdditions");

/**
 * Sets the tagged value of an existing the tag "typesSectionAdditions"
 * for the stereotype "T3TCAClass".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAClassTypesSectionAdditions(MElement this, String value) :
	setTaggedValue("T3TCAClass", "typesSectionAdditions", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCADBType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCADBType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCADBTypeStereotype(MElement this) :
	hasStereotype("T3TCADBType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCADateTimeType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCADateTimeType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCADateTimeTypeStereotype(MElement this) :
	hasStereotype("T3TCADateTimeType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCAFileType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCAFileType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCAFileTypeStereotype(MElement this) :
	hasStereotype("T3TCAFileType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCAFolderType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCAFolderType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCAFolderTypeStereotype(MElement this) :
	hasStereotype("T3TCAFolderType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCAInputType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCAInputType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCAInputTypeStereotype(MElement this) :
	hasStereotype("T3TCAInputType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCANumberType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCANumberType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCANumberTypeStereotype(MElement this) :
	hasStereotype("T3TCANumberType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCAOtherType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCAOtherType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCAOtherTypeStereotype(MElement this) :
	hasStereotype("T3TCAOtherType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCAProperty"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCAProperty".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCAPropertyStereotype(MElement this) :
	hasStereotype("T3TCAProperty");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCAProperty".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCAProperty", tag, value);
	
/*
- - "columnsConfigAdditions" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "columnsConfigAdditions" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyColumnsConfigAdditions(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "columnsConfigAdditions", value);

/**
 * Checks if an element has a tagged value of the tag "columnsConfigAdditions" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableColumnsConfigAdditions(MElement this) :
	hasUtilizableValue("T3TCAProperty", "columnsConfigAdditions");
/**
 * Returns a list of the tagged values of the tag "columnsConfigAdditions"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCAPropertyColumnsConfigAdditions(MElement this) : 
	getTaggedListValue("T3TCAProperty", "columnsConfigAdditions");

/**
 * Sets the tagged value of an existing the tag "columnsConfigAdditions"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyColumnsConfigAdditions(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "columnsConfigAdditions", value);

/*
- - "columnsDefaultExtras" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "columnsDefaultExtras" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyColumnsDefaultExtras(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "columnsDefaultExtras", value);

/**
 * Checks if an element has a tagged value of the tag "columnsDefaultExtras" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableColumnsDefaultExtras(MElement this) :
	hasUtilizableValue("T3TCAProperty", "columnsDefaultExtras");
/**
 * Returns the tagged value of the tag "columnsDefaultExtras"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
String getT3TCAPropertyColumnsDefaultExtras(MElement this) :
	getTaggedValue("T3TCAProperty", "columnsDefaultExtras");

/**
 * Sets the tagged value of an existing the tag "columnsDefaultExtras"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyColumnsDefaultExtras(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "columnsDefaultExtras", value);

/*
- - "columnsExclude" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "columnsExclude" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyColumnsExclude(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "columnsExclude", value);

/**
 * Checks if an element has a tagged value of the tag "columnsExclude" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableColumnsExclude(MElement this) :
	hasUtilizableValue("T3TCAProperty", "columnsExclude");
/**
 * Returns the tagged value of the tag "columnsExclude"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
String getT3TCAPropertyColumnsExclude(MElement this) :
	getTaggedValue("T3TCAProperty", "columnsExclude");

/**
 * Sets the tagged value of an existing the tag "columnsExclude"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyColumnsExclude(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "columnsExclude", value);

/*
- - "columnsSectionAdditions" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "columnsSectionAdditions" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyColumnsSectionAdditions(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "columnsSectionAdditions", value);

/**
 * Checks if an element has a tagged value of the tag "columnsSectionAdditions" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableColumnsSectionAdditions(MElement this) :
	hasUtilizableValue("T3TCAProperty", "columnsSectionAdditions");
/**
 * Returns a list of the tagged values of the tag "columnsSectionAdditions"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCAPropertyColumnsSectionAdditions(MElement this) : 
	getTaggedListValue("T3TCAProperty", "columnsSectionAdditions");

/**
 * Sets the tagged value of an existing the tag "columnsSectionAdditions"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyColumnsSectionAdditions(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "columnsSectionAdditions", value);

/*
- - "typesAltLabel" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "typesAltLabel" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyTypesAltLabel(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "typesAltLabel", value);

/**
 * Checks if an element has a tagged value of the tag "typesAltLabel" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableTypesAltLabel(MElement this) :
	hasUtilizableValue("T3TCAProperty", "typesAltLabel");
/**
 * Returns the tagged value of the tag "typesAltLabel"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
String getT3TCAPropertyTypesAltLabel(MElement this) :
	getTaggedValue("T3TCAProperty", "typesAltLabel");

/**
 * Sets the tagged value of an existing the tag "typesAltLabel"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyTypesAltLabel(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "typesAltLabel", value);

/*
- - "typesFormStyleCodes" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "typesFormStyleCodes" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyTypesFormStyleCodes(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "typesFormStyleCodes", value);

/**
 * Checks if an element has a tagged value of the tag "typesFormStyleCodes" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableTypesFormStyleCodes(MElement this) :
	hasUtilizableValue("T3TCAProperty", "typesFormStyleCodes");
/**
 * Returns the tagged value of the tag "typesFormStyleCodes"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
String getT3TCAPropertyTypesFormStyleCodes(MElement this) :
	getTaggedValue("T3TCAProperty", "typesFormStyleCodes");

/**
 * Sets the tagged value of an existing the tag "typesFormStyleCodes"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyTypesFormStyleCodes(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "typesFormStyleCodes", value);

/*
- - "typesPaletteNumber" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "typesPaletteNumber" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyTypesPaletteNumber(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "typesPaletteNumber", value);

/**
 * Checks if an element has a tagged value of the tag "typesPaletteNumber" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableTypesPaletteNumber(MElement this) :
	hasUtilizableValue("T3TCAProperty", "typesPaletteNumber");
/**
 * Returns the tagged value of the tag "typesPaletteNumber"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
String getT3TCAPropertyTypesPaletteNumber(MElement this) :
	getTaggedValue("T3TCAProperty", "typesPaletteNumber");

/**
 * Sets the tagged value of an existing the tag "typesPaletteNumber"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyTypesPaletteNumber(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "typesPaletteNumber", value);

/*
- - "typesSpecialConfiguration" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "typesSpecialConfiguration" 
 * for the stereotype "T3TCAProperty".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCAPropertyTypesSpecialConfiguration(MElement this, String value) :
	hasTaggedValue("T3TCAProperty", "typesSpecialConfiguration", value);

/**
 * Checks if an element has a tagged value of the tag "typesSpecialConfiguration" 
 * for the stereotype "T3TCAProperty" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCAPropertyUtilizableTypesSpecialConfiguration(MElement this) :
	hasUtilizableValue("T3TCAProperty", "typesSpecialConfiguration");
/**
 * Returns the tagged value of the tag "typesSpecialConfiguration"
 * for the stereotype "T3TCAProperty".
 *
 * @return	value of the tagged value
 */
String getT3TCAPropertyTypesSpecialConfiguration(MElement this) :
	getTaggedValue("T3TCAProperty", "typesSpecialConfiguration");

/**
 * Sets the tagged value of an existing the tag "typesSpecialConfiguration"
 * for the stereotype "T3TCAProperty".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCAPropertyTypesSpecialConfiguration(MElement this, String value) :
	setTaggedValue("T3TCAProperty", "typesSpecialConfiguration", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCARadioType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCARadioType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCARadioTypeStereotype(MElement this) :
	hasStereotype("T3TCARadioType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCASelectType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCASelectType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCASelectTypeStereotype(MElement this) :
	hasStereotype("T3TCASelectType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCATextType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCATextType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCATextTypeStereotype(MElement this) :
	hasStereotype("T3TCATextType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCECheckType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCECheckType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCECheckTypeStereotype(MElement this) :
	hasStereotype("T3TCECheckType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCEDBType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCEDBType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCEDBTypeStereotype(MElement this) :
	hasStereotype("T3TCEDBType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCEDateTimeType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCEDateTimeType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCEDateTimeTypeStereotype(MElement this) :
	hasStereotype("T3TCEDateTimeType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCEFileType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCEFileType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCEFileTypeStereotype(MElement this) :
	hasStereotype("T3TCEFileType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCEFolderType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCEFolderType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCEFolderTypeStereotype(MElement this) :
	hasStereotype("T3TCEFolderType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCEInputType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCEInputType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCEInputTypeStereotype(MElement this) :
	hasStereotype("T3TCEInputType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCENumberType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCENumberType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCENumberTypeStereotype(MElement this) :
	hasStereotype("T3TCENumberType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCEOption"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCEOption".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCEOptionStereotype(MElement this) :
	hasStereotype("T3TCEOption");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCEOption".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCEOptionTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCEOption", tag, value);
	
/*
- - "sheet" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "sheet" 
 * for the stereotype "T3TCEOption".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCEOptionSheet(MElement this, String value) :
	hasTaggedValue("T3TCEOption", "sheet", value);

/**
 * Checks if an element has a tagged value of the tag "sheet" 
 * for the stereotype "T3TCEOption" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCEOptionUtilizableSheet(MElement this) :
	hasUtilizableValue("T3TCEOption", "sheet");
/**
 * Returns the tagged value of the tag "sheet"
 * for the stereotype "T3TCEOption".
 *
 * @return	value of the tagged value
 */
String getT3TCEOptionSheet(MElement this) :
	getTaggedValue("T3TCEOption", "sheet");

/**
 * Sets the tagged value of an existing the tag "sheet"
 * for the stereotype "T3TCEOption".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCEOptionSheet(MElement this, String value) :
	setTaggedValue("T3TCEOption", "sheet", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCEOtherType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCEOtherType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCEOtherTypeStereotype(MElement this) :
	hasStereotype("T3TCEOtherType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCERadioType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCERadioType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCERadioTypeStereotype(MElement this) :
	hasStereotype("T3TCERadioType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCESelectType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCESelectType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCESelectTypeStereotype(MElement this) :
	hasStereotype("T3TCESelectType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCETextType"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCETextType".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCETextTypeStereotype(MElement this) :
	hasStereotype("T3TCETextType");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxAllowed"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxAllowed".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxAllowedStereotype(MElement this) :
	hasStereotype("T3TCxAllowed");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxAllowed".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxAllowedTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxAllowed", tag, value);
	
/*
- - "allowed" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "allowed" 
 * for the stereotype "T3TCxAllowed".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxAllowedAllowed(MElement this, String value) :
	hasTaggedValue("T3TCxAllowed", "allowed", value);

/**
 * Checks if an element has a tagged value of the tag "allowed" 
 * for the stereotype "T3TCxAllowed" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxAllowedUtilizableAllowed(MElement this) :
	hasUtilizableValue("T3TCxAllowed", "allowed");
/**
 * Returns the tagged value of the tag "allowed"
 * for the stereotype "T3TCxAllowed".
 *
 * @return	value of the tagged value
 */
String getT3TCxAllowedAllowed(MElement this) :
	getTaggedValue("T3TCxAllowed", "allowed");

/**
 * Sets the tagged value of an existing the tag "allowed"
 * for the stereotype "T3TCxAllowed".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxAllowedAllowed(MElement this, String value) :
	setTaggedValue("T3TCxAllowed", "allowed", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxAutoMaxSize"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxAutoMaxSize".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxAutoMaxSizeStereotype(MElement this) :
	hasStereotype("T3TCxAutoMaxSize");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxAutoMaxSize".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxAutoMaxSizeTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxAutoMaxSize", tag, value);
	
/*
- - "autoMaxSize" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "autoMaxSize" 
 * for the stereotype "T3TCxAutoMaxSize".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxAutoMaxSizeAutoMaxSize(MElement this, String value) :
	hasTaggedValue("T3TCxAutoMaxSize", "autoMaxSize", value);

/**
 * Checks if an element has a tagged value of the tag "autoMaxSize" 
 * for the stereotype "T3TCxAutoMaxSize" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxAutoMaxSizeUtilizableAutoMaxSize(MElement this) :
	hasUtilizableValue("T3TCxAutoMaxSize", "autoMaxSize");
/**
 * Returns the tagged value of the tag "autoMaxSize"
 * for the stereotype "T3TCxAutoMaxSize".
 *
 * @return	value of the tagged value
 */
String getT3TCxAutoMaxSizeAutoMaxSize(MElement this) :
	getTaggedValue("T3TCxAutoMaxSize", "autoMaxSize");

/**
 * Sets the tagged value of an existing the tag "autoMaxSize"
 * for the stereotype "T3TCxAutoMaxSize".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxAutoMaxSizeAutoMaxSize(MElement this, String value) :
	setTaggedValue("T3TCxAutoMaxSize", "autoMaxSize", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxCols"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxCols".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxColsStereotype(MElement this) :
	hasStereotype("T3TCxCols");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxCols".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxColsTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxCols", tag, value);
	
/*
- - "cols" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "cols" 
 * for the stereotype "T3TCxCols".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxColsCols(MElement this, String value) :
	hasTaggedValue("T3TCxCols", "cols", value);

/**
 * Checks if an element has a tagged value of the tag "cols" 
 * for the stereotype "T3TCxCols" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxColsUtilizableCols(MElement this) :
	hasUtilizableValue("T3TCxCols", "cols");
/**
 * Returns the tagged value of the tag "cols"
 * for the stereotype "T3TCxCols".
 *
 * @return	value of the tagged value
 */
String getT3TCxColsCols(MElement this) :
	getTaggedValue("T3TCxCols", "cols");

/**
 * Sets the tagged value of an existing the tag "cols"
 * for the stereotype "T3TCxCols".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxColsCols(MElement this, String value) :
	setTaggedValue("T3TCxCols", "cols", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxDisallowed"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxDisallowed".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxDisallowedStereotype(MElement this) :
	hasStereotype("T3TCxDisallowed");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxDisallowed".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxDisallowedTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxDisallowed", tag, value);
	
/*
- - "disallowed" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "disallowed" 
 * for the stereotype "T3TCxDisallowed".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxDisallowedDisallowed(MElement this, String value) :
	hasTaggedValue("T3TCxDisallowed", "disallowed", value);

/**
 * Checks if an element has a tagged value of the tag "disallowed" 
 * for the stereotype "T3TCxDisallowed" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxDisallowedUtilizableDisallowed(MElement this) :
	hasUtilizableValue("T3TCxDisallowed", "disallowed");
/**
 * Returns the tagged value of the tag "disallowed"
 * for the stereotype "T3TCxDisallowed".
 *
 * @return	value of the tagged value
 */
String getT3TCxDisallowedDisallowed(MElement this) :
	getTaggedValue("T3TCxDisallowed", "disallowed");

/**
 * Sets the tagged value of an existing the tag "disallowed"
 * for the stereotype "T3TCxDisallowed".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxDisallowedDisallowed(MElement this, String value) :
	setTaggedValue("T3TCxDisallowed", "disallowed", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxEval"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxEval".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxEvalStereotype(MElement this) :
	hasStereotype("T3TCxEval");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxEval".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxEvalTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxEval", tag, value);
	
/*
- - "evals" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "evals" 
 * for the stereotype "T3TCxEval".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxEvalEvals(MElement this, String value) :
	hasTaggedValue("T3TCxEval", "evals", value);

/**
 * Checks if an element has a tagged value of the tag "evals" 
 * for the stereotype "T3TCxEval" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxEvalUtilizableEvals(MElement this) :
	hasUtilizableValue("T3TCxEval", "evals");
/**
 * Returns a list of the tagged values of the tag "evals"
 * for the stereotype "T3TCxEval".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCxEvalEvals(MElement this) : 
	getTaggedListValue("T3TCxEval", "evals");

/**
 * Sets the tagged value of an existing the tag "evals"
 * for the stereotype "T3TCxEval".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxEvalEvals(MElement this, String value) :
	setTaggedValue("T3TCxEval", "evals", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxItems"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxItems".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxItemsStereotype(MElement this) :
	hasStereotype("T3TCxItems");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxItems".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxItemsTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxItems", tag, value);
	
/*
- - "items" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "items" 
 * for the stereotype "T3TCxItems".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxItemsItems(MElement this, String value) :
	hasTaggedValue("T3TCxItems", "items", value);

/**
 * Checks if an element has a tagged value of the tag "items" 
 * for the stereotype "T3TCxItems" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxItemsUtilizableItems(MElement this) :
	hasUtilizableValue("T3TCxItems", "items");
/**
 * Returns a list of the tagged values of the tag "items"
 * for the stereotype "T3TCxItems".
 *
 * @return	value of the tagged value
 */
List[String] getT3TCxItemsItems(MElement this) : 
	getTaggedListValue("T3TCxItems", "items");

/**
 * Sets the tagged value of an existing the tag "items"
 * for the stereotype "T3TCxItems".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxItemsItems(MElement this, String value) :
	setTaggedValue("T3TCxItems", "items", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxMax"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxMax".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxMaxStereotype(MElement this) :
	hasStereotype("T3TCxMax");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxMax".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMaxTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxMax", tag, value);
	
/*
- - "max" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "max" 
 * for the stereotype "T3TCxMax".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMaxMax(MElement this, String value) :
	hasTaggedValue("T3TCxMax", "max", value);

/**
 * Checks if an element has a tagged value of the tag "max" 
 * for the stereotype "T3TCxMax" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxMaxUtilizableMax(MElement this) :
	hasUtilizableValue("T3TCxMax", "max");
/**
 * Returns the tagged value of the tag "max"
 * for the stereotype "T3TCxMax".
 *
 * @return	value of the tagged value
 */
String getT3TCxMaxMax(MElement this) :
	getTaggedValue("T3TCxMax", "max");

/**
 * Sets the tagged value of an existing the tag "max"
 * for the stereotype "T3TCxMax".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxMaxMax(MElement this, String value) :
	setTaggedValue("T3TCxMax", "max", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxMaxSize"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxMaxSize".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxMaxSizeStereotype(MElement this) :
	hasStereotype("T3TCxMaxSize");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxMaxSize".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMaxSizeTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxMaxSize", tag, value);
	
/*
- - "maxSize" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "maxSize" 
 * for the stereotype "T3TCxMaxSize".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMaxSizeMaxSize(MElement this, String value) :
	hasTaggedValue("T3TCxMaxSize", "maxSize", value);

/**
 * Checks if an element has a tagged value of the tag "maxSize" 
 * for the stereotype "T3TCxMaxSize" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxMaxSizeUtilizableMaxSize(MElement this) :
	hasUtilizableValue("T3TCxMaxSize", "maxSize");
/**
 * Returns the tagged value of the tag "maxSize"
 * for the stereotype "T3TCxMaxSize".
 *
 * @return	value of the tagged value
 */
String getT3TCxMaxSizeMaxSize(MElement this) :
	getTaggedValue("T3TCxMaxSize", "maxSize");

/**
 * Sets the tagged value of an existing the tag "maxSize"
 * for the stereotype "T3TCxMaxSize".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxMaxSizeMaxSize(MElement this, String value) :
	setTaggedValue("T3TCxMaxSize", "maxSize", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxMaxitems"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxMaxitems".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxMaxitemsStereotype(MElement this) :
	hasStereotype("T3TCxMaxitems");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxMaxitems".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMaxitemsTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxMaxitems", tag, value);
	
/*
- - "maxitems" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "maxitems" 
 * for the stereotype "T3TCxMaxitems".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMaxitemsMaxitems(MElement this, String value) :
	hasTaggedValue("T3TCxMaxitems", "maxitems", value);

/**
 * Checks if an element has a tagged value of the tag "maxitems" 
 * for the stereotype "T3TCxMaxitems" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxMaxitemsUtilizableMaxitems(MElement this) :
	hasUtilizableValue("T3TCxMaxitems", "maxitems");
/**
 * Returns the tagged value of the tag "maxitems"
 * for the stereotype "T3TCxMaxitems".
 *
 * @return	value of the tagged value
 */
String getT3TCxMaxitemsMaxitems(MElement this) :
	getTaggedValue("T3TCxMaxitems", "maxitems");

/**
 * Sets the tagged value of an existing the tag "maxitems"
 * for the stereotype "T3TCxMaxitems".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxMaxitemsMaxitems(MElement this, String value) :
	setTaggedValue("T3TCxMaxitems", "maxitems", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxMinitems"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxMinitems".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxMinitemsStereotype(MElement this) :
	hasStereotype("T3TCxMinitems");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxMinitems".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMinitemsTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxMinitems", tag, value);
	
/*
- - "minitems" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "minitems" 
 * for the stereotype "T3TCxMinitems".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxMinitemsMinitems(MElement this, String value) :
	hasTaggedValue("T3TCxMinitems", "minitems", value);

/**
 * Checks if an element has a tagged value of the tag "minitems" 
 * for the stereotype "T3TCxMinitems" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxMinitemsUtilizableMinitems(MElement this) :
	hasUtilizableValue("T3TCxMinitems", "minitems");
/**
 * Returns the tagged value of the tag "minitems"
 * for the stereotype "T3TCxMinitems".
 *
 * @return	value of the tagged value
 */
String getT3TCxMinitemsMinitems(MElement this) :
	getTaggedValue("T3TCxMinitems", "minitems");

/**
 * Sets the tagged value of an existing the tag "minitems"
 * for the stereotype "T3TCxMinitems".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxMinitemsMinitems(MElement this, String value) :
	setTaggedValue("T3TCxMinitems", "minitems", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxPrependTname"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxPrependTname".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxPrependTnameStereotype(MElement this) :
	hasStereotype("T3TCxPrependTname");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxPrependTname".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxPrependTnameTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxPrependTname", tag, value);
	
/*
- - "prependTname" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "prependTname" 
 * for the stereotype "T3TCxPrependTname".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxPrependTnamePrependTname(MElement this, String value) :
	hasTaggedValue("T3TCxPrependTname", "prependTname", value);

/**
 * Checks if an element has a tagged value of the tag "prependTname" 
 * for the stereotype "T3TCxPrependTname" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxPrependTnameUtilizablePrependTname(MElement this) :
	hasUtilizableValue("T3TCxPrependTname", "prependTname");
/**
 * Returns the tagged value of the tag "prependTname"
 * for the stereotype "T3TCxPrependTname".
 *
 * @return	value of the tagged value
 */
String getT3TCxPrependTnamePrependTname(MElement this) :
	getTaggedValue("T3TCxPrependTname", "prependTname");

/**
 * Sets the tagged value of an existing the tag "prependTname"
 * for the stereotype "T3TCxPrependTname".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxPrependTnamePrependTname(MElement this, String value) :
	setTaggedValue("T3TCxPrependTname", "prependTname", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxRows"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxRows".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxRowsStereotype(MElement this) :
	hasStereotype("T3TCxRows");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxRows".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxRowsTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxRows", tag, value);
	
/*
- - "rows" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "rows" 
 * for the stereotype "T3TCxRows".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxRowsRows(MElement this, String value) :
	hasTaggedValue("T3TCxRows", "rows", value);

/**
 * Checks if an element has a tagged value of the tag "rows" 
 * for the stereotype "T3TCxRows" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxRowsUtilizableRows(MElement this) :
	hasUtilizableValue("T3TCxRows", "rows");
/**
 * Returns the tagged value of the tag "rows"
 * for the stereotype "T3TCxRows".
 *
 * @return	value of the tagged value
 */
String getT3TCxRowsRows(MElement this) :
	getTaggedValue("T3TCxRows", "rows");

/**
 * Sets the tagged value of an existing the tag "rows"
 * for the stereotype "T3TCxRows".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxRowsRows(MElement this, String value) :
	setTaggedValue("T3TCxRows", "rows", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxShowThumbs"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxShowThumbs".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxShowThumbsStereotype(MElement this) :
	hasStereotype("T3TCxShowThumbs");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxShowThumbs".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxShowThumbsTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxShowThumbs", tag, value);
	
/*
- - "showThumbs" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "showThumbs" 
 * for the stereotype "T3TCxShowThumbs".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxShowThumbsShowThumbs(MElement this, String value) :
	hasTaggedValue("T3TCxShowThumbs", "showThumbs", value);

/**
 * Checks if an element has a tagged value of the tag "showThumbs" 
 * for the stereotype "T3TCxShowThumbs" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxShowThumbsUtilizableShowThumbs(MElement this) :
	hasUtilizableValue("T3TCxShowThumbs", "showThumbs");
/**
 * Returns the tagged value of the tag "showThumbs"
 * for the stereotype "T3TCxShowThumbs".
 *
 * @return	value of the tagged value
 */
String getT3TCxShowThumbsShowThumbs(MElement this) :
	getTaggedValue("T3TCxShowThumbs", "showThumbs");

/**
 * Sets the tagged value of an existing the tag "showThumbs"
 * for the stereotype "T3TCxShowThumbs".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxShowThumbsShowThumbs(MElement this, String value) :
	setTaggedValue("T3TCxShowThumbs", "showThumbs", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxSize"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxSize".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxSizeStereotype(MElement this) :
	hasStereotype("T3TCxSize");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxSize".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxSizeTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxSize", tag, value);
	
/*
- - "size" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "size" 
 * for the stereotype "T3TCxSize".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxSizeSize(MElement this, String value) :
	hasTaggedValue("T3TCxSize", "size", value);

/**
 * Checks if an element has a tagged value of the tag "size" 
 * for the stereotype "T3TCxSize" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxSizeUtilizableSize(MElement this) :
	hasUtilizableValue("T3TCxSize", "size");
/**
 * Returns the tagged value of the tag "size"
 * for the stereotype "T3TCxSize".
 *
 * @return	value of the tagged value
 */
String getT3TCxSizeSize(MElement this) :
	getTaggedValue("T3TCxSize", "size");

/**
 * Sets the tagged value of an existing the tag "size"
 * for the stereotype "T3TCxSize".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxSizeSize(MElement this, String value) :
	setTaggedValue("T3TCxSize", "size", value);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Xtend scripts for stereotype "T3TCxUploadfolder"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element is annotated with stereotype "T3TCxUploadfolder".
 * 
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasT3TCxUploadfolderStereotype(MElement this) :
	hasStereotype("T3TCxUploadfolder");

/**
 * Checks if an element has a tagged value of a tag 
 * for the stereotype "T3TCxUploadfolder".
 *
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxUploadfolderTaggedValue(MElement this, String tag, String value) :
	hasTaggedValue("T3TCxUploadfolder", tag, value);
	
/*
- - "uploadfolder" - - - - - - - - - -
*/
	
/**
 * Checks if an element has a tagged value of the tag "uploadfolder" 
 * for the stereotype "T3TCxUploadfolder".
 *
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasT3TCxUploadfolderUploadfolder(MElement this, String value) :
	hasTaggedValue("T3TCxUploadfolder", "uploadfolder", value);

/**
 * Checks if an element has a tagged value of the tag "uploadfolder" 
 * for the stereotype "T3TCxUploadfolder" and 
 * the value is utilizable (not empty or null).
 *
 * @return	true if the element has a tag and is utilizable, otherwise false
 */
boolean hasT3TCxUploadfolderUtilizableUploadfolder(MElement this) :
	hasUtilizableValue("T3TCxUploadfolder", "uploadfolder");
/**
 * Returns the tagged value of the tag "uploadfolder"
 * for the stereotype "T3TCxUploadfolder".
 *
 * @return	value of the tagged value
 */
String getT3TCxUploadfolderUploadfolder(MElement this) :
	getTaggedValue("T3TCxUploadfolder", "uploadfolder");

/**
 * Sets the tagged value of an existing the tag "uploadfolder"
 * for the stereotype "T3TCxUploadfolder".
 *
 * @param	value	the new value of a tagged value
 */
Void setT3TCxUploadfolderUploadfolder(MElement this, String value) :
	setTaggedValue("T3TCxUploadfolder", "uploadfolder", value);

