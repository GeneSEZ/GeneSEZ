/**
 * Additions of the model before generation of source code.  
 *  
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-07-14
 */

//	based on genesez meta model
import gcore;

// use common logging scripts
extension de::genesez::platforms::common::log::Log;

// use GeneSEZ profile scripts
extension de::genesez::platforms::common::genesez::profile::Profile;

// use TYPO3 Extbase profile + access helper scripts
extension de::genesez::platform::typo3::extbase::profile::Profile;
extension de::genesez::platform::typo3::extbase::profile::AccessHelper;

// use TYPO3 Extbase naming scripts
extension de::genesez::platform::typo3::extbase::convention::Naming;

// use TYPO3 Extbase addition scripts
extension de::genesez::platform::typo3::extbase::modification::Addition;

// use TYPO3 Extbase access helper scripts which overrides
// common access helper scripts if script name is equal 
extension de::genesez::platform::typo3::extbase::scripts::AccessHelper;
extension de::genesez::platforms::common::AccessHelper;

// use common create template scripts
extension de::genesez::platforms::common::m2m::CreateTemplate;

extension de::genesez::platform::typo3::extbase::workflow::GlobalVar;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	MPackage (MModel)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void modelScaffolding(MModel this) :
	logInfo( "Start Scaffolding: " + globalVarScaffolding() ) ->
	globalVarScaffolding()
		? packageScaffolding()
		: Void;


Void packageScaffolding(MPackage this) :
	// perform package additions for all nested packages
	this.nestedPackage.packageScaffolding() ->
	
	// perform package additions for all classes
	this.classifier.typeSelect(MClass).select( e | e.isEntity() && e.hasT3ExtbaseEntityIsAggregateRoot("true") ).classScaffolding();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	MClass
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void classScaffolding(MClass this) :
	controllerScaffolding() ->
	repositoryScaffolding();	


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 Extbase Controller additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 Extbase controller.
 */
Void controllerScaffolding(MClass this) :
	// checks if the controller doesn't already exists
	existsController()
		? ( let c = createController() :
				// (visibility, abstract, final)
				c.processClassifier("public", false, false) ->
				// add comment to discribe the controller
				c.ownedComment.add( 
					createComment(c.xmiGuid + ".comment", "Controller for a domain object.") 
				) ->
				// add super controller type
				c.addControllerType() ->
				// add stereotype to mark this class as controller
				c.stereotype.add( 
					createStereotype( model(), c.xmiGuid + "." + prT3ExtbaseController(), prT3ExtbaseController() ) 
				) ->
				// add property to inject the repository
				c.addControllerRepositoryAttribute(this) ->
				
				c.addControllerShowAction(this) ->
				c.addControllerListAction(this) ->
				c.addControllerNewAction(this) ->
				c.addControllerCreateAction(this) ->
				c.addControllerEditAction(this) ->
				c.addControllerUpdateAction(this) ->
				c.addControllerDeleteAction(this)
		) : Void;
 

MClass createController(MClass domainObject) :
	// checks if the controller doesn't already exists
	domainObject.existsController()
		? createClass(domainObject.model(), domainObject.xmiGuid + ".controller", domainObject.name + "Controller")
		: domainObject.model().allControllers().select( e | e.name().endsWith( domainObject.name + "Controller" ) ).first();


Void addControllerRepositoryAttribute(MClass this, MClass domainObject) :
	let a = createAttribute(this.xmiGuid + "." + domainObject.name.toFirstLower() + "Repository", domainObject.name.toFirstLower() + "Repository") :
		// (visibility, derived, multiplicity, unique, ordered)
		a.processProperty("protected", false, 1, false, false) ->
		// (defaultvalue, static, final)
		a.processAttribute("", false, false) ->
		// add comment to discribe the attribute
		a.ownedComment.add( 
			createComment(a, a.xmiGuid + ".comment", "Repository for a domain object.") 
		) ->
		// add repository type
		a.setType (
			createRepository(domainObject) 
		) ->
		// add stereotype to mark this attribute as dependency injection
		a.stereotype.add( 
			let s = createStereotype( model(), a.xmiGuid + "." + prDi(), prDi() ) :
				createTaggedValue( a, createTag( s, prDiSetter(), "Boolean" ), "true" ) ->
				s
		) ->
		a;


Void addControllerCreateAction(MClass this, MClass domainObject) :
	let o = createOperation(this, this.xmiGuid + ".createAction", "createAction") :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation("protected", false, false, false, 1, false, false) ->
		// add comment to discribe the operation
		o.ownedComment.add( 
			createComment(o.xmiGuid + ".comment", "Create Action.") 
		) ->
		o.parameter.add(
			let p = createParameter( o, o.xmiGuid + ".new" + domainObject.name.toFirstUpper(), "new" + domainObject.name.toFirstUpper() ) :
				// (defaultValue, direction, multiplicity, unique, ordered)
				p.processParameter("", "in", 1, true, false) ->
				p.ownedComment.add( 
					createComment(p.xmiGuid + ".comment", "") 
				) ->
				p.setType( 
					domainObject
				) ->
				p
		) ->
		o.setReturn(
			let return = createParameter(o, o.xmiGuid + ".return", "") :
				return.processParameter("", "return", 1, true, false) ->
				return.ownedComment.add( 
					createComment(o.xmiGuid + ".return.comment", "The rendered new action") 
				) ->
				return.setType( 
					createPrimitiveTypeString( model() ) 
				) ->
				return
		) ->
		o.stereotype.add( 
			createStereotype( model(), o.xmiGuid + ".http://www.genesez.org/TYPO3/TYPO3v4/controller/createAction", "http://www.genesez.org/TYPO3/TYPO3v4/controller/createAction" ) 
		);
		

Void addControllerDeleteAction(MClass this, MClass domainObject) :
	let o = createOperation(this, this.xmiGuid + ".deleteAction", "deleteAction") :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation("protected", false, false, false, 1, false, false) ->
		// add comment to discribe the operation
		o.ownedComment.add( 
			createComment(o.xmiGuid + ".comment", "Delete Action.") 
		) ->
		o.parameter.add(
			let p = createParameter( o, o.xmiGuid + domainObject.name.toFirstLower(), domainObject.name.toFirstLower() ) :
				// (defaultValue, direction, multiplicity, unique, ordered)
				p.processParameter("", "in", 1, true, false) ->
				p.ownedComment.add( 
					createComment(p.xmiGuid + ".comment", "") 
				) ->
				p.setType( 
					domainObject
				) ->
				p
		) ->
		o.setReturn(
			let return = createParameter(o, o.xmiGuid + ".return", "") :
				return.processParameter("", "return", 1, true, false) ->
				return.ownedComment.add( 
					createComment(o.xmiGuid + ".return.comment", "The rendered delete action") 
				) ->
				return.setType( 
					createPrimitiveTypeString( model() ) 
				) ->
				return
		) ->
		o.stereotype.add( 
			createStereotype( model(), o.xmiGuid + ".http://www.genesez.org/TYPO3/TYPO3v4/controller/deleteAction", "http://www.genesez.org/TYPO3/TYPO3v4/controller/deleteAction" ) 
		);


Void addControllerEditAction(MClass this, MClass domainObject) :
	let o = createOperation(this, this.xmiGuid + ".editAction", "editAction") :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation("protected", false, false, false, 1, false, false) ->
		// add comment to discribe the operation
		o.ownedComment.add( 
			createComment(o.xmiGuid + ".comment", "Edit Action.") 
		) ->
		o.parameter.add(
			let p = createParameter( o, o.xmiGuid + domainObject.name.toFirstLower(), domainObject.name.toFirstLower() ) :
				// (defaultValue, direction, multiplicity, unique, ordered)
				p.processParameter("", "in", 1, true, false) ->
				p.ownedComment.add( 
					createComment(p.xmiGuid + ".comment", "") 
				) ->
				p.setType( 
					domainObject
				) ->
				p
		) ->
		o.setReturn(
			let return = createParameter(o, o.xmiGuid + ".return", "") :
				return.processParameter("", "return", 1, true, false) ->
				return.ownedComment.add( 
					createComment(o.xmiGuid + ".return.comment", "The rendered edit action") 
				) ->
				return.setType( 
					createPrimitiveTypeString( model() ) 
				) ->
				return
		) ->
		o.stereotype.add( 
			createStereotype( model(), o.xmiGuid + ".http://www.genesez.org/TYPO3/TYPO3v4/controller/editAction", "http://www.genesez.org/TYPO3/TYPO3v4/controller/editAction" ) 
		);
		

Void addControllerListAction(MClass this, MClass domainObject) :
	let o = createOperation(this, this.xmiGuid + ".listAction", "listAction") :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation("protected", false, false, false, 1, false, false) ->
		// add comment to discribe the operation
		o.ownedComment.add( 
			createComment(o.xmiGuid + ".comment", "List Action.") 
		) ->
		o.setReturn(
			let return = createParameter(o, o.xmiGuid + ".return", "") :
				return.processParameter("", "return", 1, true, false) ->
				return.ownedComment.add( 
					createComment(o.xmiGuid + ".return.comment", "The rendered list action") 
				) ->
				return.setType( 
					createPrimitiveTypeString( model() ) 
				) ->
				return
		) ->
		o.stereotype.add( 
			createStereotype( model(), o.xmiGuid + ".http://www.genesez.org/TYPO3/TYPO3v4/controller/listAction", "http://www.genesez.org/TYPO3/TYPO3v4/controller/listAction" ) 
		);


Void addControllerNewAction(MClass this, MClass domainObject) :
	let o = createOperation(this, this.xmiGuid + ".newAction", "newAction") :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation("protected", false, false, false, 1, false, false) ->
		// add comment to discribe the operation
		o.ownedComment.add( 
			createComment(o.xmiGuid + ".comment", "New Action.") 
		) ->
		o.parameter.add(
			let p = createParameter( o, o.xmiGuid + ".new" + domainObject.name.toFirstUpper(), "new" + domainObject.name.toFirstUpper() ) :
				// (defaultValue, direction, multiplicity, unique, ordered)
				p.processParameter("", "in", 1, true, false) ->
				p.ownedComment.add( 
					createComment(p.xmiGuid + ".comment", "") 
				) ->
				p.setType( 
					domainObject
				) ->
				p.setDefaultvalue(null) ->
				p.stereotype.add( 
					createStereotype( model(), p.xmiGuid + prT3ExtbaseDontValidate(), prT3ExtbaseDontValidate() ) 
				) ->
				p
		) ->
		o.setReturn(
			let return = createParameter(o, o.xmiGuid + ".return", "") :
				return.processParameter("", "return", 1, true, false) ->
				return.ownedComment.add( 
					createComment(o.xmiGuid + ".return.comment", "The rendered new action") 
				) ->
				return.setType( 
					createPrimitiveTypeString( model() ) 
				) ->
				return
		) ->
		o.stereotype.add( 
			createStereotype( model(), o.xmiGuid + ".http://www.genesez.org/TYPO3/TYPO3v4/controller/newAction", "http://www.genesez.org/TYPO3/TYPO3v4/controller/newAction" ) 
		);
	


Void addControllerShowAction(MClass this, MClass domainObject) :
	let o = createOperation(this, this.xmiGuid + ".showAction", "showAction") :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation("protected", false, false, false, 1, false, false) ->
		// add comment to discribe the operation
		o.ownedComment.add( 
			createComment(o.xmiGuid + ".comment", "Show Action.") 
		) ->
		o.parameter.add(
			let p = createParameter( o, o.xmiGuid + "." + domainObject.name.toFirstLower(), domainObject.name.toFirstLower() ) :
				// (defaultValue, direction, multiplicity, unique, ordered)
				p.processParameter("", "in", 1, true, false) ->
				p.ownedComment.add( 
					createComment(p.xmiGuid + ".comment", "") 
				) ->
				p.setType( 
					domainObject
				) ->
				p
		) ->
		o.setReturn(
			let return = createParameter(o, o.xmiGuid + ".return", "") :
				return.processParameter("", "return", 1, true, false) ->
				return.ownedComment.add( 
					createComment(o.xmiGuid + ".return.comment", "The rendered show action") 
				) ->
				return.setType( 
					createPrimitiveTypeString( model() ) 
				) ->
				return
		) ->
		o.stereotype.add( 
			createStereotype( model(), o.xmiGuid + ".http://www.genesez.org/TYPO3/TYPO3v4/controller/showAction", "http://www.genesez.org/TYPO3/TYPO3v4/controller/showAction" ) 
		);
		

Void addControllerUpdateAction(MClass this, MClass domainObject) :
	let o = createOperation(this, this.xmiGuid + ".updateAction", "updateAction") :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation("protected", false, false, false, 1, false, false) ->
		// add comment to discribe the operation
		o.ownedComment.add( 
			createComment(o.xmiGuid + ".comment", "Update Action.") 
		) ->
		o.parameter.add(
			let p = createParameter( o, o.xmiGuid + domainObject.name.toFirstLower(), domainObject.name.toFirstLower() ) :
				// (defaultValue, direction, multiplicity, unique, ordered)
				p.processParameter("", "in", 1, true, false) ->
				p.ownedComment.add( 
					createComment(p.xmiGuid + ".comment", "") 
				) ->
				p.setType( 
					domainObject
				) ->
				p
		) ->
		o.setReturn(
			let return = createParameter(o, o.xmiGuid + ".return", "") :
				return.processParameter("", "return", 1, true, false) ->
				return.ownedComment.add( 
					createComment(o.xmiGuid + ".return.comment", "The rendered update action") 
				) ->
				return.setType( 
					createPrimitiveTypeString( model() ) 
				) ->
				return
		) ->
		o.stereotype.add( 
			createStereotype( model(), o.xmiGuid + ".http://www.genesez.org/TYPO3/TYPO3v4/controller/updateAction", "http://www.genesez.org/TYPO3/TYPO3v4/controller/updateAction" ) 
		);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 Extbase Repository additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 Extbase repository.
 */
Void repositoryScaffolding(MClass this) :
	// checks if the respository doesn't already exists
	existsRepository()
		? ( let c = createRepository() :
				// (visibility, abstract, final)
				c.processClassifier("public", false, false) ->
				// add comment to discribe the controller
				c.ownedComment.add( 
					createComment(c.xmiGuid + ".comment", "Respository for a domain object.") 
				) ->
				// add super repository type
				c.addRepositoryType() ->
				// add stereotype to mark this class as repository
				c.stereotype.add( 
					createStereotype( model(), c.xmiGuid + "." + prT3ExtbaseRepository(), prT3ExtbaseRepository() ) 
				)
		) : Void;



MClass createRepository(MClass domainObject) :
	// checks if the respository doesn't already exists
	domainObject.existsRepository()
		? createClass(domainObject.model(), domainObject.xmiGuid + ".repository", domainObject.name + "Repository")
		: domainObject.model().allRepositories().select( e | e.name().endsWith( domainObject.name + "Repository" ) ).first();
		

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Helper functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

boolean existsController(MClassifier this) :
	// checks if the controller doesn't already exists
	model().allControllers().select( e | e.name().endsWith( name + "Controller" ) ).isEmpty;
	

boolean existsRepository(MClassifier this) :
	// checks if the respository doesn't already exists
	model().allRepositories().select( e | e.name().endsWith( name + "Repository" ) ).isEmpty;
