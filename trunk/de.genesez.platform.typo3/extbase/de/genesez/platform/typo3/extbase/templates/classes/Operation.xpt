«IMPORT gcore»
«REM»
	Handles everything about Operations.
	Performs the generation of operations, constructors, destructors.
	
	currently implemented:
	- 
	
	@author	Nico Herbig <nico.herbig@fh-zwickau.de>
	@date	2011-03-21
«ENDREM»

«REM» use TYPO3 Extbase naming scripts «ENDREM»
«EXTENSION de::genesez::platform::typo3::extbase::convention::Naming»

«REM» use TYPO3 Extbase profile access helper scripts «ENDREM»
«EXTENSION de::genesez::platform::typo3::extbase::profile::AccessHelper»

«REM» use type mapping scripts «ENDREM»
«EXTENSION de::genesez::platforms::common::typemapping::TypeMapping»

«REM» use php access helper scripts which overrides «ENDREM»
«REM» common access helper scripts if script name is equal «ENDREM»
«EXTENSION de::genesez::platforms::php::scripts::AccessHelper»
«EXTENSION de::genesez::platforms::common::AccessHelper»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	Processes all constructors.
«ENDREM»
«DEFINE Constructor FOR MClassifier -»
	«EXPAND Constructor FOREACH uniqueOperations().select( e| e.isConstructor() ) -»
«ENDDEFINE»


«REM»
	Processes all destructors.
«ENDREM»
«DEFINE Destructor FOR MClassifier -»
	«EXPAND Destructor FOREACH uniqueOperations().select( e| e.isDestructor() ) -»
«ENDDEFINE»


«REM»
	Processes operation declarations for an interface.
«ENDREM»
«DEFINE Declaration FOR MInterface -»
	«EXPAND Declaration FOREACH uniqueOperations() -»
«ENDDEFINE»


«REM»
	Processes all operations to declare.
	Order: realized operations from interfaces first
«ENDREM»
«DEFINE Declaration FOR MClassifier -»
	«EXPAND Declaration FOREACH uniqueOperations().select( e| !e.isConstructor() && !e.isDestructor() && e.abstract && realization.typeSelect(MInterface).operation.name.contains( e.name ) ) -»
	«EXPAND Declaration FOREACH uniqueOperations().select( e| !e.isConstructor() && !e.isDestructor() && e.abstract && !realization.typeSelect(MInterface).operation.name.contains( e.name ) ) -»
«ENDDEFINE»


«REM»
	Processes all operations to implement.
	Order: realized operations from interfaces first
«ENDREM»
«DEFINE Implementation FOR MClassifier -»
	«EXPAND Implementation FOREACH uniqueOperations().select( e| !e.isConstructor() && !e.isDestructor() && !e.abstract && realization.typeSelect(MInterface).operation.name.contains( e.name ) ) -»
	«EXPAND Implementation FOREACH uniqueOperations().select( e| !e.isConstructor() && !e.isDestructor() && !e.abstract && !realization.typeSelect(MInterface).operation.name.contains( e.name ) ) -»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	Generates a constructor which cannot has a return value.
«ENDREM»
«DEFINE Constructor FOR MOperation -»
	«EXPAND Comment::Constructor -»
	«visibility -» function __construct(«EXPAND Params -») {
		«EXPAND OwnCodeImplementation("php.constructor." + xmiGuid) -»
	}
«ENDDEFINE»


«REM»
	Generates a destructor which cannot have parameters or a return value.
«ENDREM»
«DEFINE Destructor FOR MOperation -»
	«EXPAND Comment::Destructor -»
	«visibility -» function __destruct() {
		«EXPAND OwnCodeImplementation("php.destructor." + xmiGuid) -»
	}
«ENDDEFINE»


«REM»
	Generates an operation declaration.
«ENDREM»
«DEFINE Declaration FOR MOperation -»
	«EXPAND Comment::Operation -»
	«EXPAND Modifier -» function «name() -»(«EXPAND Params -»);
«ENDDEFINE»


«REM»
	Generates an operation implementation.
«ENDREM»
«DEFINE Implementation FOR MOperation -»
	«EXPAND Comment::Operation -»
	«EXPAND Modifier -» function «name() -»(«EXPAND Params -») {
		«EXPAND OwnCodeImplementation("php.implementation." + xmiGuid) -»
	}
«ENDDEFINE»


«REM»
	Generates the visibility and the modifiers static, final + abstract for an operation.
	Abstract only if the class is also abstract.
«ENDREM»
«DEFINE Modifier FOR MOperation -»
	«visibility -»«IF static -» static«ENDIF -»«IF final -» final«ENDIF -»«IF abstract && classifier.abstract -» abstract«ENDIF -»
«ENDDEFINE»


«REM»
	Generates the parameters of an operation.
«ENDREM»
«DEFINE Params FOR MOperation -»
«FOREACH parameter AS p SEPARATOR ", " -»
«EXPAND TypeHint FOR p -»«EXPAND Parameter FOR p -»
«ENDFOREACH -»
«ENDDEFINE»


«REM»
	Generates type hints for special single valued types or multi valued types.
«ENDREM»
«DEFINE TypeHint FOR MParameter -»
«IF type.isClassifier() || type.isExternalType() -»
«IF isSingleValuedType() -»«type.mapName().name() -» «ELSE -»«mapType() -» «ENDIF -»
«ENDIF -»
«ENDDEFINE»


«REM»
	Generates the parameter name.
«ENDREM»
«DEFINE Parameter FOR MParameter -»
$«name() -»«EXPAND DefaultValue -»
«ENDDEFINE»


«REM»
	Generates the default value.
«ENDREM»
«DEFINE DefaultValue FOR MParameter -»
«IF hasDefaultValue() -» = «defaultvalue -»«ENDIF -»
«ENDDEFINE»


«REM»
	Generates the protected region of an operation.
	
	@param	id	protected region id
«ENDREM»
«DEFINE OwnCodeImplementation(String id) FOR MOperation -»
«IF isConstructor() -»
		«PROTECT CSTART '/* ' CEND ' */' ID (id)»
		// TODO: implementation of constructor for class «classifier.name()»
		throw new Exception('The implementation of the constructor for class «classifier.name() -» is missing !');
		«ENDPROTECT»
«ELSEIF isDestructor() -»
		«PROTECT CSTART '/* ' CEND ' */' ID (id)»
		// TODO: implementation of destructor for class «classifier.name()»
		throw new Exception('The implementation of the destructor for class «classifier.name() -» is missing !');
		«ENDPROTECT»
«ELSE -»
		«PROTECT CSTART '/* ' CEND ' */' ID (id)»
		// TODO: implementation of method «name -» for class «classifier.name()»
		throw new Exception('The implementation of the method «name() -» for class «classifier.name() -» is missing !');
		«ENDPROTECT»
«ENDIF -»
«ENDDEFINE»