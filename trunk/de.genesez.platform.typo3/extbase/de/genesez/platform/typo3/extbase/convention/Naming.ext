/**
 * General naming conventions for TYPO3 Extbase
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-05-11
 */

// based on genesez meta model
import gcore;

// use TYPO3 Extbase convention scripts
extension de::genesez::platform::typo3::extbase::convention::Convention;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase type name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a classifier name using prefix + suffix.
 * 
 * @return	the formatted classifier name
 */
String asTypeName(MClassifier this) :
	typeNameBase() + typeNameSeperator() + typeNamePath() + typeNameSeperator() + typeNamePrefix() + name.toFirstUpper() + typeNameSuffix();


/**
 * Formats the name of an classifier to lower case for configuration and localization environment.
 * Note: Before using this script it is necessary to call "asTypeName" first.
 * Basically this is done by the basic naming modification script.
 * 
 * @return	the formatted classifier name
 */
String asLowerTypeName(MClassifier this) :
	name.toLowerCase();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase property name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a property name to lower case and with underscores for configuration and localization environment.
 * Note: Before using this script it is necessary to call "asAttributeName" first.
 * Basically this is done by the basic naming modification script.
 * 
 * @return	the formatted attribute name
 */
String asLowerAttributeName(MProperty this) :
	JAVA de.genesez.platform.typo3.extbase.scripts.Convention.toLowerPropertyName(de.genesez.metamodel.gcore.MProperty);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase attribute name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an attribute name as a constant.
 *
 * @return	the formatted attribute name
 */
String asConstantName(MAttribute this) : 
	name.toUpperCase();


/**
 * Formats an attribute name as a normal attribute.
 * 
 * @return	the formatted attribute name
 */
String asAttributeName(MAttribute this) : 
	name.toFirstLower();


/**
 * Formats an attribute name as a getter method.
 *
 * @return	the formatted name of the getter method
 */
String asGetterName(MAttribute this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an attribute name as a setter or inject (DI) method.
 * 
 * @return	the formatted name of the setter method
 */
String asSetterName(MAttribute this) : 
	setterNamePrefix() + name.toFirstUpper();

	
/**
 * Formats an attribute name as a 'insert in' method.
 * 
 * @return	the formatted name of the 'insert in' method
 */
String asInsertInName(MAttribute this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an attribute name as a 'remove from' method.
 * 
 * @return	the formatted name of the 'remove from' method
 */
String asRemoveFromName(MAttribute this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase association role name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an association role name as a constant.
 *
 * @return	the formatted association role name
 */
String asConstantName(MAssociationRole this) : 
	name.toUpperCase();


/**
 * Formats an association role name as a normal attribute.
 * 
 * @return	the formatted association role name
 */
String asAttributeName(MAssociationRole this) : 
	name.toFirstLower();


/**
 * Formats an association role name as a getter method.
 *
 * @return	the formatted name of the getter method
 */
String asGetterName(MAssociationRole this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a setter method.
 * 
 * @return	the formatted name of the setter method
 */
String asSetterName(MAssociationRole this) : 
	setterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a 'insert in' method.
 * 
 * @return	the formatted name of the 'insert in' method
 */
String asInsertInName(MAssociationRole this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an association role name as a 'remove from' method.
 * 
 * @return	the formatted name of the 'remove from' method
 */
String asRemoveFromName(MAssociationRole this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase operation name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats the name of an operation using prefix + suffix.
 *
 * @return	formatted name of the operation
 */
String asOperationName(MOperation this) :
	name.toFirstLower() + operationNameSuffix();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase parameter name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats the name of a parameter.
 * 
 * @return	the formatted name of the parameter
 */
String asParameterName(MParameter this) : 
	name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase file name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats the file name of a classifier without file extension.
 *
 * @return	the file name of a classifier
 */
String asFileName(MClassifier this) :
	name.split( typeNameSeperator() ).last();


/**
 * Formats the file name of a classifier as php file.
 *
 * @return	the file name of the classifier
 */
String asFileNamePHP(MClassifier this) :
	asFileName() + fileExtensionPHP();
	