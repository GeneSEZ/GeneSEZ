/**
 * General naming conventions for TYPO3 MVC.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-08-20
 */

// based on genesez meta model
import gcore;

// use TYPO3 MVC profile scripts	
extension de::genesez::platform::typo3v4::mvc::profile::ExtbaseProfile;

// use TYPO3 naming context and common naming scripts
extension de::genesez::platforms::common::naming::Naming;
extension de::genesez::platform::typo3v4::mvc::convention::NamingContext;

// use TYPO3 MVC convention scripts
extension de::genesez::platform::typo3v4::mvc::convention::Convention;

// use TYPO3 MVC access helper scripts which overrides
// common access helper scripts if script name is equals
extension de::genesez::platform::typo3v4::mvc::scripts::AccessHelper;
extension de::genesez::platforms::common::AccessHelper;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC element name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats the element name 
 * in 'Default' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
cached String asDefaultName(MElement this) :
	name;


/**
 * Formats the element name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
cached String asGeneralName(MElement this) :
	name;


/**
 * Formats the element name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted element name
 */
cached String asPHPCompliantName(MElement this) :
	name;


/**
 * Formats the element name 
 * in 'Configuration' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
cached String asConfigurationName(MElement this) :
	name;


/**
 * Formats the element name 
 * in 'Localization' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
cached String asLocalizationName(MElement this) :
	name;
	
	
/**
 * Formats the element name 
 * in 'LocalizationCSH' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
cached String asLocalizationCSHName(MElement this) :
	name;


/**
 * Formats the element name 
 * in 'Object' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
cached String asObjectName(MElement this) :
	name;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a classifier name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
cached String asGeneralName(MClassifier this) :
	classifierNameBase() + classifierNameSeperator() + classifierNamePath() + classifierNameSeperator() + classifierNamePrefix() + name.toFirstUpper() + classifierNameSuffix();	


/**
 * Formats a classifier name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted classifier name
 */
cached String asPHPCompliantName(MClassifier this) :
	name.toFirstUpper();


/**
 * Formats a classifier name 
 * in 'Configuration' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
cached String asConfigurationName(MClassifier this) :
	asGeneralName().toLowerCase();
	

/**
 * Formats a classifier name 
 * in 'Localization' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
cached String asLocalizationName(MClassifier this) :
	asConfigurationName();


/**
 * Formats a classifier name 
 * in 'LocalizationCSH' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
cached String asLocalizationCSHName(MClassifier this) :
	asConfigurationName();


/**
 * Formats a classifier name 
 * in 'Object' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
cached String asObjectName(MClassifier this) :
	name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC property name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'General' naming context.
 * 
 * @return	the formatted attribute or association role name
 */
cached String asGeneralName(MProperty this) :
	name.toFirstLower();
	

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted attribute or association role name
 */
cached String asPHPCompliantName(MProperty this) :
	asGeneralName();


/**
 * Formats an attribute or association role name as a normal attribute
 * in 'Configuration' TYPO3 MVC naming context. 
 * 
 * @return	the formatted attribute or association role name
 */
cached String asConfigurationName(MProperty this) :
	JAVA de.genesez.platform.typo3v4.mvc.convention.Naming.toLowerPropertyName(de.genesez.metamodel.gcore.MProperty);


/**
 * Formats an attribute or association role name as a normal attribute
 * in 'Localization' TYPO3 MVC naming context. 
 * 
 * @return	the formatted attribute or association role name
 */
cached String asLocalizationName(MProperty this) :
	classifier.asLocalizationName() + "." + asConfigurationName();
	

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'LocalizationCSH' TYPO3 MVC naming context. 
 * 
 * @return	the formatted attribute or association role name
 */
cached String asLocalizationCSHName(MProperty this) :
	asConfigurationName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC attribute name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an attribute name as a normal attribute or constant
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted attribute name
 */
cached String asGeneralName(MAttribute this) :
	final && static && hasDefaultValue()
		? name.toUpperCase()
		: name.toFirstLower();


/**
 * Formats an attribute name as a getter method.
 *
 * @return	the formatted name of the getter method
 */
cached String asGetterName(MAttribute this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an attribute name as a setter or inject (DI) method.
 * 
 * @return	the formatted name of the setter method
 */
cached String asSetterName(MAttribute this) : 
	setterNamePrefix() + name.toFirstUpper();

	
/**
 * Formats an attribute name as a 'insert in' method.
 * 
 * @return	the formatted name of the 'insert in' method
 */
cached String asInsertInName(MAttribute this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an attribute name as a 'remove from' method.
 * 
 * @return	the formatted name of the 'remove from' method
 */
cached String asRemoveFromName(MAttribute this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC association role name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an association role name as a normal attribute
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted association role name
 */
cached String asGeneralName(MAssociationRole this) :
	name.toFirstLower();
	

/**
 * Formats an association role name as a getter method.
 *
 * @return	the formatted name of the getter method
 */
cached String asGetterName(MAssociationRole this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a setter method.
 * 
 * @return	the formatted name of the setter method
 */
cached String asSetterName(MAssociationRole this) : 
	setterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a 'insert in' method.
 * 
 * @return	the formatted name of the 'insert in' method
 */
cached String asInsertInName(MAssociationRole this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an association role name as a 'remove from' method.
 * 
 * @return	the formatted name of the 'remove from' method
 */
cached String asRemoveFromName(MAssociationRole this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC operation name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an operation name using suffix 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted operation name
 */
cached String asGeneralName(MOperation this) :
	name.toFirstLower() + operationNameSuffix();


/**
 * Formats an operation name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted operation name
 */
cached String asPHPCompliantName(MOperation this) :
	name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC parameter name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a parameter name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted parameter name
 */
cached String asGeneralName(MParameter this) : 
	name.toFirstLower();
	

/**
 * Formats a parameter name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted parameter name
 */
cached String asPHPCompliantName(MParameter this) : 
	asGeneralName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC controller
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

List[String] asControllerActionPairs(MModel this, List[String] listOfXmiGuids) :
	JAVA de.genesez.platform.typo3v4.mvc.convention.Naming.asControllerActionPairs(de.genesez.metamodel.gcore.MModel, java.util.List);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC validators
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asAssignedValidatorName(MStereotype this) :
	// first check is if the stereotype starts with the prefix "T3Extbase" 
	// and ends with the suffix "Validator". So it is a TYPO3 MVC Extbase validator. 
	name.startsWith("T3Extbase") && name.endsWith("Validator")
		? name.replaceFirst("T3Extbase", "").replaceFirst("Validator", "")
		: model.allValidators().selectFirst( v | name == v.name ).name( namingContextGeneral() );


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC plugins and modules
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asPluginName(MInterface this) :
	asPHPCompliantName();
	
	
String asPluginFlexformName(MInterface this) :
	extensionNameToLowerCase() + "_" + asPHPCompliantName().toLowerCase();


String asModuleName(MInterface this) :
	fullQualifiedExtensionNameToLowerCase() + extensionNameSeperator() + name.toLowerCase();


String asMainModulName(String mainModule) :
	mainModule.toLowerCase();
	
	
String asAccessRole(String accessRole) :
	accessRole.toLowerCase();
	

String asT3MVCPluginType(String value) :
	switch (value) {
		case prT3ExtbasePluginTypeExtbaseContentElement() :
			"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_CONTENT_ELEMENT"
		default :
			"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_PLUGIN"
	};


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC TCx 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asTCxEvalName(String this) :
	toLowerCase();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC persistance
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * This method needs to be called in SQL context.
 */
String asIntermediateTableName(MAssociationRole this) :
	fullQualifiedExtensionName().toLowerCase() + classifierNameSeperator()
		+ ( classifier.name().compareTo( type.name() ) < 0 
			? classifier.asIntermediateTableName() + classifierNameSeperator() + ( hasOpposite() ? opposite.name() + classifierNameSeperator() : "" ) + type.asIntermediateTableName() + classifierNameSeperator() + name()
			: type.asIntermediateTableName() + classifierNameSeperator() + name() + classifierNameSeperator() + classifier.asIntermediateTableName() + ( hasOpposite() ? classifierNameSeperator() + opposite.name() : "" )
		  )
		+ classifierNameSeperator() + "mm";


private String asIntermediateTableName(MType this) :
	name().split( classifierNameSeperator() ).last().toLowerCase();
