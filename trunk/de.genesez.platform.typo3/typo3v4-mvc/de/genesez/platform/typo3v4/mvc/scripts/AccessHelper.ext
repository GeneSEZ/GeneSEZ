/**
 * Simplifies access to genesez models + makes working with the genesez metamodel more easier.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-05-07
 */

// based on genesez meta model
import gcore;

// use TYPO3 MVC Extbase access helper scripts
extension de::genesez::platform::typo3v4::mvc::profile::ExtbaseAccessHelper;

// use TYPO3 MVC Fluid access helper scripts
extension de::genesez::platform::typo3v4::mvc::profile::FluidAccessHelper;

// use TYPO3 MVC convention scripts
extension de::genesez::platform::typo3v4::mvc::convention::Convention;

// use TYPO3 MVC workflow global var scripts
extension de::genesez::platform::typo3v4::mvc::workflow::GlobalVar;

// use common conversion scripts
extension de::genesez::platforms::common::Conversion;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Controller 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase controllers.
 * 
 * @return	the list of TYPO3 MVC Extbase controllers or an empty list
 */
List[MClass] allControllers(MModel this) :
	allClassifiers().typeSelect(MClass).select( e | e.isController() );


/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase controller package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase controller package, otherwise false
 */
boolean isControllerPackageElement(MClassifier this) :
	// first check if this classifier is a class and is a controller
	( MClass.isInstance(this) && ((MClass)this).isController() ) ||
	// second check if this classifier is a controller package element
	hasT3ExtbaseControllerPackageElementStereotype() ||
	// third check if the package of this classifier has an stereotype
	owningContext.hasT3ExtbaseControllerPackageStereotype();


/**
 * Checks if a class is a TYPO3 MVC Extbase controller.
 *
 * @return	true if the class is a TYPO3 MVC Extbase controller, otherwise false
 */
boolean isController(MClass this) :
	// first check if this class has an stereotype
	hasT3ExtbaseControllerStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseControllerPackageStereotype() ||
	// third check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesControllerPath() ) ||
	// fourth check if generalization is an TYPO3 MVC Extbase controller
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isController()
			: false
	);


/*
- - Controller Action settings  - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a operation is a TYPO3 MVC Extbase controller action.
 * 
 * @return	true if the operation is a TYPO3 MVC Extbase controller action, otherwise false
 */
boolean isControllerAction(MOperation this) :
	// first check if the operation has an stereotype
	hasT3ExtbaseControllerActionStereotype() ||
	// second check if the class is a controller AND the operation is not a non controller action
	( ((MClass)classifier).isController() && !isControllerNoAction() );


/*
- - No Controller Action settings - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a operation is not a TYPO3 MVC Extbase controller action.
 *
 * @return	true if the operation is not a TYPO3 MVC Extbase controller action, otherwise false
 */
boolean isControllerNoAction(MOperation this) :
	// first check if the operation has an stereotype
	hasT3ExtbaseControllerNoActionStereotype();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Domain Objects 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase entities and value objects.
 * 
 * @return	the list of TYPO3 MVC Extbase entities and value objects or an empty list
 */
List[MClass] allEntitiesAndValueObjects(MModel this) :
	allClassifiers().typeSelect(MClass).select( e | e.isEntity() || e.isValueObject() );


/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase model package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase model package, otherwise false
 */
boolean isModelPackageElement(MClassifier this) :
	switch (metaType) {
		case MClass : ( ((MClass)this).isEntity() || ((MClass)this).isValueObject() ) 
		default : false
	};


/**
 * Returns the a list of all owning initializable properties.
 * 
 * @return	the list of of initializable properties or an empty list
 */
List[MProperty] owningInitializableProperties(MClassifier this) :
	let p = {} :
		p.addAll( owningInitializableAttributes() ) ->
	  	p.addAll( owningInitializableAssociationRoles() ) ->
	  	p;


/**
 * Checks if an association role is one to one (1:1) unidirectornal.
 * 
 * @return	true if an association role is one to one unidirectornal, otherwise false
 */
boolean isOneToOneUnidirectional(MAssociationRole this) :
	isOppositeSingleValuedType() && isSingleValuedType() && !hasOpposite();


/**
 * Checks if an association role is one to one (1:1) bidirectornal.
 * 
 * @return	true if an association role is one to one bidirectornal, otherwise false
 */
boolean isOneToOneBidirectional(MAssociationRole this) :
	isOppositeSingleValuedType() && isSingleValuedType() && hasOpposite();


/**
 * Checks if an association role is one to many (1:n) unidirectornal.
 * 
 * @return	true if an association role is one to many unidirectornal, otherwise false
 */
boolean isOneToManyUnidirectional(MAssociationRole this) :
	isOppositeSingleValuedType() && isMultiValuedType() && !hasOpposite();

	
/**
 * Checks if an association role is one to many (1:n) bidirectornal.
 * 
 * @return	true if an association role is one to many bidirectornal, otherwise false
 */
boolean isOneToManyBidirectional(MAssociationRole this) :
	isOppositeSingleValuedType() && isMultiValuedType() && hasOpposite();


/**
 * Checks if an association role is many to one (n:1) unidirectornal.
 * 
 * @return	true if an association role is many to one unidirectornal, otherwise false
 */
boolean isManyToOneUnidirectional(MAssociationRole this) :
	isOppositeMultiValuedType() && isSingleValuedType() && !hasOpposite();


/**
 * Checks if an association role is many to one (n:1) bidirectornal.
 * 
 * @return	true if an association role is many to one bidirectornal, otherwise false
 */
boolean isManyToOneBidirectional(MAssociationRole this) :
	isOppositeMultiValuedType() && isSingleValuedType() && hasOpposite();
	

/**
 * Checks if an association role is many to many (m:n) unidirectornal.
 * 
 * @return	true if an association role is many to many unidirectornal, otherwise false
 */
boolean isManyToManyUnidirectional(MAssociationRole this) :
	isOppositeMultiValuedType() && isMultiValuedType() && !hasOpposite();
	

/**
 * Checks if an association role is many to many (m:n) bidirectornal.
 * 
 * @return	true if an association role is many to many bidirectornal, otherwise false
 */
boolean isManyToManyBidirectional(MAssociationRole this) :
	isOppositeMultiValuedType() && isMultiValuedType() && hasOpposite();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Entity 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase entities.
 * 
 * @return	the list of TYPO3 MVC Extbase entities or an empty list
 */
List[MClass] allEntities(MModel this) :
	allClassifiers().typeSelect(MClass).select( e | e.isEntity() );


/**
 * Checks if a class is a TYPO3 MVC Extbase entity.
 *
 * @return	true if the class is a TYPO3 MVC Extbase entity, otherwise false
 */
boolean isEntity(MClass this) :
	// first check if this class has an stereotype
	hasT3ExtbaseEntityStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseEntityPackageStereotype() ||
	// third check if generalization is an TYPO3 MVC Extbase entitry
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isEntity()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Value Object 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase value objects.
 * 
 * @return	the list of TYPO3 MVC Extbase value objects or an empty list
 */
List[MClass] allValueObjects(MModel this) :
	allClassifiers().typeSelect(MClass).select( e | e.isValueObject() );
	

/**
 * Checks if a class is a TYPO3 MVC Extbase value object.
 *
 * @return	true if the class is a TYPO3 MVC Extbase value object, otherwise false
 */
boolean isValueObject(MClass this) :
	// first check if this class has an stereotype
	hasT3ExtbaseValueObjectStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseValueObjectPackageStereotype() ||
	// third check if generalization is an TYPO3 MVC Extbase value object
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isValueObject()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Repository 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase repositories.
 * 
 * @return	the list of TYPO3 MVC Extbase repositories or an empty list
 */
List[MClass] allRepositories(MModel this) :
	allClassifiers().typeSelect(MClass).select( e | e.isRepository() );


/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase repository package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase repository package, otherwise false
 */
boolean isRepositoryPackageElement(MClassifier this) :
	switch (metaType) {
		case MClass : ((MClass)this).isRepository() 
		default : false
	};


/**
 * Checks if a class is a TYPO3 MVC Extbase repository.
 *
 * @return	true if the class is a TYPO3 MVC Extbase repository, otherwise false
 */
boolean isRepository(MClass this) :
	// first check if this class has an stereotype
	hasT3ExtbaseRepositoryStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseRepositoryPackageStereotype() ||
	// third check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainRepositoryPath() ) ||
	// fourth check if generalization is an TYPO3 MVC Extbase repository
	(	
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isRepository()
			: false
	);
	

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Service 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase service package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase service package, otherwise false
 */
boolean isServicePackageElement(MClassifier this) :
	switch (metaType) {
		case MClass : ((MClass)this).isService()
		default : false
	};


/**
 *
 * Checks if a class is a TYPO3 MVC Extbase service.
 * 
 * @return	true if the class is a TYPO3 MVC Extbase service, otherwise false
 */
boolean isService(MClass this) :
	// first check if this class has an stereotype
	hasT3ExtbaseServiceStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseServicePackageStereotype() ||
	// third check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() &&  dirPath() == classesDomainServicePath() ) ||
	// fourth check if generalization is an TYPO3 MVC Extbase service
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isService()
			: false
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Validator 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase validators.
 * 
 * @return	the list of TYPO3 MVC Extbase validators or an empty list
 */
List[MClass] allValidators(MModel this) :
	allClassifiers().typeSelect(MClass).select( e | e.isValidator() );
	

/**
 * Checks if a classifier is part of the TYPO3 MVC Extbase validator package.
 * 
 * @return	true if the classifier is part of the TYPO3 Extbase validator package, otherwise false
 */
boolean isValidatorPackageElement(MClassifier this) :
	switch (metaType) {
		case MClass : ((MClass)this).isValidator()
		default : false
	};


/**
 * Checks if a class is a TYPO3 MVC Extbase validator.
 *
 * @return	true if the class is a TYPO3 MVC Extbase validator, otherwise false
 */
boolean isValidator(MClass this) :
	// first check if this class has an stereotype
	hasT3ExtbaseValidatorStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3ExtbaseValidatorPackageStereotype() ||
	// third check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesDomainValidatorPath() ) ||
	// fourth check if generalization is an TYPO3 MVC Extbase validator
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isValidator()
			: false
	);


List[MStereotype] getAssignedValidators(MElement this) :
	stereotype.select( s |
		// first check is if the stereotype starts with the prefix "T3Extbase" 
		// and ends with the suffix "Validator". So all TYPO3 MVC Extbase validators are added. 
		( s.name.startsWith("T3Extbase") && s.name.endsWith("Validator") ) ||
		// second check if the name of the stereotype is equals to a validator class
		!model().allValidators().select( v | s.name == v.name ).isEmpty ||
		// third check is if the sterotype has a sterotype
		s.hasT3ExtbaseValidatorStereotype() 
	);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Fluid ViewHelper 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if a classifier is part of the TYPO3 MVC Fluid view helper package.
 * 
 * @return	true if the classifier is part of the TYPO3 Fluid view helper package, otherwise false
 */
boolean isViewHelperPackageElement(MClassifier this) :
	switch (metaType) {
		case MClass : ((MClass)this).isViewHelper()
		default : false
	};


/**
 * Checks if a class is a TYPO3 MVC Fluid view helper.
 *
 * @return	true if the class is a TYPO3 MVC Fluid view helper, otherwise false
 */
boolean isViewHelper(MClass this) :
	// first check if this class has an stereotype
	hasT3FluidViewHelperStereotype() ||
	// second check if the package of this class has an stereotype
	owningContext.hasT3FluidViewHelperPackageStereotype() ||
	// third check if this model is TYPO3 MVC complaint and this class is inside the correct package
	( globalVarIsT3MVCCompliant() && dirPath() == classesViewHelpersPath() ) ||
	// fourth check if generalization is an TYPO3 MVC Fluid view helper
	(
		!generalization.typeSelect(MClass).isEmpty
			? generalization.typeSelect(MClass).first().isViewHelper()
			: false
	);		


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Plugin and Module 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Returns the a list of TYPO3 MVC Extbase plugins.
 * 
 * @return	the list of TYPO3 MVC Extbase plugins or an empty list
 */
List[MInterface] allPlugins(MModel this) :
	allClassifiers().typeSelect(MInterface).select( e | e.hasT3ExtbasePluginStereotype() );


/**
 * Returns the a list of TYPO3 MVC Extbase modules.
 * 
 * @return	the list of TYPO3 MVC Extbase modules or an empty list
 */
List[MInterface] allModules(MModel this) :
	allClassifiers().typeSelect(MInterface).select( e | e.hasT3ExtbaseModuleStereotype() );
