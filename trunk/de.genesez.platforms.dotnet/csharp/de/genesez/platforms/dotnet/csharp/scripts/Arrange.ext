//	based on genesez meta model
import genesezMM;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public extend functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * return if an interface has public fields
 * @param	interface	an interface
 * @return	true, if public fields exist
 */
boolean hasPublicFields(MInterface interface) :
	0 != publicFields(interface).size;

/**
 * return if an interface has associations
 * @param	interface	an interface
 * @return	true, if associations exist
 */
boolean hasAssociations(MInterface interface) :
	0 != associationFields(interface).size;

/**
 * return if an interface has properties
 * @param	interface	an interface
 * @return	true, if properties exist
 */
boolean hasProperties(MInterface interface) :
	0 != properties(interface).size || 0 != associationProperties(interface).size;

/**
 * return if an interface has public methods
 * @param	interface	an interface
 * @return	true, if public methods exist
 */
boolean hasPublicMethods(MInterface interface) :
	0 != publicMethods(interface).size || 0 != associations(interface).size;

/**
 * returns the public fields of an interface
 * @param	interface	an interface
 * @return	a list of attribute
 */
List[MAttribute] publicFields(MInterface interface) :
	interface.property.typeSelect(MAttribute).select(e|e.visibility == "public");

/**
 * returns the properties of an interface
 * @param	interface	an interface
 * @return	a list of attribute
 */
List[MAttribute] properties(MInterface interface) :
	interface.property.typeSelect(MAttribute);

/**
 * returns the associations of an interface
 * @param	interface	an interface
 * @return	a list of associations
 */
List[MAssociationRole] associations(MInterface interface) :
	interface.property.typeSelect(MAssociationRole);

/**
 * returns the association properties of an interface
 * @param	interface	an interface
 * @return	a list of associations
 */
List[MAssociationRole] associationProperties(MClass class) :
	class.property.typeSelect(MAssociationRole);
	//.select(e|e.stereotype.name.contains("accessor"));

/**
 * returns the public methods of an interface
 * @param	interface	an interface
 * @return	a list of public methods
 */
List[MOperation] publicMethods(MInterface interface) :
	interface.operation.select(e|e.name != interface.name && e.visibility == "public");

/*--*/

boolean hasStaticFields(MClass class) :
	0 != staticFields(class).size;

boolean hasConstantFields(MClass class) :
	0 != constantFields(class).size;

boolean hasPrivateFields(MClass class) :
	0 != privateFields(class).size || 0 != associationFields(class).size;

boolean hasPublicFields(MClass class) :
	0 != publicFields(class).size;

boolean hasAssociations(MClass class) :
	0 != associations(class).size;

boolean hasProperties(MClass class) :
	0 != properties(class).size || 0 != associationProperties(class).size;

boolean hasConstructors(MClass class) :
	0 != constructors(class).size;

boolean hasAbstractMethods(MClass class) :
	0 != abstractMethods(class).size;

boolean hasStaticMethods(MClass class) :
	0 != staticMethods(class).size;

boolean hasPublicMethods(MClass class) :
	0 != publicMethods(class).size;

boolean hasPrivateMethods(MClass class) :
	0 != privateMethods(class).size;

List[MAttribute] staticFields(MClass class) :
	class.property.typeSelect(MAttribute).select(e|e.static && !e.final);

List[MAttribute] constantFields(MClass class) :
	class.property.typeSelect(MAttribute).select(e|e.static && e.final);

List[MAttribute] privateFields(MClass class) :
	class.property.typeSelect(MAttribute).select(e|!e.static && !e.final && e.visibility == "private");

List[MAttribute] publicFields(MClass class) :
	class.property.typeSelect(MAttribute).select(e|!e.static && !e.final && e.visibility == "public");

List[MAttribute] properties(MClass class) :
	class.property.typeSelect(MAttribute);
	//.select(e|e.stereotype.name.contains("accessor"));

List[MAssociationRole] associations(MClass class) :
	class.property.typeSelect(MAssociationRole);

List[MAssociationRole] associationProperties(MClass class) :
	class.property.typeSelect(MAssociationRole);
	//.select(e|e.stereotype.name.contains("accessor"));

List[MOperation] constructors(MClass class) :
	class.operation.select(e|e.name == class.name);

List[MOperation] abstractMethods(MClass class) :
	class.operation.select(e|e.name != class.name && e.abstract);

List[MOperation] staticMethods(MClass class) :
	class.operation.select(e|e.name != class.name && !e.abstract && e.static);

List[MOperation] publicMethods(MClass class) :
	class.operation.select(e|e.name != class.name && !e.abstract && !e.static && e.visibility == "public");

List[MOperation] privateMethods(MClass class) :
	class.operation.select(e|e.name != class.name && !e.abstract && !e.static && e.visibility == "private");
