/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;


/**
 * Helper scripts to clone GeneSEZ Core meta model elements.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

extension org::genesez::metamodel::core::util::m2m::CreateElement;
extension org::genesez::util::logging::Logging;


// -- Package -----------------------------------------------------------------------------------------------


// -- Type and Literal --------------------------------------------------------------------------------------


// -- Property ----------------------------------------------------------------------------------------------


// -- Operation and Parameter -------------------------------------------------------------------------------


/**
 * Clones an operation based one the specified source operation and ensures its classifier containment.
 * 
 * @return	The cloned operation.
 */
MOperation cloneOperation(MOperation source, MClassifier container) :
	// create a new operation, clone basic property values and set containment
	let clone = createOperation( container, source.cloneXmiGuid( container ), source.name ) :
		source.logTrace( "cloning: " + source.metaType + ": " ) ->
		// clone extended property values
		clone.processOperation( source.visibility, source.static, source.abstract, source.final ) ->
		// clone references
		clone.raisedException.addAll( source.raisedException ) ->
		// clone own containments
		source.parameter.cloneParameter( clone ) ->
		source.return != null
			? source.return.cloneReturnParameter( clone )
			: clone ->
		source.ownedComment.cloneComment( clone ) ->
		clone;
		

/**
 * Clones a parameter based one the specified source parameter and ensures its operation containment.
 * 
 * @return	The cloned parameter.
 */
MParameter cloneParameter(MParameter source, MOperation container) :
	// create a new parameter, clone basic property values and set containment
	let clone = createParameter( container, source.cloneXmiGuid( container ), source.name ) :
		source.logTrace( "cloning: " + source.metaType + ": " ) ->
		// clone extended property values
		clone.processParameter( source.defaultvalue, source.direction, source.multiplicity.cloneMultiplicity() ) ->
		// clone references
		clone.wireType( source.type ) ->
		// clone own containments
		source.ownedComment.cloneComment( clone ) ->
		clone;


/**
 * Clones a return parameter based one the specified source return parameter and ensures its operation containment.
 * 
 * @return	The cloned return parameter.
 */
MParameter cloneReturnParameter(MParameter source, MOperation container) :
	// create a new parameter, clone basic property values and set containment
	let clone = createReturnParameter( container, source.cloneXmiGuid( container ), source.name ) :
		source.logTrace( "cloning return: " + source.metaType + ": " ) ->
		// clone extended property values
		clone.processParameter( source.defaultvalue, source.direction, source.multiplicity.cloneMultiplicity() ) ->
		// clone references
		clone.wireType( source.type ) ->
		// clone own containments
		source.ownedComment.cloneComment( clone ) ->
		clone;


// -- Comment -----------------------------------------------------------------------------------------------


/**
 * Clones a comment based one the specified source comment and by ensuring it's element containment.
 * 
 * @return	The cloned return parameter.
 */
MComment cloneComment(MComment source, MElement container) :
	let clone = createComment( container, source.cloneXmiGuid( container ), source.annotation ) :
		source.nestedComment.cloneComment( clone ) ->
		clone;

/**
 * Clones a comment based one the specified source comment and by ensuring it's comment containment.
 * 
 * @return	The cloned return parameter.
 */
MComment cloneComment(MComment source, MComment container) :
	let clone = createComment( container, source.cloneXmiGuid( container ), source.annotation ) :
		source.nestedComment.cloneComment( clone ) ->
		clone;


// -- Data Types --------------------------------------------------------------------------------------------


/**
 * Clones a multiplicity based on the specified source multiplicity without containment.
 * 
 * @return	The cloned multiplicity without containment.
 */
MMultiplicity cloneMultiplicity(MMultiplicity source) :
	source.logTrace( "cloning: " + source.metaType + ": " ) ->
	createMultiplicity( source.lowerBound, source.upperBound, source.unique, source.ordered );


// -- Extension Mechanism -----------------------------------------------------------------------------------


/**
 * Clones a tagged value based one the specified source tagged value and ensures its element containment.
 * 
 * @return	The cloned parameter.
 */
MTaggedValue cloneTaggedValue(MTaggedValue source, MElement container) :
	// create a new tagged value, clone basic property values and set containment
	let clone = createTaggedValue( container, source.tag, source.value ) :
		source.logTrace( "cloning: " + source.metaType + ": " ) ->
		clone;


// -- Private Functionality ---------------------------------------------------------------------------------

String cloneXmiGuid(MElement elem, MElement container) :
	container.xmiGuid + "_" + elem.xmiGuid;
	
String cloneXmiGuid(MComment comment, MElement container) :
	container.xmiGuid + "_" + comment.xmiGuid;

String cloneXmiGuid(MComment comment, MComment container) :
	container.xmiGuid + "_" + comment.xmiGuid;
