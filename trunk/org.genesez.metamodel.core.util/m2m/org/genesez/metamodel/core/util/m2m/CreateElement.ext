/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;



/**
 * Helper scripts to create GeneSEZ Core meta model elements.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */


// -- Package -----------------------------------------------------------------------------------------------


/**
 * Returns the package instance with the specified properties.
 * It checks if the package is already contained within the package and creates it if needed.
 */
MPackage ensurePackageExistence(MPackage container, String xmiGuid, String name) :
	container.nestedPackage.exists( e | e.name == name )
		? container.nestedPackage.selectFirst( e | e.name == name )
		: createPackage( container, xmiGuid, name );

/**
 * Creates a package with the specified properties and ensures its package containment.
 * 
 * @return	The created package.
 */
create MPackage createPackage(MPackage container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.nestedPackage.add( this ) ->
	this;


// -- Type and Literal --------------------------------------------------------------------------------------


/**
 * Returns the class instance with the specified properties.
 * It checks if the class is already contained within the definition context and creates it if needed.
 */
MClass ensureClassExistence(MDefinitionContext container, String xmiGuid, String name) :
	container.classifier.exists( e | e.name == name )
		? container.classifier.selectFirst( e | e.name == name )
		: createClass( container, xmiGuid, name );

/**
 * Creates a class with the specified properties and ensures its definition context containment.
 * 
 * @return	The created class.
 */
create MClass createClass(MDefinitionContext container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.classifier.add( this ) ->
	this;


/**
 * Returns the interface instance with the specified properties.
 * It checks if the interface is already contained within the definition context and creates it if needed.
 */
MInterface ensureInterfaceExistence(MDefinitionContext container, String xmiGuid, String name) :
	container.classifier.exists( e | e.name == name )
		? container.classifier.selectFirst( e | e.name == name )
		: createInterface( container, xmiGuid, name );

/**
 * Creates an interface with the specified properties and ensures its definition context containment.
 * 
 * @return	The created interface.
 */
create MInterface createInterface(MDefinitionContext container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.classifier.add( this ) ->
	this;


/**
 * Returns the data type instance with the specified properties.
 * It checks if the data type is already contained within the definition context and creates it if needed.
 */
MDataType ensureDataTypeExistence(MDefinitionContext container, String xmiGuid, String name) :
	container.classifier.exists( e | e.name == name )
		? container.classifier.selectFirst( e | e.name == name )
		: createDataType( container, xmiGuid, name );

/**
 * Creates a data type with the specified properties and ensures its definition context containment.
 * 
 * @return	The created data type.
 */
create MDataType createDataType(MDefinitionContext container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.classifier.add( this ) ->
	this;


/**
 * Returns the enumeration instance with the specified properties.
 * It checks if the enumeration is already contained within the definition context and creates it if needed.
 */
MEnumeration ensureEnumerationExistence(MDefinitionContext container, String xmiGuid, String name) :
	container.classifier.exists( e | e.name == name )
		? container.classifier.selectFirst( e | e.name == name )
		: createEnumeration( container, xmiGuid, name );

/**
 * Creates an enumeration with the specified properties and ensures its definition context containment.
 * 
 * @return	The created enumeration.
 */
create MEnumeration createEnumeration(MDefinitionContext container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.classifier.add( this ) ->
	this;


/**
 * Returns the literal instance with the specified properties.
 * It checks if the literal is already contained within the enumeration and creates it if needed.
 */
MLiteral ensureLiteralExistence(MEnumeration container, String xmiGuid, String name) :
	container.literal.exists( e | e.name == name )
		? container.literal.selectFirst( e | e.name == name )
		: createLiteral( container, xmiGuid, name );

/**
 * Creates a literal with the specified properties and ensures its enumeration containment.
 * 
 * @return	The created literal.
 */
create MLiteral createLiteral(MEnumeration container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.literal.add( this ) ->
	this;


/**
 * Returns the external type instance with the specified properties.
 * It checks if the external type is already contained within the model and creates it if needed.
 */
MExternal ensureExternalTypeExistence(MModel container, String xmiGuid, String name) :
	container.externalTypes.exists( e | e.name == name )
		? container.externalTypes.selectFirst( e | e.name == name )
		: createExternalType( container, xmiGuid, name );

/**
 * Creates an external type with the specified properties and ensures its model containment.
 * 
 * @return	The created external type.
 */
create MExternal createExternalType(MModel container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.externalTypes.add( this ) ->
	this;


// -- Property ----------------------------------------------------------------------------------------------


/**
 * Returns the attribute instance with the specified properties.
 * It checks if the attribute is already contained within the classifier and creates it if needed.
 */
MAttribute ensureAttributeExistence(MClassifier container, String xmiGuid, String name) :
	container.property.exists( e | e.name == name )
		? container.property.selectFirst( e | e.name == name )
		: createAttribute( container, xmiGuid, name );

/**
 * Creates an attribute with the specified properties and ensures its classifier containment.
 * 
 * @return	The created attribute.
 */
create MAttribute createAttribute(MClassifier container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.property.add( this ) ->
	this;


// -- Operation and Parameter -------------------------------------------------------------------------------


/**
 * Returns the operation instance with the specified properties.
 * It checks if the operation is already contained within the classifier and creates it if needed.
 */
MOperation ensureOperationExistence(MClassifier container, String xmiGuid, String name) :
	container.operation.exists( e | e.name == name )
		? container.operation.selectFirst( e | e.name == name )
		: createOperation( container, xmiGuid, name );

/**
 * Creates an operation with the specified properties and ensures its classifier containment.
 * 
 * @return	The created operation.
 */
create MOperation createOperation(MClassifier container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.operation.add( this ) ->
	this;


/**
 * Returns the parameter instance with the specified properties.
 * It checks if the parameter is already contained within the operation and creates it if needed.
 */
MParameter ensureParameterExistence(MOperation container, String xmiGuid, String name) :
	container.parameter.exists( e | e.name == name )
		? container.parameter.selectFirst( e | e.name == name )
		: createParameter( container, xmiGuid, name );

/**
 * Creates a parameter with the specified properties and ensures its operation containment.
 * 
 * @return	The created parameter.
 */
create MParameter createParameter(MOperation container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.parameter.add( this ) ->
	this;


/**
 * Returns the return parameter instance with the specified properties.
 * It checks if the return parameter is already contained within the operation and creates it if needed.
 */
MParameter ensureReturnParameterExistence(MOperation container, String xmiGuid, String name) :
	container.return.name == name
		? container.return
		: createReturnParameter( container, xmiGuid, name );


/**
 * Creates a return parameter with the specified properties and ensures its operation containment.
 * 
 * @return	The created return parameter.
 */
create MParameter createReturnParameter(MOperation container, String xmiGuid, String name) :
	// set basic properties 
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.setReturn( this ) ->
	this;


// -- Comment -----------------------------------------------------------------------------------------------


/**
 * Returns the comment instance with the specified properties.
 * It checks if the comment is already contained within the element and creates it if needed.
 */
MComment ensureCommentExistence(MElement container, String xmiGuid, String annotation) :
	container.ownedComment.exists( e | e.annotation == annotation )
		? container.ownedComment.selectFirst( e | e.annotation == annotation )
		: createComment( container, xmiGuid, annotation );

/**
 * Creates a comment with the specified properties and ensures its element containment.
 * 
 * @return	The created comment.
 */
create MComment createComment(MElement container, String xmiGuid, String annotation) :
	// set basic properties 
	setXmiGuid( xmiGuid ) ->
	setAnnotation( annotation ) ->
	// set containment
	container.ownedComment.add( this ) ->
	this;
	

// -- Extension Mechanism -----------------------------------------------------------------------------------


/**
 * Returns the stereotype instance with the specified properties.
 * It checks if the stereotype is already contained within the model and creates it if needed.
 */
MStereotype ensureStereotypeExistence(MModel container, String xmiGuid, String name) :
	container.anyStereotype.exists( s | s.name == name )
		? container.anyStereotype.selectFirst( s | s.name == name )
		: createStereotype( container, xmiGuid, name );

/**
 * Creates a stereotype with the specified properties and ensures its model containment.
 * 
 * @return	The created stereotype.
 */
create MStereotype createStereotype(MModel container, String xmiGuid, String name) :
	// set basic properties
	setBasicProperties( xmiGuid, name ) ->
	// set containment
	container.anyStereotype.add( this ) ->
	this;
	

/**
 * Returns the tag instance with the specified properties.
 * It checks if the stereotype has already the specified tag and creates it if needed.
 */
MTag ensureTagExistence(MStereotype container, String name, String type) :
	container.property.exists( p | p.name == name )
		? container.property.selectFirst( p | p.name == name )
		: createTag( container, name, type );

/**
 * Creates a tag with the specified properties and ensures its model containment.
 * 
 * @return	The created tag.
 */
create MTag createTag(MStereotype container, String name, String type) :
	// set basic properties
	setName( name ) ->
	setType( type ) ->
	// set containment
	container.property.add( this ) ->
	this;
	

/**
 * Returns the tagged value instance with the specified properties.
 * It checks if the tagged value is already present and creates it if needed.
 * It checks the stereotype assignment to the model element too and assigns it if needed.
 */
MTaggedValue ensureTaggedValueExistence(MElement container, MTag tag, String value) :
	// check stereotype assignment
	container.ensureStereotypeAssignment( tag.stereotype ) ->
	// check tagged value assignment
	container.taggedValue.exists( tv | tv.tag == tag && tv.value == value )
		? container.taggedValue.selectFirst( tv | tv.tag == tag && tv.value == value )
		: createTaggedValue( container, tag, value );

/**
 * Creates a tagged value with the specified properties and ensures its model containment.
 * It ensures the assignment of the stereotype to the model element.
 * 
 * @return	The created tagged value.
 */
create MTaggedValue createTaggedValue(MElement container, MTag tag, String value) :
	// set basic properties
	setValue( value ) ->
	setTag( tag ) ->
	// set containment
	container.taggedValue.add( this ) ->
	// ensure stereotype assignment to model element
	container.ensureStereotypeAssignment( tag.stereotype ) ->
	this;

/**
 * Returns the tagged value instance with the specified properties.
 * It checks if the tagged value is already present and creates it if needed.
 * It checks the stereotype assignment to the model element too and assigns it if needed.
 */
MTaggedValue ensureTaggedValueExistence(MElement container, MTag tag, MElement valueReference) :
	// check stereotype assignment
	container.ensureStereotypeAssignment( tag.stereotype ) ->
	// check tagged value assignment
	container.taggedValue.exists( tv | tv.tag == tag && tv.valueReference == valueReference )
		? container.taggedValue.selectFirst( tv | tv.tag == tag && tv.valueReference == valueReference )
		: createTaggedValue( container, tag, valueReference );

/**
 * Creates a tagged value with the specified properties and ensures its model containment.
 * It ensures the assignment of the stereotype to the model element.
 * 
 * @return	The created tagged value.
 */
create MTaggedValue createTaggedValue(MElement container, MTag tag, MElement valueReference) :
	// set basic properties
	setValueReference( valueReference ) ->
	setTag( tag ) ->
	// set containment
	container.taggedValue.add( this ) ->
	// ensure stereotype assignment to model element
	container.ensureStereotypeAssignment( tag.stereotype ) ->
	this;


// -- Private Functionality ---------------------------------------------------------------------------------


/**
 *
 */
private MElement setBasicProperties(MElement this, String xmiGuid, String name) :
	setXmiGuid( xmiGuid ) ->
	setName( name ) ->
	this;

	
/**
 * Assigns the specified stereotype to the specified model element if not already assigned.
 * 
 * @return	The model element specified.
 */
private MElement ensureStereotypeAssignment(MElement this, MStereotype stereotype) :
	!this.stereotype.contains( stereotype )
		? ( this.stereotype.add( stereotype ) -> this )
		: this;