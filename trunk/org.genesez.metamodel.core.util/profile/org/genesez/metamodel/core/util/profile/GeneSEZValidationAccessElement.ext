/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Simplifies access to "GeneSEZ Validation Profile" profile and makes working with them more easier.
 * 
 * HINT: All scripts for extension mechanism are available under the prefix 'em'.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer) 
 */


// use metamodel core extension mechanism scripts
extension org::genesez::metamodel::core::util::AccessElement;

// use profile scripts
extension org::genesez::metamodel::core::util::profile::GeneSEZValidationProfile;


// -- Xtend scripts for Stereotype "AlphanumericValidator" --

/**
 * Checks if an element is annotated with the stereotype "AlphanumericValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasAlphanumericValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prAlphanumericValidator() );


// -- Xtend scripts for Stereotype "DateTimeValidator" --

/**
 * Checks if an element is annotated with the stereotype "DateTimeValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasDateTimeValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prDateTimeValidator() );


// -- Xtend scripts for Stereotype "DontValidate" --

/**
 * Checks if an element is annotated with the stereotype "DontValidate".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasDontValidateStereotype(MElement this) :
	emHasStereotypeAssignment( prDontValidate() );


// -- Xtend scripts for Stereotype "EMailAddressValidator" --

/**
 * Checks if an element is annotated with the stereotype "EMailAddressValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasEMailAddressValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prEMailAddressValidator() );


// -- Xtend scripts for Stereotype "FloatValidator" --

/**
 * Checks if an element is annotated with the stereotype "FloatValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasFloatValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prFloatValidator() );


// -- Xtend scripts for Stereotype "GenericObjectValidator" --

/**
 * Checks if an element is annotated with the stereotype "GenericObjectValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasGenericObjectValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prGenericObjectValidator() );


// -- Xtend scripts for Stereotype "IntegerValidator" --

/**
 * Checks if an element is annotated with the stereotype "IntegerValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasIntegerValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prIntegerValidator() );


// -- Xtend scripts for Stereotype "NotEmptyValidator" --

/**
 * Checks if an element is annotated with the stereotype "NotEmptyValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasNotEmptyValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prNotEmptyValidator() );


// -- Xtend scripts for Stereotype "NumberRangeValidator" --

/**
 * Checks if an element is annotated with the stereotype "NumberRangeValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasNumberRangeValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prNumberRangeValidator() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "NumberRangeValidator".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasNumberRangeValidatorTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prNumberRangeValidator(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "NumberRangeValidator".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasNumberRangeValidatorTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prNumberRangeValidator(), tag, valueReference );


// -- "endRange" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "endRange" of the stereotype "NumberRangeValidator" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasNumberRangeValidatorUtilizableEndRange(MElement this) :
	emHasUtilizableTaggedValue( prNumberRangeValidator(), prNumberRangeValidatorEndRange() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "endRange" of the stereotype "NumberRangeValidator".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasNumberRangeValidatorEndRange(MElement this, String value) :
	emHasTaggedValue( prNumberRangeValidator(), prNumberRangeValidatorEndRange(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "endRange" of the stereotype "NumberRangeValidator".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetNumberRangeValidatorOwningEndRange(MElement this) : 
	emOwningTaggedValues( prNumberRangeValidator(), prNumberRangeValidatorEndRange() );


/**
 * Returns the value of the single-valued tagged value "endRange"
 * of the stereotype "NumberRangeValidator".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetNumberRangeValidatorEndRange(MElement this) :
	emGetTaggedValue( prNumberRangeValidator(), prNumberRangeValidatorEndRange() );


// -- "startRange" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "startRange" of the stereotype "NumberRangeValidator" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasNumberRangeValidatorUtilizableStartRange(MElement this) :
	emHasUtilizableTaggedValue( prNumberRangeValidator(), prNumberRangeValidatorStartRange() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "startRange" of the stereotype "NumberRangeValidator".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasNumberRangeValidatorStartRange(MElement this, String value) :
	emHasTaggedValue( prNumberRangeValidator(), prNumberRangeValidatorStartRange(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "startRange" of the stereotype "NumberRangeValidator".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetNumberRangeValidatorOwningStartRange(MElement this) : 
	emOwningTaggedValues( prNumberRangeValidator(), prNumberRangeValidatorStartRange() );


/**
 * Returns the value of the single-valued tagged value "startRange"
 * of the stereotype "NumberRangeValidator".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetNumberRangeValidatorStartRange(MElement this) :
	emGetTaggedValue( prNumberRangeValidator(), prNumberRangeValidatorStartRange() );


// -- Xtend scripts for Stereotype "NumberValidator" --

/**
 * Checks if an element is annotated with the stereotype "NumberValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasNumberValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prNumberValidator() );


// -- Xtend scripts for Stereotype "RegularExpressionValidator" --

/**
 * Checks if an element is annotated with the stereotype "RegularExpressionValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasRegularExpressionValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prRegularExpressionValidator() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "RegularExpressionValidator".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasRegularExpressionValidatorTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prRegularExpressionValidator(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "RegularExpressionValidator".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasRegularExpressionValidatorTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prRegularExpressionValidator(), tag, valueReference );


// -- "regularExpression" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "regularExpression" of the stereotype "RegularExpressionValidator" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasRegularExpressionValidatorUtilizableRegularExpression(MElement this) :
	emHasUtilizableTaggedValue( prRegularExpressionValidator(), prRegularExpressionValidatorRegularExpression() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "regularExpression" of the stereotype "RegularExpressionValidator".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasRegularExpressionValidatorRegularExpression(MElement this, String value) :
	emHasTaggedValue( prRegularExpressionValidator(), prRegularExpressionValidatorRegularExpression(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "regularExpression" of the stereotype "RegularExpressionValidator".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetRegularExpressionValidatorOwningRegularExpression(MElement this) : 
	emOwningTaggedValues( prRegularExpressionValidator(), prRegularExpressionValidatorRegularExpression() );


/**
 * Returns the value of the single-valued tagged value "regularExpression"
 * of the stereotype "RegularExpressionValidator".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetRegularExpressionValidatorRegularExpression(MElement this) :
	emGetTaggedValue( prRegularExpressionValidator(), prRegularExpressionValidatorRegularExpression() );


// -- Xtend scripts for Stereotype "StringLengthValidator" --

/**
 * Checks if an element is annotated with the stereotype "StringLengthValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasStringLengthValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prStringLengthValidator() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "StringLengthValidator".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasStringLengthValidatorTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prStringLengthValidator(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "StringLengthValidator".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasStringLengthValidatorTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prStringLengthValidator(), tag, valueReference );


// -- "maximum" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "maximum" of the stereotype "StringLengthValidator" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasStringLengthValidatorUtilizableMaximum(MElement this) :
	emHasUtilizableTaggedValue( prStringLengthValidator(), prStringLengthValidatorMaximum() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "maximum" of the stereotype "StringLengthValidator".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasStringLengthValidatorMaximum(MElement this, String value) :
	emHasTaggedValue( prStringLengthValidator(), prStringLengthValidatorMaximum(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "maximum" of the stereotype "StringLengthValidator".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetStringLengthValidatorOwningMaximum(MElement this) : 
	emOwningTaggedValues( prStringLengthValidator(), prStringLengthValidatorMaximum() );


/**
 * Returns the value of the single-valued tagged value "maximum"
 * of the stereotype "StringLengthValidator".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetStringLengthValidatorMaximum(MElement this) :
	emGetTaggedValue( prStringLengthValidator(), prStringLengthValidatorMaximum() );


// -- "minimum" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "minimum" of the stereotype "StringLengthValidator" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasStringLengthValidatorUtilizableMinimum(MElement this) :
	emHasUtilizableTaggedValue( prStringLengthValidator(), prStringLengthValidatorMinimum() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "minimum" of the stereotype "StringLengthValidator".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasStringLengthValidatorMinimum(MElement this, String value) :
	emHasTaggedValue( prStringLengthValidator(), prStringLengthValidatorMinimum(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "minimum" of the stereotype "StringLengthValidator".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetStringLengthValidatorOwningMinimum(MElement this) : 
	emOwningTaggedValues( prStringLengthValidator(), prStringLengthValidatorMinimum() );


/**
 * Returns the value of the single-valued tagged value "minimum"
 * of the stereotype "StringLengthValidator".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetStringLengthValidatorMinimum(MElement this) :
	emGetTaggedValue( prStringLengthValidator(), prStringLengthValidatorMinimum() );


// -- Xtend scripts for Stereotype "StringValidator" --

/**
 * Checks if an element is annotated with the stereotype "StringValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasStringValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prStringValidator() );


// -- Xtend scripts for Stereotype "TextValidator" --

/**
 * Checks if an element is annotated with the stereotype "TextValidator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTextValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prTextValidator() );


// -- Xtend scripts for Stereotype "Validator" --

/**
 * Checks if an element is annotated with the stereotype "Validator".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasValidatorStereotype(MElement this) :
	emHasStereotypeAssignment( prValidator() );


/* PROTECTED REGION ID(accesselement.own.code.implementation.bb1a5239-1c81-11e3-8460-2388508c54e2) ENABLED START */
// TODO: put your further code implementations here
/* PROTECTED REGION END */
