/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Helper scripts to simplifies access to GeneSEZ Core meta model elements and
 * makes working with them more easier.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 * @author	Andre Pfl√ºger <andre.pflueger@fh-zwickau.de>
 */

extension org::genesez::util::logging::Logging;
extension org::genesez::metamodel::core::util::m2m::CreateElement;


// -- Multiplicity Elements (Properties, Parameters, Operations) --------------------------------------------


// -- Property --


/**
 * Checks if a property is single-valued.
 * 
 * @return	True if the property is single-valued, otherwise false.
 * @api
 */
boolean isSingleValued(MProperty this) :
	multiplicity.upperBound == 0 || multiplicity.upperBound == 1;


/**
 * Checks if a property is multi-valued.
 * 
 * @return	True if the property is multi-valued, otherwise false.
 * @api
 */
boolean isMultiValued(MProperty this) :
	multiplicity.upperBound == -1 || multiplicity.upperBound > 1;


/**
 * Checks if a property has a fixed lower count of values.
 * 
 * @return	True if the property has a fixed lower count of values, otherwise false.
 * @api
 */
boolean hasFixedLowerBoundMultiplicity(MProperty this) : 
	multiplicity.lowerBound > -1;


/**
 * Checks if a property has a fixed upper count of values.
 * @return	True if the property has a fixed upper count of values, otherwise false.
 * @api
 */
boolean hasFixedUpperBoundMultiplicity(MProperty this) : 
	multiplicity.upperBound > -1;


// -- Association Role --


/**
 * Checks if the opposite of an association role is single-valued.
 * 
 * @return	True if the opposite of the association role is single-valued, otherwise false.
 * @api
 */
boolean isOppositeSingleValued(MAssociationRole this) :
	oppositeMultiplicity.upperBound == 0 || oppositeMultiplicity.upperBound == 1;


/**
 * Checks if the opposite of an association role is multi-valued.
 * 
 * @return	True if the opposite of the association role is multi-valued, otherwise false.
 * @api
 */
boolean isOppositeMultiValued(MAssociationRole this) :
	oppositeMultiplicity.upperBound == -1 || oppositeMultiplicity.upperBound > 1;


/**
 * Checks if the opposite of an association role has a fixed lower count of values.
 * 
 * @return	True if the opposite of the association role has a fixed lower count of values, otherwise false.
 * @api
 */
boolean hasOppositeFixedLowerBoundMultiplicity(MAssociationRole this) : 
	oppositeMultiplicity.lowerBound > -1;


/**
 * Checks if the opposite of an association role has a fixed upper count of values.
 * 
 * @return	True if the opposite of the association role has a fixed upper count of values, otherwise false.
 * @api
 */
boolean hasOppositeFixedUpperBoundMultiplicity(MAssociationRole this) : 
	oppositeMultiplicity.upperBound > -1;


/**
 * Checks if the qualifier of an qualified association role is single-valued.
 * 
 * @return	True if the qualifier of the the qualified association role is single-valued, otherwise false.
 * @api
 */
boolean isQualifierSingleValued(MAssociationRole this) :
	qualifierMultiplicity.upperBound == 0 || qualifierMultiplicity.upperBound == 1;


/**
 * Checks if the qualifier of an qualified association role is multi-valued.
 * 
 * @return	True if the qualifier of the the qualified association role is multi-valued, otherwise false.
 * @api
 */
boolean isQualifierMultiValued(MAssociationRole this) :
	qualifierMultiplicity.upperBound == -1 || qualifierMultiplicity.upperBound > 1;


/**
 * Checks if the qualifier of an qualified association role has a fixed lower count of values.
 * 
 * @return	True if the qualifier of the qualified association role has a fixed lower count of values, otherwise false.
 * @api
 */
boolean hasQualifierFixedLowerBoundMultiplicity(MAssociationRole this) : 
	qualifierMultiplicity.lowerBound > -1;
	

/**
 * Checks if the qualifier of an qualified association role has a fixed upper count of values.
 * 
 * @return	True if the qualifier of the qualified association role has a fixed upper count of values, otherwise false.
 * @api
 */
boolean hasQualifierFixedUpperBoundMultiplicity(MAssociationRole this) : 
	qualifierMultiplicity.upperBound > -1;


// -- Parameter --


/**
 * Checks if the parameter is single-valued.
 * 
 * @return	True if the parameter is single-valued, otherwise false.
 * @api
 */
boolean isSingleValued(MParameter this) :
	multiplicity.upperBound == 0 || multiplicity.upperBound == 1;


/**
 * Checks if the parameter is multi-valued.
 * 
 * @return	True if the parameter is multi-valued, otherwise false.
 * @api
 */
boolean isMultiValued(MParameter this) :
	multiplicity.upperBound == -1 || multiplicity.upperBound > 1;


/**
 * Checks if a parameter has a fixed lower count of values.
 * 
 * @return	True if the parameter has a fixed lower count of values, otherwise false.
 * @api
 */
boolean hasFixedLowerBoundMultiplicity(MParameter this) : 
	multiplicity.lowerBound > -1;


/**
 * Checks if a parameter has a fixed upper count of values.
 * 
 * @return	True if the parameter has a fixed upper count of values, otherwise false.
 * @api
 */
boolean hasFixedUpperBoundMultiplicity(MParameter this) : 
	multiplicity.upperBound > -1;


// -- Operation --


/**
 * Checks if the return parameter of an operation is single-valued.
 * 
 * @return	True if the return parameter of the operation is single-valued, otherwise false.
 * @api
 * @todo: use Xtend script hasReturnParameter
 * @deprecated
 */
boolean isReturnSingleValued(MOperation this) :
	return != null
		? return.isSingleValued()
		: false;


/**
 * Checks if the return parameter of an operation is multi-valued.
 * 
 * @return	True if the return parameter of the operation is multi-valued, otherwise false.
 * @api
 * @todo: use Xtend script hasReturnParameter
 * @deprecated
 */
boolean isReturnMultiValuedType(MOperation this) :
	return != null
		? !return.isSingleValued()
		: false;


/**
 * Checks if the return parameter of an operation has a fixed lower count of values.
 * 
 * @return	True if the return parameter of the operation has a fixed lower count of values, otherwise false.
 * @api
 * @todo: use Xtend script hasReturnParameter
 * @deprecated
 */
boolean hasReturnFixedLowerBoundMultiplicity(MOperation this) : 
	return != null
		? !return.hasFixedLowerBoundMultiplicity()
		: false;


/**
 * Checks if the return parameter of an operation has a fixed upper count of values.
 * 
 * @return	True if the return parameter of the operation has a fixed upper count of values, otherwise false.
 * @api
 * @todo: use Xtend script hasReturnParameter
 * @deprecated
 */
boolean hasReturnFixedUpperBoundMultiplicity(MOperation this) : 
	return != null
		? !return.hasFixedUpperBoundMultiplicity()
		: false;


// -- Properties --------------------------------------------------------------------------------------------


// -- Getter for a Classifier --


/**
 * Returns the list of properties of an classifier including inherited,
 * whereas all attributes are added first to the list.
 *
 * @return 	The list of properties of the classifier, otherwise an empty list.
 * @see allAttributes(MClassifier)
 * @see allAssociationRoles(MClassifier)
 * @api
 */
List[MAttribute] allProperties(MClassifier this) :
	{ allAttributes() }.addAll(
		allAssociationRoles()
	);


/**
 * Returns the list of initializable properties of an classifier including inherited,
 * whereas all initializable attributes are added first to the list.
 * 
 * @return	The list of initializable properties of the classifier, otherwise an empty list.
 * @see allInitializableAttributes(MClassifier)
 * @see allInitializableAssociationRoles(MClassifier)
 */
List[MProperty] allInitializableProperties(MClassifier this) :
	{ allInitializableAttributes() }.addAll(
		allInitializableAssociationRoles()
	);


/**
 * Returns the list of owning initializable properties of an classifier including inherited,
 * whereas all owning initializable attributes are added first to the list.
 * 
 * @return	The list of initializable properties of the classifier, otherwise an empty list.
 * @see owningInitializableAttributes(MClassifier)
 * @see owningInitializableAssociationRoles(MClassifier)
 * @api
 */
List[MProperty] owningInitializableProperties(MClassifier this) :
	{ owningInitializableAttributes() }.addAll(
		owningInitializableAssociationRoles() 
	);


// -- Attributes --------------------------------------------------------------------------------------------


// -- Checks for a Classifier --

/**
 * Checks if a classifier has owning attributes.
 * 
 * @return	True if the classifier has owning attributes, otherwise false.
 * @api
 */
boolean hasAttributes(MClassifier this) : 
	property.exists( a | a.metaType == MAttribute );


/**
 * Checks if a classifier has owning initializable attributes.
 *
 * @return	True if the classifier has owning initializable attributes, otherwise false.
 */
boolean hasInitializableAttributes(MClassifier this) : 
	property.typeSelect( MAttribute ).exists( a | !a.static && !a.derived && !( a.final && a.hasDefaultValue() ) );


/**
 * Checks if a classifier has owning derived attributes.
 * 
 * @return	True if the classifier has derived attributes, otherwise false.
 * @api
 */
boolean hasDerivedAttributes(MClassifier this) : 
	property.typeSelect( MAttribute ).exists( a | a.derived );


// -- Getter for a Classifier --


/**
 * Returns the list of attributes of an classifier including inherited,
 * whereas inherited attributes are added first to the list.
 *
 * @return 	The list of attributes of the classifier, otherwise an empty list.
 * @api
 */
List[MAttribute] allAttributes(MClassifier this) :
	{}.addAll(
		generalization.allAttributes()
	).addAll(
		realization.allAttributes()
	).addAll( property.typeSelect( MAttribute) );


/**
 * Just there for error free templates.
 * Just called if a generalization or realization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allAttributes(MClassifier)
 */
private List[MAttribute] allAttributes(MType this) : 
	{};


/**
 * Returns the list of initializable attributes of an classifier including inherited which 
 * are neither final nor derived, whereas inherited initializable attributes are added first to the list.
 *
 * @return	The list of initializable attributes of the classifier, otherwise an empty list.
 * @api
 */
List[MAttribute] allInitializableAttributes(MClassifier this) :
	{}.addAll(
		generalization.allInitializableAttributes()
	).addAll( owningInitializableAttributes() );


/**
 * Just there for error free templates.
 * Just called if a generalization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allInitializableAttributes(MClassifier)
 */
private List[MAttribute] allInitializableAttributes(MType this) : 
	{};


/**
 * Returns the list of owning initializable attributes of an classifier which
 * are neither final nor derived.
 * 
 * @return	The list of initializable attributes of the classifier, otherwise an empty list.
 * @api
 */
List[MAttribute] owningInitializableAttributes(MClassifier this) :
	property.typeSelect(MAttribute).select( a | 
		!a.static && !a.derived && !( a.final && a.hasDefaultValue() )
	);


// -- Checks for an Attribute --


/**
 * Checks if an attribute has a default value
 * 
 * @return	True if the attribute has a default value, otherwise false.
 * @api
 */
boolean hasDefaultValue(MAttribute this) :
	defaultvalue.length > 0;


// -- Association Roles -------------------------------------------------------------------------------------



// -- Checks for a Classifier --


/**
 * Checks if a classifier has owning association roles.
 * 
 * @return	True if the classifier has owning association roles, otherwise false.
 * @api
 */
boolean hasAssociationRoles(MClassifier this) : 
	property.exists( ar | ar.metaType == MAssociationRole );


/**
 * Checks if a classifier has owning initializable association roles.
 *
 * @return	True if the classifier has owning initializable association roles, otherwise false.
 * @api
 */
boolean hasInitializableAssociationRoles(MClassifier this) : 
	property.typeSelect( MAssociationRole ).exists( ar | !ar.derived );


// -- Getter for a Classifier --


/**
 * Returns the list of association roles of an classifier including inherited,
 * whereas inherited association roles are added first to the list.
 *
 * @return 	The list of association roles of the classifier, otherwise an empty list.
 * @api
 */
List[MAssociationRole] allAssociationRoles(MClassifier this) :
	{}.addAll(
		generalization.allAssociationRoles()
	).addAll(
		realization.allAssociationRoles()
	).addAll( property.typeSelect(MAssociationRole) );


/**
 * Just there for error free templates.
 * Just called if a generalization or realization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allAssociationRoles(MClassifier)
 */
private List[MAssociationRole] allAssociationRoles(MType this) : 
	{};


/**
 * Returns the list of initializable association roles of an classifier including inherited which 
 * are not derived, whereas inherited initializable association roles are added first to the list.
 *
 * @return	The list of initializable association roles of the classifier, otherwise an empty list.
 * @api
 */
List[MAssociationRole] allInitializableAssociationRoles(MClassifier this) :
	{}.addAll(
		realization.allInitializableAssociationRoles()
	).addAll( owningInitializableAssociationRoles() );


/**
 * Just there for error free templates.
 * Just called if a generalization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allInitializableAssociationRoles(MClassifier)
 */
private List[MAssociationRole] allInitializableAssociationRoles(MType this) : 
	{};


/**
 * Returns the list of owning initializable association roles of an classifier which
 * are not derived.
 * 
 * @return	The list of initializable association roles of the classifier, otherwise an empty list.
 * @api
 */
List[MAssociationRole] owningInitializableAssociationRoles(MClassifier this) :
	property.typeSelect(MAssociationRole).select( ar | 
		!ar.derived
	);


// -- Checks for an Association Role --


/**
 * Checks if an association role has an opposite.
 * 
 * @return	True if the association role has an opposite, otherwise false.
 * @api
 */
boolean hasOpposite(MAssociationRole this) : 
	opposite != null;


/**
 * Checks if an association role has a qualifier.
 * 
 * @return	True if the association role has a qualifier, otherwise false.
 * @api
 */
boolean hasQualifier(MAssociationRole this) : 
	qualifier != null;


/**
 * Checks if the opposite of an association role has a qualifier.
 * 
 * @return	True if the opposite of the association role has a qualifier, otherwise false.
 * @api
 */
boolean hasOppositeQualifier(MAssociationRole this) :
	hasOpposite() && opposite.hasQualifier();


/**
 * Checks if an association role belongs to an association class.
 * It returns true, if 
 * 
 * @return	True, if it's a plain association role and doesn't belongs to an association class and 
 * 			false, if the association role belongs to an association class
 */
boolean hasAssociationClass(MAssociationRole this) :
	association.associationClass != null;


/**
 * getter for the association class of an association role
 * @param	aend	an association role
 * @return	the association class of an association role (or null)
 * @see		isPlainAssociation
 * @todo do we really need this?
 * @todo rename it to associationClass 
 */
MClass assocClass(MAssociationRole this) :
	association.associationClass;


/**
 * Check if a class is an association class.
 * 
 * @return	True if the class is an association class, otherwise false.
 * @api
 */
boolean isAssociationClass(MClass this) : 
	ownedAssociation != null;


/**
 * Check if a classifier is an association class.
 * 
 * @return	False.
 * @see		isAssociationClass(MClass)
 */
boolean isAssociationClass(MClassifier this) : 
	false;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	operations
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if a classifier has operations
 * @return	true if the classifier has operations, otherwise false
 */
boolean hasOperations(MClassifier this) : operation.size > 0;

/**
 * checks if a classifier has operation declarations, that is, if it has abstract operations
 * @return	true if the classifier has abstract operations, otherwise false
 */
boolean hasOperationDeclarations(MClassifier this) : 
	operation.reject( o|o.isConstructor() || o.isDestructor() || !o.abstract ).size > 0;

/**
 * checks if a classifier has one or more constructors
 * @return	true if the classifier has constructors, otherwise false
 * @see		isConstructor(MOperation)
 */
boolean hasConstructors(MClassifier this) : operation.exists( o|o.isConstructor() );

/**
 * checks if an operation is a constructor of a classifier
 * @return	true if the operation is a constructor, otherwise false
 */
boolean isConstructor(MOperation this) :
	hasStereotype("Create") || hasStereotype("create") || classifier.name == name;

/**
 * checks if a classifier has one or more destructors
 * @return	true if the classifier has destructors, otherwise false
 * @see		isDestructor(MOperation)
 */
boolean hasDestructors(MClassifier this) : operation.exists( o|o.isDestructor() );

/**
 * checks if an operation is a destructor of a classifier
 * @return	true if the operation is a destructor, otherwise false
 */
boolean isDestructor(MOperation this) :
	hasStereotype("Destroy") || hasStereotype("destroy") || name.startsWith("~");

/**
 * checks if an operation has a return type
 * @return	true if the operation has a return type, otherwise false
 */
boolean hasReturn(MOperation this) :
	return != null && return.type.name().toLowerCase() != "void";

/**
 * checks if a parameter has a default value
 * @return	true if the parameter has a default value, otherwise false
 */
boolean hasDefaultValue(MParameter this) :
	defaultvalue.length > 0;

/**
 * checks if an operation can throw exceptions
 * @return	true if the operation can throw exceptions, otherwise false
 */
boolean hasExceptions(MOperation this) : !raisedException.isEmpty;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	comments
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Checks if an element has one or more comments.
 * 
 * @return	True if the element has at least one comment, otherwise false.
 */
boolean hasComment(MElement this) :
	ownedComment.size > 0;


	

// -- Generics ----------------------------------------------------------------------------------------------


/**
 * Checks if a classifier has one or more generic parameters.
 * 
 * @return	True if the classifier has at least one generic parameter, otherwise false.
 * @api
 */
boolean hasGenericParameter(MClassifier this) :
	genericParameter.size > 0;


/**
 * Checks if an external type has one or more generic parameters.
 * 
 * @return	True if the external type has at least one generic parameter, otherwise false.
 * @api
 */
boolean hasGenericParameter(MExternal this) :
	genericParameter.size > 0;


/**
 * Checks if a property has one or more generic realizations.
 * 
 * @return	True if the property has at least one generic realization, otherwise false.
 * @api
 */
boolean hasGenericRealization(MProperty this) :
	genericRealization.size > 0;


/**
 * Checks if an operation has one or more generic parameter.
 * 
 * @return	True if the operation has at least one generic parameter, otherwise false.
 * @api
 */
boolean hasGenericParameter(MOperation this) :
	genericParameter.size > 0;
	

/**
 * Checks if a parameter has one or more generic realizations.
 * @return	True if the parameter has at least one generic realizations, otherwise false.
 * @api
 */
boolean hasGenericRealization(MParameter this) :
	genericRealization.size > 0;



/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	stereotypes + tagged values
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if an element is annotated with a stereotype
 * @param	stereotype	the name of a stereotype
 * @return	true if the element has the stereotype, otherwise false
 */
boolean hasStereotype(MElement this, String stereotype) :
	this.stereotype.name.contains(stereotype);

/**
 * return a stereotype with the given name
 * @param	this	the instance of MElement
 * @param	name	the name of a stereotype
 * @return	the stereotype
 */
MStereotype getStereotype(MElement this, String name) :
	this.stereotype.selectFirst(e|e.name == name);

/**
 * checks if an element has a tagged value by ignoring the stereotype
 * @param	tag		the name of a tagged value
 * @param	value	the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasTaggedValue(MElement this, String tag, String value) :
	taggedValue.exists( e| e.tag.name == tag && e.value == value );
	
/**
 * checks if an element has a tagged value by ignoring the stereotype
 * @param	tag				the name of a tagged value
 * @param	valueReference	the value reference of a tagged value
 * @return	true if the element has a tag with the given value reference, otherwise false
 */
boolean hasTaggedValue(MElement this, String tag, MElement valueReference) :
	taggedValue.exists( e| e.tag.name == tag && e.valueReference == valueReference );

/**
 * checks if an element has a tagged value of a specific stereotype
 * @param	sterotype	the name of a stereotype
 * @param	tag			the name of a tagged value
 * @param	value		the value of a tagged value
 * @return	true if the element has a tag with the given value, otherwise false
 */
boolean hasTaggedValue(MElement this, String stereotype, String tag, String value) :
	!taggedValue.typeSelect(MTaggedValue)
		.select( e| e.value == value && e.tag.name == tag && e.tag.stereotype.name == stereotype)
		.isEmpty;
		
/**
 * checks if an element has a tagged value of a specific stereotype
 * @param	sterotype		the name of a stereotype
 * @param	tag				the name of a tagged value
 * @param	valueReference	the value reference of a tagged value
 * @return	true if the element has a tag with the given value reference, otherwise false
 */
boolean hasTaggedValue(MElement this, String stereotype, String tag, MElement valueReference) :
	!taggedValue.typeSelect(MTaggedValue)
		.select( e| e.valueReference == valueReference && e.tag.name == tag && e.tag.stereotype.name == stereotype)
		.isEmpty;

/**
 * 	returns a tagged value of a stereotype if exists
 *
 * 	@param	stereotype	the name of a stereotype
 *	@param	tag			the name of a tagged value
 *	
 * 	@return		value of the tagged value
 */
String getTaggedValue(MElement this, String stereotype, String tag) :
	this.taggedValue.exists(e|e.tag.name == tag && e.tag.stereotype.name == stereotype)
		? this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).value
		: "";
		
/**
 * 	returns a tagged value reference of a stereotype if exists
 *
 * 	@param	stereotype	the name of a stereotype
 *	@param	tag			the name of a tagged value
 *	
 * 	@return		value reference of the tagged value
 */
MElement getTaggedValueReference(MElement this, String stereotype, String tag) :
	this.taggedValue.exists(e|e.tag.name == tag && e.tag.stereotype.name == stereotype)
		? this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).valueReference
		: "";

/**
 * returns the boolean value of a tagged value of a stereotype
 * 
 * @param	stereotype	the name of a stereotype
 * @param	tag			the name of a tagged value
 * 
 * @return	true, if the tagged value is true, otherwise false
 */
boolean getTaggedBooleanValue(MElement this, String stereotype, String tag) :
	hasTaggedValue( stereotype, tag, "true")
		? true
		: false;

/**
 * Returns a list of tagged values of a stereotype.
 * 
 * @param	stereotype	the name of a stereotype
 * @param	tag			the name of the tagged value
 * 
 * @return	the list of tagged values
 */
List[MTaggedValue] owningTaggedValues(MElement this, String stereotype, String tag) :
	this.taggedValue.exists(e|e.tag.name == tag && e.tag.stereotype.name == stereotype)
		? this.taggedValue.select(e|e.tag.name == tag && e.tag.stereotype.name == stereotype)
		: {};

/**
 * Returns a list of values of a tagged value of a stereotype.
 * 
 * @param	stereotype	the name of a stereotype
 * @param	tag			the name of the tagged value
 * 
 * @return	the list of values
 */
List[String] getTaggedValueList(MElement this, String stereotype, String tag) :
	let taggedValues = {} :
		taggedValues.addAll( owningTaggedValues(stereotype, tag).value ) ->
		taggedValues;
		
/**
 * Returns a list of value references of a tagged value of a stereotype.
 * 
 * @param	stereotype	the name of a stereotype
 * @param	tag			the name of the tagged value
 * 
 * @return	the list of value references
 */
List[MElement] getTaggedValueReferenceList(MElement this, String stereotype, String tag) :
	let taggedValueReferences = {} :
		taggedValueReferences.addAll( owningTaggedValues(stereotype, tag).valueReference ) ->
		taggedValueReferences;

/**
 *	function to set any existing tagged value
 *
 *	@param		this	MProperty
 *	@param		tag		name of the tagged value
 *	@param		value	the new value of the tagged value
 *
 */
Void setTaggedValue(MElement this, String tag, String value) :
	this.taggedValue.selectFirst(e|e.tag.name == tag).setValue(value);
	
/**
 *	function to set any existing tagged value reference
 *
 *	@param		this			MProperty
 *	@param		tag				name of the tagged value
 *	@param		valueReference	the new value reference of the tagged value
 *
 */
Void setTaggedValue(MElement this, String tag, MElement valueReference) :
	this.taggedValue.selectFirst(e|e.tag.name == tag).setValueReference(valueReference);
	
/**
 *	function to set a tagged value of a specific stereotype
 *	note: if a MTagggedValue already exists, it is used and it's value is changed
 *
 *	@param		this		MPropertye
 *	@param		stereotype	name of the stereotype
 *	@param		tag			name of the tagged value
 *	@param		value		the new value of the tagged value
 *
 */
Void setTaggedValue(MElement this, String stereotype, String tag, String value) :
	this.taggedValue.exists(e|e.tag.name == tag && e.tag.stereotype.name == stereotype)
		? this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).setValue(value)
		: createTaggedValue(
			this.stereotype.selectFirst(e|e.name == stereotype).property.selectFirst(e|e.name == tag),
			value
		);
	
/**
 *	function to set a tagged value reference of a specific stereotype
 *	note: if a MTagggedValue already exists, it is used and it's value is changed
 *
 *	@param		this			MPropertye
 *	@param		stereotype		name of the stereotype
 *	@param		tag				name of the tagged value
 *	@param		valueReference	new value reference of the tagged value
 *
 */
Void setTaggedValue(MElement this, String stereotype, String tag, MElement valueReference) :
	this.taggedValue.exists(e|e.tag.name == tag && e.tag.stereotype.name == stereotype)
		? this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).setValueReference(valueReference)
		: createTaggedValue(
			this.stereotype.selectFirst(e|e.name == stereotype).property.selectFirst(e|e.name == taggedValue),
			valueReference
		);
	
/**
 * 	checks if a tagged value of a stereotype exists and has a utilizable value (not empty or null)
 *
 * 	@param	sterotype		the name of a stereotype
 * 	@param	tag				the name of a tagged value
 * 	
 *	@return		true if the value exists and is utilizable
 */
boolean hasUtilizableValue(MElement this, String stereotype, String tag) :
	this.taggedValue.exists(e|e.tag.name == tag && e.tag.stereotype.name == stereotype) &&
	this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).value != "" &&
	this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).value != "null" &&
	// (nihe) I think this check is not needed anymore, because multi valued tagged values are splited into separate tagged values 
	this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).value != "[]"
		? true
		: false;
		
/**
 * 	checks if a tagged value of a stereotype exists and has a utilizable value reference (not null)
 *
 * 	@param	sterotype		the name of a stereotype
 * 	@param	tag				the name of a tagged value
 * 	
 *	@return		true if the value reference exists and is utilizable
 */
boolean hasUtilizableValueReference(MElement this, String stereotype, String tag) :
	this.taggedValue.exists(e|e.tag.name == tag && e.tag.stereotype.name == stereotype) &&
	this.taggedValue.selectFirst(e|e.tag.name == tag && e.tag.stereotype.name == stereotype).valueReference != null
		? true
		: false;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	aspects
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if an element has an aspect with the specified name and domain name
 * @param	domain	the name of a domain
 * @param	name	the name of an aspect
 * @return	true if an element has an aspect with a specified name and domain name, otherwise false
 */
boolean hasAspect(MElement this, String domain, String name) :
	!aspect.select( a| a.domain == domain && a.name == name ).isEmpty;

/**
 * checks if an element has an aspect with a specified domain name or not
 * @param	domain	the name of a domain
 * @return	true if an element has an aspect with a specified domain name, otherwise false
 */
boolean hasAspect(MElement this, String domain) :
	!aspect.select( a| a.domain == domain ).isEmpty;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	type helpers
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if the type is a generic
 * @return	true if the type is a generic, otherwise false
 */
boolean isGenericType(MType this) : metaType == MGeneric;

/**
 * checks if the type is an external type
 * @return	true if the type is an external type, otherwise false
 */
boolean isExternalType(MType this) : metaType == MExternal;

/**
 * checks if the type is a data type
 * @return	true if the type is a data type, otherwise false
 */
boolean isDataType(MType this) : metaType == MDataType;

/**
 * checks if the type is an enumeration
 * @return	true if the type is an enumeration, otherwise false
 */
boolean isEnumeration(MType this) : metaType == MEnumeration;

/**
 * checks if the type is a classifier
 * @return	true if the type is a classifier, otherwise false
 */
boolean isClassifier(MType this) : MClassifier.isInstance(this);

/**
 * checks if the type is a class
 * @return	true if the type is a class, otherwise false
 */
boolean isClass(MType this) : MClass.isInstance(this);

/**
 * getter for the name of a type or the specification of a generic
 * @return	the name (or specification) of the type
 */
String name(MType this) :
	switch (metaType) {
		case MGeneric : ((MGeneric)this).specification
		case MExternal : ((MExternal)this).name
		default : ((MClassifier)this).name
	};

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	package accessors
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for the package element by using a property
 * @return	the package element
 */
MPackage package(MProperty this) : classifier.package();

/**
 * getter for the package element by using an operation
 * @return	the package element
 */
MPackage package(MOperation this) : classifier.package();

/**
 * getter for the package element by using a classifier
 * @return	the package element
 */
MPackage package(MClassifier this) :
	switch (owningContext.metaType) {
		case MModel : ((MPackage)owningContext)
		case MPackage : ((MPackage)owningContext)
		default : (logFatal("MDefinitionContext is neither MPackage nor MModel. This should never happen.") -> Void)
	};
	
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	model accessors
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for the model element by using a property
 * @return	the model element
 */
MModel model(MProperty this) : classifier.model();

/**
 * getter for the model element by using an operation
 * @return	the model element
 */
MModel model(MOperation this) :	classifier.model();

/**
 * getter for the model element by using a classifier
 * @return	the model element
 */
MModel model(MClassifier this) :
	switch {
		case MModel.isInstance(this) : ((MModel)owningContext)
		case MPackage.isInstance(this) : ((MPackage)owningContext).model()
		case MClassifier.isInstance(this) : ((MClassifier)owningContext).model()
		default : (logFatal("MDefinitionContext is neither MPackage nor MModel nor MClassifier. This should never happen.") -> Void)
	};

MModel model(MElement this) :
	switch (this.metaType) {
		case MClassifier : ((MClassifier) this).model()
		case MOperation :  ((MOperation) this).model()
		case MParameter :  ((MParameter) this).operation.model()
		case MProperty :  ((MProperty) this).model()
		case MStereotype : ((MStereotype) this).model
		default : (logFatal("unable to determine MModel from MElement. Please add your case to this function!") -> Void)
	};

/**
 * getter for the model element by using a package
 * @return	the model element
 */
MModel model(MPackage this) :
	metaType == MModel
		? this
		: nestingPackage.model();



/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	classifiers
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for a class by it's full qualified name which is separed by dot's
 * @param	fullQualifiedName	full qualified name of the class
 * @return	the class found or Void
 */
MClass getClass(MModel this, String fullQualifiedName) :
	let c = getClassifier(fullQualifiedName) :
		c.metaType == MClass
			? c
			: Void;

/**
 * getter for a classifier by it's full qualified name which is separed by dot's
 * @param	fullQualifiedName	full qualified name of the classifier
 * @return	the classifier found or null
 */
MClassifier getClassifier(MModel this, String fullQualifiedName) :
	getClassifier(nestedPackage, fullQualifiedName);

/**
 * getter for a package by it's full qualified name, which is separated by dot's
 * @param	fullQualifiedPackageName	full qualified name of a package
 * @return	the package found or null
 */
MPackage getPackage(MModel this, String fullQualifiedPackageName) :
	getPackage(nestedPackage, fullQualifiedPackageName);

List[MClassifier] allClassifiers(MPackage this) :
	addAllClassifier({});

List[MClassifier] addAllClassifier(MPackage this, List[MClassifier] classifiers) :
	classifiers.addAll(classifier) ->
	nestedPackage.addAllClassifier(classifiers) ->
	classifiers;
	
	
/**
 * Getter for a list of all generalized types.
 * Indirect generalized types first.
 *
 * @return 	a list of generalized types or an empty list
 */
List[MType] allGeneralizations(MClassifier this) :
	let generalizations = {} :
		!generalization.isEmpty
			? (	generalizations.addAll( generalization.allGeneralizations() ) ->	
				generalizations.addAll( generalization )
			) : Void ->
		generalizations;


/**
 * just there for error free templates
 *
 * @see		allGeneralizations(MClassifier)
 * @return	an empty list
 */
List[MType] allGeneralizations(MType this) :
	{};


/**
 * Getter for a list of all owning specialized types
 *
 * @return	a list of specialized types or an empty list
 */
List[MClassifier] owningSpecializations(MClassifier this) :
	model().allClassifiers().select( e | e.generalization.contains(this) );


/**
 * Getter for a list of all owning specialized types
 *
 * @see		owningSpecializations(MClassifier)
 * @return	a list of specialized types or an empty list
 */
List[MClassifier] owningSpecializations(MExternal this) :
	model.allClassifiers().select( e | e.generalization.contains(this) );


/**
 * just there for error free templates
 *
 * @see		owningSpecializations(MClassifier)
 * @return	an empty list
 */
List[MClassifier] owningSpecializations(MType this) :
	{};


/**
 * Getter for a list of all specialized types.
 * Direct specialized types first.
 *
 * @return 	a list of specialized types or an empty list
 */
List[MClassifier] allSpecializations(MType this):
	let specializations = {} :
		!owningSpecializations().isEmpty
			? (	specializations.addAll( owningSpecializations() ) ->
				specializations.addAll( owningSpecializations().allSpecializations() )
			) : Void ->
		specializations;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	packages
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
	
List[MPackage] allPackages(MPackage this) :
	addAllPackages({});

List[MPackage] addAllPackages(MPackage this, List[MPackage] packages) :
	packages.addAll(nestedPackage) ->
	nestedPackage.addAllPackages(packages) ->
	packages;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	elements
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

MClassifier getClassifier(MElement this) :
	switch (metaType) {
		case MOperation : ((MOperation) this).classifier
		case MAttribute : ((MAttribute) this).classifier
		case MAssociationRole : ((MAssociationRole) this).classifier
		default : null
	};

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	activities
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

MNode getInitialNode(MActivity this) :
	node.reject(e|e.metaType == MAction)
		.select(e|e.from.isEmpty)
		.first();












/**
 * getter for the type of a parameter
 * @return	the type of the parameter
 */
//MType type(MParameter this) : type;

/**
 * getter for the type of a property
 * @return	the type of the property
 */
//MType type(MProperty this) : type;

/**
 * just there for error free templates
 * should NOT be called!
 */
/*
MType type(MElement this) : 
	logFatal("somethings goes totally wrong within your templates... " +
	"   you cannot determine the type of an 'MElement': " + this) ->
	Void;
*/








/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for a string representation of a comment
 * @return	the string representation of a comment
 */
private String getComment(MComment this) :
	annotation != "null"
		? annotation
		: "";

/**
 * getter for a class by it's full qualified name from a list of classes
 * note: should actually only work, if the list contains the package, which is the first in the full qualified name
 * @param	packages			a list of packages
 * @param	fullQualifiedName	the full qualified name of a class
 * @return	the class found or null
 */
private MClassifier getClassifier(List[MClass] packages, String fullQualifiedName) :
	JAVA org.genesez.metamodel.core.util.AccessHelper.getClassifier(java.util.List, java.lang.String);

/**
 * getter for a package by it's full qualified name from a list of packages
 * note: should actually only work, if the list contains the package, which is the first in the full qualified name
 * @param	packages					a list of packages
 * @param	fullQualifiedPackageName	full qualifed name of a package
 * @return	the package found or null
 */
private MPackage getPackage(List[MPackage] packages, String fullQualifiedPackageName) :
	JAVA org.genesez.metamodel.core.util.AccessHelper.getPackage(java.util.List, java.lang.String);
