package de.genesez.j2meframework.sensor;/* PROTECTED REGION ID(java.mclassifier.other.import.code_12_5_8a7027a_1184754863065_958703_1059) ENABLED START *//* TODO put your imports here */import java.lang.String;/* PROTECTED REGION END *//** * The measure controller contains all methods from the measure interface. * @author nicher */public abstract class MeasureController implements IMeasureController {		// ////////////////////////////////////////////////////////////////////////	// generated variable, constant and association declarations	// ////////////////////////////////////////////////////////////////////////		private float min;	private float max;	/**	 * variable for association to measureSensor	 */	private IMeasureSensor measureSensor;	/**	 * variable for association to measureListener	 */	private java.util.Vector measureListener = new java.util.Vector();		// ////////////////////////////////////////////////////////////////////////	// generated constructor implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @param  measureSensor  	 * @param  min  	 * @param  max  	 */	public MeasureController(IMeasureSensor measureSensor, float min, float max) {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._12_5_8a7027a_1184786332336_927305_604) ENABLED START */		/* TODO put your own implementation code here */		/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated derived attribute method implementations	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated association method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * accessor for association to measureSensor	 */	public IMeasureSensor getMeasureSensor() {		return measureSensor;	}		/**	 * accessor for association to measureSensor	 */	public void insertInMeasureSensor(IMeasureSensor _in) {		if (measureSensor == _in) {			return;		}		measureSensor = _in;	}		/**	 * accessor for association to measureSensor	 */	public void removeFromMeasureSensor(IMeasureSensor _ex) {		if (measureSensor != _ex) {			return;		}		measureSensor = null;	}		/**	 * accessor for association to measureListener	 */	public java.util.Vector getMeasureListener() {		return measureListener;	}		/**	 * accessor for association to measureListener	 */	public void insertInMeasureListener(IMeasureListener _in) {		if (measureListener.contains(_in)) {			return;		}		measureListener.addElement(_in);	}		/**	 * accessor for association to measureListener	 */	public void removeFromMeasureListener(IMeasureListener _ex) {		if (!measureListener.contains(_ex)) {			return;		}		measureListener.removeElement(_ex);	}		// ////////////////////////////////////////////////////////////////////////	// generated abstract method declaration	// ////////////////////////////////////////////////////////////////////////		/**	 * Method which receives an measure event and send this event to all measure listeners.	 * @param  e  	 */	public abstract void sendMeasureValue(MeasureEvent e);		// ////////////////////////////////////////////////////////////////////////	// generated normal method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @param  measureValue  	 * @return  	 */	public Boolean isMeasureValueTooHigh(float measureValue) {				Boolean returnValue = null;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._12_5_8a7027a_1188925038620_221622_1046) ENABLED START */		/* TODO put your own implementation code here */		/* PROTECTED REGION END */		return returnValue;	}		/**	 * @param  measureValue  	 * @return  	 */	public Boolean isMeasureValueNormal(float measureValue) {				Boolean returnValue = null;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._12_5_8a7027a_1188925045347_172705_1051) ENABLED START */		/* TODO put your own implementation code here */		/* PROTECTED REGION END */		return returnValue;	}		/**	 * @param  measureValue  	 * @return  	 */	public Boolean isMeasureValueTooLow(float measureValue) {				Boolean returnValue = null;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._12_5_8a7027a_1188925050723_332702_1056) ENABLED START */		/* TODO put your own implementation code here */		/* PROTECTED REGION END */		return returnValue;	}		// ////////////////////////////////////////////////////////////////////////	// generated getter and setter method implementations	// ////////////////////////////////////////////////////////////////////////		public float getMin() {		return min;	}		public void setMin(float _min) {		min = _min;	}		public float getMax() {		return max;	}		public void setMax(float _max) {		max = _max;	}		// ////////////////////////////////////////////////////////////////////////	// own implementations	// ////////////////////////////////////////////////////////////////////////		/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._12_5_8a7027a_1184754863065_958703_1059) ENABLED START */	/* TODO put your own implementation code here */	/* PROTECTED REGION END */}