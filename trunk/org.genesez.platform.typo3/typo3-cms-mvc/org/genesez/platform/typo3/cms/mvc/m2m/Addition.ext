/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Model additions before generation of source code begins.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use GeneSEZ Design Pattern profile scripts
extension org::genesez::metamodel::core::util::profile::GeneSEZDesignPatternAccessElement;

// use GeneSEZ common logging scripts
extension org::genesez::util::logging::Logging;

// use GeneSEZ profile scripts
//extension org::genesez::metamodel::core::util::profile::GeneSEZProfile;

// use TYPO3 profile access helper scripts
//extension org::genesez::platform::typo3::cms::profile::TYPO3CMSAccessElement;

// use TYPO3 MVC Extbase profile + access helper scripts
//extension org::genesez::platform::typo3::cms::mvc::profile::TYPO3CMSExtbaseProfile;
//extension org::genesez::platform::typo3::cms::mvc::profile::TYPO3CMSExtbaseAccessElement;

// use TYPO3 MVC Fluid profile + access helper scripts
//extension org::genesez::platform::typo3::cms::mvc::profile::TYPO3CMSFluidProfile;
//extension org::genesez::platform::typo3::cms::mvc::profile::TYPO3CMSFluidAccessElement;

// use TYPO3 MVC access helper scripts which overrides
// common access helper scripts if script name is equal 
//extension org::genesez::platform::typo3::cms::mvc::util::AccessElement;
//extension org::genesez::metamodel::core::util::AccessElement;

// use common navigation scripts
//extension org::genesez::metamodel::core::util::NavigateElement;

// use common create template scripts
//extension org::genesez::metamodel::core::util::CreateElement;
//extension org::genesez::metamodel::core::util::CloneElement;


// -- Interation over Model and Package Structures ----------------------------------------------------------

MModel modelAdditions(MModel this) :
	useLogger("org.genesez.platform.typo3") ->
	// perform model additions for all stereotypes which are validators
	anyStereotype.select( e | e.isLocalValidator() ).makeValidator();




/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Controller additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 MVC Extbase controller.
 */
Void controllerAdditions(MClass controller) :
	logTrace("call controllerAdditions for controller: " + controller.name) ->
	// add 'getErrorFlashMessage' if it should
	controller.addControllerGetErrorFlashMessage();


cached MClass makeController(MClass domainObject) :
	logTrace("call makeController for domain object: " + domainObject.name) ->
	// checks if the controller doesn't already exists
	( domainObject.hasT3ExtbaseDomainObjectCreateController("true") || domainObject.hasT3ExtbaseDomainObjectCreatePlugin("true") ) &&
	!domainObject.existsController()
		? (	let c = createClass( domainObject.navModel(), domainObject.xmiGuid + ".controller", domainObject.asControllerName() ) :
				logTrace("create new controller class for domain object: " + domainObject.name) ->
				c.processController(domainObject)
		) : domainObject.navModel().allControllers().selectFirst( c | c.nameS() == domainObject.asControllerName() );


MClass processController(MClass this, MClass domainObject) :
	logTrace("call processController for class: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the controller
	ensureCommentExistence(xmiGuid + ".comment", "Controller for a domain object.") ->
	// add super controller type
	addControllerType() ->
	// add property to inject the repository
	addControllerRepository(domainObject) ->
	// add controller actions
	addControllerListAction(domainObject) ->
	addControllerShowAction(domainObject) ->
	addControllerNewAction(domainObject) ->
	addControllerCreateAction(domainObject) ->
	addControllerEditAction(domainObject) ->
	addControllerUpdateAction(domainObject) ->
	addControllerDeleteAction(domainObject) ->
	// add stereotype to mark this class as controller
	stereotype.add( 
		ensureStereotypeExistence( navModel(), prT3ExtbaseController(), prT3ExtbaseController() ) 
	) ->
	this;


Void addControllerRepository(MClass this, MClass domainObject) :
	let a = createAttribute( xmiGuid + "." + domainObject.asRepositoryName().toFirstLower(), domainObject.asRepositoryName().toFirstLower() ) :
		// (visibility, derived, multiplicity, unique, ordered)
		a.processProperty("protected", false, 1, false, false) ->
		// (defaultvalue, static, final)
		a.processAttribute("", false, false) ->
		// add comment to discribe the attribute
		a.ensureCommentExistence(a.xmiGuid + ".comment", "Repository for a domain objects") ->
		// add repository type
		a.setType(
			makeRepository(domainObject) 
		) ->
		// add stereotype to mark this attribute as dependency injection
		a.stereotype.add( 
			let s = ensureStereotypeExistence( navModel(), prDi(), prDi() ) :
				a.ensureTaggedValueExistence( ensureTagExistence( s, prDiSetter(), "Boolean" ), "true" ) ->
				s
		);





/**
 * Add the 'getErrorFlashMessage' to the controller class.
 */
Void addControllerGetErrorFlashMessage(MClass this) :
	logTrace("call addControllerGetErrorFlashMessage for controller: " + name) ->
	// checks if the get error flash message method should be created and doesn't already exists
	hasT3ExtbaseControllerCreateGetErrorFlashMessage("true")
	&& operation.select(o| o.name() == "getErrorFlashMessage" ).isEmpty
		? (	let o = makeOperation("getErrorFlashMessage", "protected", false, false, false) :
				// add comment to discribe the operation
				o.makeComment("Override getErrorFlashMessage to customize the flash message.") ->
				o.setReturn(
					let return = makeParameter( o, o.xmiGuid + "." + "return", "", "", "return", createPrimitiveTypeString(model()) ) :
						// add comment to discribe the parameter
						return.makeComment("The flash message") ->
						return
				) ->
				// add stereotype to mark this operation as no controller action
				o.stereotype.add( 
					ensureStereotypeExistence( model(), prT3ExtbaseControllerNoAction(), prT3ExtbaseControllerNoAction() ) 
				)
		) :  Void;

Void addControllerListAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("listAction") :
		o.ensureCommentExistence(o.xmiGuid + ".comment", "Displays a list of domain objects");


Void addControllerShowAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("showAction") :
		// add comment to discribe the operation
		o.ensureCommentExistence(o.xmiGuid + ".comment", "Displays one single domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to display.") ->
				p
		);
		

Void addControllerNewAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("newAction") :
		// add comment to discribe the operation
		o.ensureCommentExistence(o.xmiGuid + ".comment", "Displays a form for creating a new domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "NULL", "in", domainObject) :
				p.makeComment("A fresh domain object to display.") ->
				p
		);


Void addControllerCreateAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("createAction") :
		// add comment to discribe the operation
		o.ensureCommentExistence(o.xmiGuid + ".comment", "Creates a new domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The new domain object to create.") ->
				p
		);


Void addControllerEditAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("editAction") :
		// add comment to discribe the operation
		o.ensureCommentExistence(o.xmiGuid + ".comment", "Displays a form for editing an existing domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to display.") ->
				p
		);


Void addControllerUpdateAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("updateAction") :
		// add comment to discribe the operation
		o.ensureCommentExistence(o.xmiGuid + ".comment", "Updates an existing domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to update") ->
				p
		);


Void addControllerDeleteAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("deleteAction") :
		// add comment to discribe the operation
		o.ensureCommentExistence(o.xmiGuid + ".comment", "Deletes an existing domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to delete") ->
				p
		);


private MOperation makeControllerAction(MClass this, String name) :
	let o = makeOperation(name, "protected", false, false, false) :
		o.setReturn(
			let return = makeParameter( o, o.xmiGuid + "." + "return", "", "", "return", createPrimitiveTypeString(model()) ) :
				// add comment to discribe the parameter
				return.makeComment("The rendered view for this action.") ->
				return
		) ->
		o.stereotype.add( 
			ensureStereotypeExistence( model(), "http://www.genesez.org/TYPO3/TYPO3v4/controller/" + name, "http://www.genesez.org/TYPO3/TYPO3v4/controller/" + name ) 
		) ->
		o;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Factory additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Model entity additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 MVC Extbase entity.
 */
Void entityAdditions(MClass entity) :
	logTrace("call entityAdditions for entity: " + entity.name) ->
	// make controller if it should
	entity.makeController() ->
	// make repository if it should
	entity.makeRepository() ->
	// make plugin if it should
	entity.makePlugin() ->
	// make validator if it should
	entity.makeValidator(); 

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Model value object additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/**
 * Model additions for an TYPO3 MVC Extbase value object.
 */
Void valueObjectAdditions(MClass valueObject) :
	logTrace("call valueObjectAdditions for value object: " + valueObject.name) ->
	// make controller if it should
	valueObject.makeController() ->
	// make repository if it should
	valueObject.makeRepository() ->
	// make plugin if it should
	valueObject.makePlugin() ->
	// make validator if it should
	valueObject.makeValidator(); 

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Repository additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

cached MClass makeRepository(MClass domainObject) :
	logTrace("call makeRepository for domain object: " + domainObject.name) ->
	// checks if the respository doesn't already exists
	( domainObject.hasT3ExtbaseDomainObjectCreateRepository("true") || domainObject.hasT3ExtbaseDomainObjectCreateController("true") ) &&
	!domainObject.existsRepository()
		? (	let c = createClass( domainObject.navModel(), domainObject.xmiGuid + ".repository", domainObject.asRepositoryName() ) :
				logTrace("create new repository class for domain object: " + domainObject.name) ->
				c.processRepository(domainObject)
		) : domainObject.navModel().allRepositories().selectFirst( e | e.nameS() == domainObject.asRepositoryName() );


MClass processRepository(MClass this, MClass domainObject) :
	logTrace("call processRepository for class: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the controller
	ensureCommentExistence(xmiGuid + ".comment", "Respository for a domain object.") ->
	// add super repository type
	addRepositoryType() ->
	// add stereotype to mark this class as repository
	stereotype.add( 
		ensureStereotypeExistence( navModel(), prT3ExtbaseRepository(), prT3ExtbaseRepository() ) 
	) ->
	this;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Service additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Validator additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/



cached MClass makeValidator(MClass domainObject) :
	logTrace("call makeValidator for domain object: " + domainObject.name) ->
	domainObject.hasT3ExtbaseDomainObjectCreateValidator("true") &&
	!domainObject.existsValidator()
		? (	let c = createClass( domainObject.navModel(), domainObject.xmiGuid + ".validator", domainObject.asValidatorName() ) :
				logTrace("create new validator class for domain object: " + domainObject.name) ->
				c.processValidator()
		) : domainObject.navModel().allValidators().selectFirst( e | e.nameS() == domainObject.asValidatorName() ); 	


cached MClass makeValidator(MStereotype stereotype) :
	logTrace("call makeValidator for stereotype: " + stereotype.name) ->
	stereotype.isLocalValidator() &&
	!stereotype.existsValidator() 
		? (	let c = createClass(stereotype.navModel(), stereotype.xmiGuid + ".validator", stereotype.asValidatorName() ) :
				logTrace("create new validator class for stereotype: " + stereotype.name) ->
				c.generalization.add(
					makeValidatorGeneralization( stereotype.generalization.first() )
				) ->
				c.processValidator()
		) : stereotype.navModel().allValidators().select( v | v.nameS() == stereotype.asValidatorName() ).first();


MType makeValidatorGeneralization(MStereotype this) :
	isLocalValidator()
	? makeValidator()
	: ensureExternalTypeExistence( navModel(), name, name );


boolean isLocalValidator(MStereotype this) :
	isValidator() && !name.startsWith("T3Extbase");


MClass processValidator(MClass this) :
	logTrace("call processValidator for class: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the validator
	ensureCommentExistence(xmiGuid + ".comment", "Validator for object, property or parameter.") ->
	// add super validator type
	addValidatorType() ->
	// add 'isValid'
	addValidatorIsValid() ->
	// add stereotype to mark this class as validator
	stereotype.add( 
		ensureStereotypeExistence( navModel(), prT3ExtbaseValidator(), prT3ExtbaseValidator() ) 
	) ->
	this;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Plugin additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

cached MClass makePlugin(MClass domainObject) :
	logTrace("call makePlugin for domain object: " + domainObject.name) ->
	// checks if the plugin doesn't already exists
	domainObject.hasT3ExtbaseDomainObjectCreatePlugin("true") &&
	!domainObject.existsPlugin()
		? (	let i = createInterface( domainObject.navModel(), domainObject.xmiGuid + ".plugin", domainObject.asPluginName() ) :
				logTrace("create new plugin interface for domain object: " + domainObject.name) ->
				i.processPlugin(domainObject)
		) : domainObject.navModel().allPlugins().selectFirst( p | p.name() == domainObject.asPluginName() );


MInterface processPlugin(MInterface this, MClass domainObject) :
	logTrace("call processPlugin for interface: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the controller
	ensureCommentExistence(xmiGuid + ".comment", "Plugin for a domain object.") ->
	// add stereotype to mark this interface as plugin
	stereotype.add( 
		let s = ensureStereotypeExistence( navModel(), prT3ExtbasePlugin(), prT3ExtbasePlugin() ) :
			ensureTaggedValueExistence( ensureTagExistence( s, prT3ExtbasePluginTitle(), "String" ), domainObject.asPluginName() ) ->
			(	let controller = makeController(domainObject) :
				( 	let controllerActionType = ensureTagExistence(s, prT3ExtbasePluginControllerActions(), "Operation") :
						controller.operation.select( e | e.isControllerAction() )
							.addPluginControllerAction(controllerActionType, this)
				) ->
				( 	let uncachedControllerActionType = ensureTagExistence(s, prT3ExtbasePluginUncachedControllerActions(), "Operation") :
						controller.operation.select( e | e.isControllerAction() && {"createAction", "updateAction", "deleteAction"}.contains(e.name) )
							.addPluginControllerAction(uncachedControllerActionType, this)
				)
			) ->
			s 
	) ->
	this;


private Void addPluginControllerAction(MOperation controllerAction, MTag controllerActionType, MInterface this) :
	createTaggedValue(controllerActionType, controllerAction);


		


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Helper functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

private String nameS(MClassifier this) :
	name( namingContextGeneral() ).split("_").last();
	

private String asControllerName(MClassifier domainElement) :
	domainElement.nameS() + "Controller";
	
	
private String asRepositoryName(MClassifier domainElement) :
	domainElement.nameS() + "Repository";


private String asValidatorName(MClassifier domainElement) :
	domainElement.nameS() + "Validator";


private String asValidatorName(MStereotype validator) :
	validator.name.endsWith("Validator") ? validator.name : validator.name + "Validator";
	

private String asPluginName(MClassifier domainElement) :
	domainElement.name.toFirstUpper();

	

private boolean existsController(MClass this) :
	// checks if the controller doesn't already exists
	!navModel().allControllers().select( c | c.nameS() == asControllerName() ).isEmpty;
	

private boolean existsRepository(MClass this) :
	// checks if the respository doesn't already exists
	!navModel().allRepositories().select( r | r.nameS() == asRepositoryName() ).isEmpty;


private boolean existsValidator(MClass this) :
	// checks if the validator doesn't already exists
	!navModel().allValidators().select( v | v.nameS() == asValidatorName() ).isEmpty;

private boolean existsValidator(MStereotype this) :
	// checks if the validator doesn't already exists
	!navModel().allValidators().select( v | v.nameS() == asValidatorName() ).isEmpty;

private boolean existsPlugin(MClass this) :
	// checks if the plugin doesn't already exists
	!navModel().allPlugins().select( p | p.asPluginName() == asPluginName() ).isEmpty;