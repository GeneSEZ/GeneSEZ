«REM»
	(c) GeneSEZ Research Group
	All rights reserved.
	
	Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
«ENDREM»

«IMPORT gcore»


«REM»
	Entry point for generating annotations.
	
	@author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
«ENDREM»

«REM» use TYPO3 CMS specific Extbase + Fluid access element scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3::cms::mvc::util::AccessElement»

«REM» use TYPO3 CMS specific Extbase + Fluid naming convention scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3::cms::mvc::util::NamingConvention»


«REM» use GeneSEZ common Design Pattern profile scripts «ENDREM»
«EXTENSION org::genesez::metamodel::core::util::profile::GenesezDesignPatternAccessElement»

«REM» use GeneSEZ common Persistence profile scripts «ENDREM»
«EXTENSION org::genesez::metamodel::core::util::profile::GenesezPersistenceProfile»
«EXTENSION org::genesez::metamodel::core::util::profile::GenesezPersistenceAccessElement»

«REM» use GeneSEZ common Standard profile scripts «ENDREM»
«EXTENSION org::genesez::metamodel::core::util::profile::GenesezStandardAccessElement»

«REM» use GeneSEZ common Validation profile scripts «ENDREM»
«EXTENSION org::genesez::metamodel::core::util::profile::GenesezValidationAccessElement»


«REM» use GeneSEZ common access element scripts «ENDREM»
«EXTENSION org::genesez::metamodel::core::util::AccessElement»

«REM» use GeneSEZ common conversion scripts «ENDREM»
«EXTENSION org::genesez::metamodel::core::util::Conversion»

«REM» use GeneSEZ common type mapping scripts «ENDREM»
«EXTENSION org::genesez::metamodel::core::util::mapping::TypeMapping»


«REM»
	-- Public Templates (THE FOLLOWING TEMPLATES CAN BE INVOKED FROM OUTSIDE OF THIS FILE) ------------------
«ENDREM»


«REM»
	Generates the annotations for a classifier.
«ENDREM»
«DEFINE ClassifierInformationBlock FOR MClassifier -»
«EXPAND Version -»
«EXPAND Copyright -»
«EXPAND License -»
«ENDDEFINE»


«REM»
	Generates the annotations for a property.
«ENDREM»
«DEFINE Property FOR MProperty -»
«IF multiplicity.isSingleValued() -»
	 * @var «type.asGeneralName()»
«ELSE -»
«IF classifier.isDomainModelPackageElement() && !emHasPrimitiveStereotype() -»
	 * @var «mapCollection("DomainModel") -»<«type.asGeneralName() -»>
«ELSE -»
	 * @var «mapCollection()»
«ENDIF -» 
«ENDIF -»
	«EXPAND Cascade -»
	«EXPAND Fetch -»
	«EXPAND Inject -»
	«EXPAND Validate -»
«ENDDEFINE»


«REM»
	Generates the annotations for a get accesor method of a property.
«ENDREM»
«DEFINE GetAccessor FOR MProperty -»
«IF multiplicity.isSingleValued() -»
	 * @return «type.asGeneralName() -» «comment("; ", "")»
«ELSE -»
«IF classifier.isDomainModelPackageElement() && !emHasPrimitiveStereotype() -»
	 * @return «mapCollection("DomainModel") -»<«type.asGeneralName() -»> «comment("; ", "")»
«ELSE -»
	 * @return «mapCollection() -» «comment("; ", "")»
«ENDIF -»
«ENDIF -»
«ENDDEFINE»


«REM»
	Generates the annotations for a set accessor method of a property.
«ENDREM»
«DEFINE SetAccessor FOR MProperty -»
«IF multiplicity.isSingleValued() -»
	 * @param «type.asGeneralName() -» $«asGeneralName() -» «comment("; ", "")»
«ELSE -»
«IF classifier.isDomainModelPackageElement() && !emHasPrimitiveStereotype() -»
	 * @param «mapCollection("DomainModel") -»<«type.asGeneralName() -»> $«asGeneralName() -» «comment("; ", "")»
«ELSE -»
	 * @param «mapCollection() -» $«asGeneralName() -» «comment("; ", "")»
«ENDIF -» 
«ENDIF -»
	 * @return void
«ENDDEFINE»


«REM»
	Generates the annotations for an add accessor method of a property.
«ENDREM»
«DEFINE AddAccessor FOR MProperty -»
	 * @param «type.asGeneralName() -» $toAdd «comment("; ", "")»
	 * @return void
«ENDDEFINE»


«REM»
	Generates the annotations for a remove accessor method of a property.
«ENDREM»
«DEFINE RemoveAccessor FOR MProperty -»
	 * @param «type.asGeneralName() -» $toRemove «comment("; ", "")»
	 * @return void
«ENDDEFINE»


«REM»
	Generates the annotations for a constructor operation.
«ENDREM»
«DEFINE Constructor FOR MOperation -»
	«EXPAND Param FOREACH parameter -»
«ENDDEFINE»


«REM»
	Generates the annotations for a destructor operation.
«ENDREM»
«DEFINE Destructor FOR MOperation -»
«ENDDEFINE»


«REM»
	Generates the annotations for an operation.
«ENDREM»
«DEFINE Operation FOR MOperation -»
	«EXPAND Param FOREACH parameter -»
	«EXPAND Return -»
	«EXPAND IgnoreValidation FOREACH parameter -»
	«EXPAND DontVerifyRequestHash -»
«ENDDEFINE»


«REM»
	-- Private Templates (THE FOLLOWING TEMPLATES SHOULD NOT BE INVOKED FROM OUTSIDE OF THIS FILE) ----------
«ENDREM»

«DEFINE Version FOR MClassifier -»
 * @version $Id$
«ENDDEFINE»


«DEFINE Copyright FOR MClassifier -»
 * @copyright Copyright belongs to the respective authors
«ENDDEFINE»


«DEFINE License FOR MClassifier -»
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License, version 3 or later
«ENDDEFINE»


«DEFINE Cascade FOR MProperty -»
«IF emHasAssociationCascadeType( prCascadeTypeRemove() ) -»
	 * @cascade remove
«ENDIF -»
«ENDDEFINE»


«DEFINE Fetch FOR MProperty -»
«IF emHasAssociationFetchType( prFetchTypeLazy() ) -»
	 * @lazy
«ENDIF -»
«ENDDEFINE»


«DEFINE Inject FOR MProperty -»
«IF emHasDiSetter("true") -»
	 * @inject
«ENDIF -»
«ENDDEFINE»


«DEFINE Validate FOR MProperty -»
«FOREACH allAssignedValidators() AS v -»
	 * @validate «v.asAssignedValidatorName() -»«IF v.property.exists( p | emGetTaggedValue( v.name, p.name ) != "" ) -»(«FOREACH v.property.select( p | emGetTaggedValue( v.name, p.name ) != "" ) AS p SEPARATOR ", "-»«p.name -» = «emGetTaggedValue(v.name, p.name) -»«ENDFOREACH -»)«ENDIF»
«ENDFOREACH -»
«ENDDEFINE»


«DEFINE Param FOR MParameter -»
«IF multiplicity.isSingleValued() -»
	 * @param «type.asGeneralName() -» $«asGeneralName() -» «comment("; ", "")»
«ELSE -»
	 * @param «mapCollection() -» $«asGeneralName() -» «comment("; ", "")»
«ENDIF -»
«ENDDEFINE»


«DEFINE Return FOR MOperation -»
«IF hasReturn() -»
«IF return.multiplicity.isSingleValued() -»
	 * @return «return.type.asGeneralName() -» «return.comment("; ", "")»
«ELSE -»
«IF classifier.isDomainModelPackageElement() && !emHasPrimitiveStereotype() -»
	 * @return «return.mapCollection("DomainModel") -»<«return.type.asGeneralName() -»> «return.comment("; ", "")»
«ELSE -»
	 * @return «return.mapCollection() -» «return.comment("; ", "")»
«ENDIF -»
«ENDIF -»	
«ELSE -»
	 * @return void
«ENDIF -»
«ENDDEFINE»


«DEFINE IgnoreValidation FOR MParameter -»
«IF emHasIgnoreValidationStereotype() -»
	 * @ignorevalidation $«asGeneralName()»
«ENDIF -»
«ENDDEFINE»


«DEFINE DontVerifyRequestHash FOR MOperation -»
«IF emHasIgnoreValidationStereotype() -»
	 * @dontverifyrequesthash
«ENDIF -»
«ENDDEFINE»