«IMPORT gcore»
«REM»
	Entry point for generating "flexform_<plugin>.xml".
	
	@author	Nico Herbig <nico.herbig@fh-zwickau.de>
	@date	2011-07-12
«ENDREM»

«REM» use TYPO3 profile access helper scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3v4::profile::AccessHelper»

«REM» use TYPO3 naming context and common naming scripts «ENDREM»
«EXTENSION org::genesez::platforms::common::naming::Naming»
«EXTENSION org::genesez::platform::typo3v4::mvc::convention::NamingContext»

«REM» use TYPO3 MVC convention scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3v4::mvc::convention::Convention»

«REM» use TYPO3 MVC conversion scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3v4::mvc::convention::Conversion»

«REM» use TYPO3 naming scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3v4::convention::Naming»

«REM» use TYPO3 TCx access helper scripts «ENDREM»
«EXTENSION org::genesez::platform::typo3v4::scripts::TCxAccessHelper»

«REM» use common access helper scripts «ENDREM»
«EXTENSION org::genesez::platforms::common::AccessHelper»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	Processes the generation of "flexform_<plugin>.xml".
«ENDREM»
«DEFINE Root FOR MInterface -»
«EXPAND ContextSettings -»

«FILE flexformXMLFileNamePath() -»
«EXPAND T3DataStructure -»
«ENDFILE -»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	Sets the naming and type mapping context for this part of generation. 
«ENDREM»
«DEFINE ContextSettings FOR MInterface -»
«setNamingContext( namingContextConfiguration() ) -»
«setTypeMappingContext( typeMappingContextTYPO3TCx() ) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE T3DataStructure FOR MInterface -»
<T3DataStructure>
	<sheets>
		«EXPAND Sheet("sDEF") -»
		«FOREACH allTCESheetsWithoutDefault() AS sheet -»
			«EXPAND Sheet(sheet) -»
		«ENDFOREACH -»
		«EXPAND OwnCodeImplementation("flexform.xml.own.code.implementation." + xmiGuid) -» 
	</sheets>
</T3DataStructure>
«ENDDEFINE»


«DEFINE Sheet(String sheet) FOR MInterface -»
		<«sheet -»>
			<ROOT>
				«EXPAND TCEforms(sheet) -»
				«EXPAND Type -»
				«EXPAND El(sheet) -»
			</ROOT>
		</«sheet -»>
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE TCEforms(String sheet) FOR MInterface -»
				<TCEforms>
					<sheetTitle>LLL:EXT:«extensionKey() -»/«locallangFFXMLFileNamePath() -»:«sheet -»</sheetTitle>
				</TCEforms>
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE Type FOR MInterface -»
				<type>array</type>
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE El(String sheet) FOR MInterface -»
				<el>
					«EXPAND Option FOREACH allTCESheetProperties(sheet) -»
					«EXPAND OwnOptionCodeImplementation("flexform.xml.own.option.code.implementation." + sheet + "." + xmiGuid) -»
				</el>
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE Option FOR MAttribute -»
					<settings.«name() -»>
						«EXPAND TCEforms -»
					</settings.«name() -»>
«ENDDEFINE»


«REM»
	generates a region for own TCE Option Config code implementations
«ENDREM»
«DEFINE OwnOptionCodeImplementation(String id) FOR MInterface -»
					«PROTECT CSTART '<!-- ' CEND ' -->' ID (id)»
					<!-- TODO: put your further TCE Flexform Option code implementations here -->
					«ENDPROTECT»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE TCEforms FOR MAttribute -»
						<TCEforms>
							«EXPAND Label -»
							«EXPAND Config -»
						</TCEforms>
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE Label FOR MAttribute -»
							<label>LLL:EXT:«extensionKey() -»/«((MInterface)classifier).locallangFFXMLFileNamePath() -»:«name( namingContextLocalization() ) -»</label>
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE Config FOR MAttribute -»
							<config>
							«IF type.name() == "Input" -»
								«EXPAND ConfigTypeInput -»
							«ELSEIF type.name() == "String" -»
								«EXPAND ConfigTypeString -»
							«ELSEIF type.name() == "Integer" -»
								«EXPAND ConfigTypeInteger -»
							«ELSEIF type.name() == "Float" -»
								«EXPAND ConfigTypeFloat -»
							«ELSEIF type.name() == "DateTime" -»
								«EXPAND ConfigTypeDateTime -»	
							«ELSEIF type.name() == "Text" -»
								«EXPAND ConfigTypeText -»
							«ELSEIF type.name() == "Check" -»
								«EXPAND ConfigTypeCheck -»
							«ELSEIF type.name() == "Boolean" -»
								«EXPAND ConfigTypeBoolean -»
							«ELSEIF type.name() == "Radio" -»
								«EXPAND ConfigTypeRadio -»
							«ELSEIF type.name() == "Select" -»
								«EXPAND ConfigTypeSelect -»
							«ELSEIF type.name() == "File" -»
								«EXPAND ConfigTypeFile -»
							«ELSEIF type.name() == "FileReference" -»
								«EXPAND ConfigTypeFileReference -»
							«ELSEIF type.name() == "Image" -»
								«EXPAND ConfigTypeImage -»
							«ELSEIF type.name() == "ImageReference" -»
								«EXPAND ConfigTypeImageReference -»
							«ELSEIF type.name() == "Database" -»
								«EXPAND ConfigTypeDatabase -»
							«ELSEIF type.name() == "Folder" -»
								«EXPAND ConfigTypeFolder -»
							«ELSEIF type.name() == "None" -»
								«EXPAND ConfigTypeNone -»
							«ELSE -»
								«EXPAND ConfigTypeOther( type.name() ) -»
							«ENDIF -»
							«EXPAND OwnOptionConfigCodeImplementation("flexform.xml.own.option.config.code.implementation." + xmiGuid) -»
							</config>
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeInput FOR MAttribute -»
«EXPAND ConfigType("input") -»
«EXPAND ConfigSize(30) -»
«EXPAND ConfigEval({}) -»
«EXPAND ConfigDefault(null) -»
«EXPAND ConfigMax(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeString FOR MAttribute -»
«EXPAND ConfigType("input") -»
«EXPAND ConfigSize(30) -»
«EXPAND ConfigEval({"trim"}) -»
«EXPAND ConfigDefault(null) -»
«EXPAND ConfigMax(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeInteger FOR MAttribute -»
«EXPAND ConfigType("input") -»
«EXPAND ConfigSize(30) -»
«EXPAND ConfigEval({"int"}) -»
«EXPAND ConfigDefault(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeFloat FOR MAttribute -»
«EXPAND ConfigType("input") -»
«EXPAND ConfigSize(30) -»
«EXPAND ConfigEval({"double2"}) -»
«EXPAND ConfigDefault(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeDateTime FOR MAttribute -»
«EXPAND ConfigType("input") -»
«EXPAND ConfigSize(12) -»
«EXPAND ConfigEval({"datetime"}) -»
«EXPAND ConfigDefault("time()") -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeText FOR MAttribute -»
«EXPAND ConfigType("text") -»
«EXPAND ConfigCols(40) -»
«EXPAND ConfigRows(15) -»
«EXPAND ConfigEval({"trim"}) -»
«EXPAND ConfigDefault(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeCheck FOR MAttribute -»
«EXPAND ConfigType("check") -»
«EXPAND ConfigCols(5) -»
«EXPAND ConfigEval({"unique"}) -»
«EXPAND ConfigItems -»
«EXPAND ConfigDefault(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeBoolean FOR MAttribute -»
«EXPAND ConfigType("check") -»
«EXPAND ConfigDefault(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeRadio FOR MAttribute -»
«EXPAND ConfigType("radio") -»
«EXPAND ConfigDefault("") -»
«EXPAND ConfigItems -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeSelect FOR MAttribute -»
«EXPAND ConfigType("select") -»
«EXPAND ConfigSize(1) -»
«EXPAND ConfigAutoMaxSize(null) -»
«EXPAND ConfigEval({}) -»
«EXPAND ConfigMinitems(0) -»
«EXPAND ConfigMaxitems(1) -»
«EXPAND ConfigItems -»
«EXPAND ConfigDefault(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeFile FOR MAttribute -»
«EXPAND ConfigType("group") -»
«EXPAND ConfigInternalType("file") -»
«EXPAND ConfigSize(1) -»
«EXPAND ConfigAutoMaxSize(null) -»
«EXPAND ConfigMinitems(0) -»
«EXPAND ConfigMaxitems(1) -»
«EXPAND ConfigAllowed("*") -»
«EXPAND ConfigDisallowed("php") -»
«EXPAND ConfigMaxSize(null) -»
«EXPAND ConfigShowThumbs(true) -»
«EXPAND ConfigUploadfolder("uploads/" + fullQualifiedExtensionNameToLowerCase()) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeFileReference FOR MAttribute -»
«EXPAND ConfigType("group") -»
«EXPAND ConfigInternalType("file_reference") -»
«EXPAND ConfigSize(1) -»
«EXPAND ConfigAutoMaxSize(null) -»
«EXPAND ConfigMinitems(0) -»
«EXPAND ConfigMaxitems(1) -»
«EXPAND ConfigAllowed("*") -»
«EXPAND ConfigDisallowed("php") -»
«EXPAND ConfigMaxSize(null) -»
«EXPAND ConfigShowThumbs(true) -»
«EXPAND ConfigUploadfolder("uploads/" + fullQualifiedExtensionNameToLowerCase()) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeImage FOR MAttribute -»
«EXPAND ConfigType("group") -»
«EXPAND ConfigInternalType("file") -»
«EXPAND ConfigSize(1) -»
«EXPAND ConfigAutoMaxSize(null) -»
«EXPAND ConfigMinitems(0) -»
«EXPAND ConfigMaxitems(1) -»
«EXPAND ConfigAllowed("gif,jpg,jpeg,tif,tiff,bmp,pcx,tga,png,pdf,ai") -»
«EXPAND ConfigDisallowed("") -»
«EXPAND ConfigMaxSize(null) -»
«EXPAND ConfigShowThumbs(true) -»
«EXPAND ConfigUploadfolder("uploads/" + fullQualifiedExtensionNameToLowerCase()) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeImageReference FOR MAttribute -»
«EXPAND ConfigType("group") -»
«EXPAND ConfigInternalType("file_reference") -»
«EXPAND ConfigSize(1) -»
«EXPAND ConfigAutoMaxSize(null) -»
«EXPAND ConfigMinitems(0) -»
«EXPAND ConfigMaxitems(1) -»
«EXPAND ConfigAllowed("gif,jpg,jpeg,tif,tiff,bmp,pcx,tga,png,pdf,ai") -»
«EXPAND ConfigDisallowed("") -»
«EXPAND ConfigMaxSize(null) -»
«EXPAND ConfigShowThumbs(true) -»
«EXPAND ConfigUploadfolder("uploads/" + fullQualifiedExtensionNameToLowerCase()) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeDatabase FOR MAttribute -»
«EXPAND ConfigType("group") -»
«EXPAND ConfigInternalType("db") -»
«EXPAND ConfigSize(1) -»
«EXPAND ConfigAutoMaxSize(null) -»
«EXPAND ConfigMinitems(0) -»
«EXPAND ConfigMaxitems(1) -»
«EXPAND ConfigAllowed("*") -»
«EXPAND ConfigShowThumbs(true) -»
«EXPAND ConfigPrependTname(null) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeFolder FOR MAttribute -»
«EXPAND ConfigType("group") -»
«EXPAND ConfigInternalType("folder") -»
«EXPAND ConfigSize(1) -»
«EXPAND ConfigAutoMaxSize(null) -»
«EXPAND ConfigMinitems(0) -»
«EXPAND ConfigMaxitems(1) -»
«EXPAND ConfigShowThumbs(true) -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeNone FOR MAttribute -»
«EXPAND ConfigType("none") -»
«ENDDEFINE»


«REM» 
«ENDREM»
«DEFINE ConfigTypeOther(String otherPropertyType) FOR MAttribute -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigAllowed(String defaultAllowed) FOR MAttribute -»
«LET getT3TCxAllowedAllowed() AS allowed -» 
«IF allowed != "" || defaultAllowed != null -»
								<allowed>«IF allowed != "" -»«allowed -»«ELSE -»«defaultAllowed -»«ENDIF -»</allowed>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigAutoMaxSize(Integer defaultAutoSizeMax) FOR MAttribute -»
«LET getT3TCxAutoSizeMaxAutoSizeMax() AS autoSizeMax -» 
«IF autoSizeMax != "" || defaultAutoSizeMax != null -»
								<autoSizeMax>«IF autoSizeMax != "" -»«autoSizeMax -»«ELSE -»«defaultAutoSizeMax -»«ENDIF -»</autoMaxSize>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigCols(Integer defaultCols) FOR MAttribute -»
«LET getT3TCxColsCols() AS cols -» 
«IF cols != "" || defaultCols != null -»
								<cols>«IF cols != "" -»«cols -»«ELSE -»«defaultCols -»«ENDIF -»</cols>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigDefault(String defaultDefaultValue) FOR MAttribute -»
«IF hasDefaultValue() || defaultDefaultValue != null -»
								<default>«IF hasDefaultValue() -»«defaultvalue -»«ELSE -»«defaultDefaultValue -»«ENDIF -»</default>
«ENDIF -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigDisallowed(String defaultDisallowed) FOR MAttribute -»
«LET getT3TCxDisallowedDisallowed() AS disallowed -» 
«IF disallowed != "" || defaultDisallowed != null -»
								<disallowed>«IF disallowed != "" -»«disallowed -»«ELSE -»«defaultDisallowed -»«ENDIF -»</disallowed>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigEval(List[String] defaultEvals) FOR MAttribute -»
«IF !getT3TCxEvalEvals().isEmpty || !defaultEvals.isEmpty -»
								<eval>«FOREACH allTCxEvals(defaultEvals) AS eval SEPARATOR ", "»«eval.asT3TCxEvalType() -»«ENDFOREACH -»</eval>
«ENDIF -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigInternalType(String internalType) FOR MAttribute -»
								<internal_type>«internalType -»</internal_type>
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigItems FOR MAttribute -»
«IF !getT3TCxItemsItems().isEmpty -»
«REM»
				'items' => array («FOREACH getT3TCxItemsItems() AS item SEPARATOR "," -»
					array(«FOREACH item.split("=") AS kv SEPARATOR " => "»«kv.trim() -»«ENDFOREACH -»)
				«ENDFOREACH -»),
«ENDREM»
«ENDIF -»
«ENDDEFINE»


«REM»
hier evtl. versuch über sql type maximum herauszufinden
«ENDREM»
«DEFINE ConfigMax(Integer defaultMax) FOR MAttribute -»
«LET getT3TCxMaxMax() AS max -» 
«IF max != "" || defaultMax != null -»
								<max>«IF max != "" -»«max -»«ELSE -»«defaultMax -»«ENDIF -»</max>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigMaxitems(Integer defaultMaxitems) FOR MAttribute -»
«LET getT3TCxMaxitemsMaxitems() AS maxitems -» 
«IF maxitems != "" || defaultMaxitems != null -»
								<maxitems>«IF maxitems != "" -»«maxitems -»«ELSE -»«defaultMaxitems -»«ENDIF -»</maxitems>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigMaxSize(Integer defaultMaxSize) FOR MAttribute -»
«LET getT3TCxMaxSizeMaxSize() AS maxSize -» 
«IF maxSize != "" || defaultMaxSize != null -»
								<max_size>«IF maxSize != "" -»«maxSize -»«ELSE -»«defaultMaxSize -»«ENDIF -»</max_size>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigMinitems(Integer defaultMinitems) FOR MAttribute -»
«LET getT3TCxMinitemsMinitems() AS minitems -» 
«IF minitems != "" || defaultMinitems != null -»
								<minitems>«IF minitems != "" -»«minitems -»«ELSE -»«defaultMinitems -»«ENDIF -»</minitems>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigPrependTname(Boolean defaultPrependTname) FOR MAttribute -»
«LET getT3TCxPrependTnamePrependTname() AS prependTname -» 
«IF prependTname != "" || defaultPrependTname != null -»
								<prepend_tname>«IF prependTname != "" -»«prependTname -»«ELSE -»«defaultPrependTname -»«ENDIF -»</prepend_tname>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigRows(Integer defaultRows) FOR MAttribute -»
«LET getT3TCxRowsRows() AS rows -» 
«IF rows != "" || defaultRows != null -»
								<rows>«IF rows != "" -»«rows -»«ELSE -»«defaultRows -»«ENDIF -»</rows>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»

«REM»
«ENDREM»
«DEFINE ConfigShowThumbs(Boolean defaultShowThumbs) FOR MAttribute -»
«LET getT3TCxShowThumbsShowThumbs() AS showThumbs -» 
«IF showThumbs != "" || defaultShowThumbs != null -»
								<show_thumbs>«IF showThumbs != "" -»«showThumbs -»«ELSE -»«defaultShowThumbs -»«ENDIF -»</show_thumbs>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigSize(Integer defaultSize) FOR MAttribute -»
«LET getT3TCxSizeSize() AS size -» 
«IF size != "" || defaultSize != null -»
								<size>«IF size != "" -»«size -»«ELSE -»«defaultSize -»«ENDIF -»</size>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigType(String type) FOR MAttribute -»
								<type>«type -»</type>
«ENDDEFINE»


«REM»
«ENDREM»
«DEFINE ConfigUploadfolder(String defaultUploadfolder) FOR MAttribute -»
«LET getT3TCxUploadfolderUploadfolder() AS uploadfolder -» 
«IF uploadfolder != "" || defaultUploadfolder != null -»
								<uploadfolder>«IF uploadfolder != "" -»«uploadfolder.replaceFirst("EXT", fullQualifiedExtensionNameToLowerCase()) -»«ELSE -»«defaultUploadfolder -»«ENDIF -»</uploadfolder>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«REM»
	generates a region for own TCA Column Config code implementations
«ENDREM»
«DEFINE OwnOptionConfigCodeImplementation(String id) FOR MAttribute -»
								«PROTECT CSTART '<!-- ' CEND ' -->' ID (id)»
								<!-- TODO: put your further TCE Flexform Option Config code implementations here -->
								«ENDPROTECT»
«ENDDEFINE»


«REM»
	generates a region for own code implementations
«ENDREM»
«DEFINE OwnCodeImplementation(String id) FOR MInterface -»
		«PROTECT CSTART '<!-- ' CEND ' -->' ID (id)»
		<!-- TODO: put your further code implementations here -->
		«ENDPROTECT»
«ENDDEFINE»
