/**
 * General conventions for TYPO3 MVC.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-05-11
 */
 
// based on genesez meta model
import gcore;

// use GeneSEZ profile access helper scripts
extension org::genesez::metamodel::core::util::profile::GeneSEZProfileAccessHelper;

// use TYPO3 MVC conversion scripts
extension org::genesez::platform::typo3v4::mvc::convention::Conversion;

// use TYPO3 MVC access helper scripts
extension org::genesez::platform::typo3v4::mvc::scripts::AccessHelper;

// use TYPO3 MVC workflow globalvar scripts
extension org::genesez::platform::typo3v4::mvc::workflow::GlobalVar;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC extension name and key conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of extension name seperator which is added between extension name 
 * sections.
 *
 * @return	the extension name seperator
 */
String extensionNameSeperator() : 
	"_";


/**
 * Getter of the prefix which is added to each extension.
 *
 * @return	the prefix to prepend
 */
String extensionPrefix() : 
	"Tx";


/**
 * Getter of the extension key. 
 * This script is only a wrapper for "globalVarExtensionKey()" 
 * defined in "GlobalVar.ext".
 * For instance: The extension key is "blog_example" this method returns the
 * extension key which is "blog_example".
 *
 * @return	the extension key
 */
String extensionKey() :
	globalVarExtensionKey();


/**
 * Getter of full qualified extension key.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension key which is "tx_blog_example". 
 *
 * @return	the full qualified extension key
 */
String fullQualifiedExtensionKey() :
	extensionPrefix().toLowerCase() + extensionNameSeperator() + extensionKey();


/**
 * Getter of the extension name.
 * The extension name is generated by the defined extension name.
 * The extension name is equals the extension key without underscores and is 
 * written in upper camel case.
 * For instance: The extension key is "blog_example" this method returns the
 * extension name which is "BlogExample". 
 *
 * @return	the extension name
 */
String extensionName() :
	extensionName( extensionKey() );
	

/**
 * Getter of the extension name in lower case notation.
 * For instance: The extension key is "blog_example" this method returns the
 * extension name in lower case notation which is "blogexample". 
 *
 * @return	the extension name
 */
String extensionNameToLowerCase() :
	extensionName().toLowerCase();


/**
 * Getter of the extension name.
 * This method calls the Java method to remove the underscores and transform
 * the extension key in upper camel case.
 *
 * @param	extensionKey	the extension key
 * @return	the extension name
 */
private cached String extensionName(String extensionKey) :
		JAVA org.genesez.platform.typo3v4.mvc.convention.Convention.extensionName(java.lang.String);


/**
 * Getter of full qualified extension name.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension name which is "Tx_BlogExample". 
 *
 * @return	the full qualified extension name
 */
String fullQualifiedExtensionName() :
	extensionPrefix() + extensionNameSeperator() + extensionName();


/**
 * Getter of full qualified extension name in lower case notation.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension name in lower case notation which is "tx_blogexample". 
 *
 * @return	the full qualified extension name in short notation
 */
String fullQualifiedExtensionNameToLowerCase() :
	fullQualifiedExtensionName().toLowerCase();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name base conventions (first two sections)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of name seperator which is added between classifier name sections.
 *
 * @return	the classifier name seperator
 */
String classifierNameSeperator() : 
	"_";


/**
 * Getter of name base which is prepend to the classifier name.
 * This method is only a wrapper for "fullQualifiedExtensionName()" 
 * defined inside this file. Actually it is only for semantic usage.
 *
 * @return	the classifier name base to prepend
 */
String classifierNameBase() :
	fullQualifiedExtensionName();

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name path conventions (middle sections)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of name path which is prepend to the name of a classifier.
 *
 * @return	the classifier name path to prepend
 */
String classifierNamePath(MClassifier this) :
	// The path depends on the TYPO3 MVC type.
	switch {
		// checks if the classifier is an TYPO3 MVC Extbase controller package element
		case isControllerPackageElement() :
			convertToClassifierNamePath( classesControllerPath() )
		// checks if the classifier is an TYPO3 MVC Extbase factory package element
		case isFactoryPackageElement() :
			convertToClassifierNamePath( classesDomainFactoryPath() )
		// checks if the classifier is an TYPO3 MVC Extbase model package element
		case isModelPackageElement() :
			convertToClassifierNamePath( classesDomainModelPath() )
		// checks if the classifier is an TYPO3 MVC Extbase repository package element
		case isRepositoryPackageElement() :
			convertToClassifierNamePath( classesDomainRepositoryPath() )
		// checks if the classifier is an TYPO3 MVC Extbase service package element
		case isServicePackageElement() :
			convertToClassifierNamePath( classesDomainServicePath() )
		// checks if the classifier is an TYPO3 MVC Extbase validator package element
		case isValidatorPackageElement() :
			convertToClassifierNamePath( classesDomainValidatorPath() )
		// checks if the classifier is an TYPO3 Fluid view helper package element
		case isViewHelperPackageElement() :
			convertToClassifierNamePath( classesViewHelpersPath() )
		default :
			convertToClassifierNamePath( classesPath() + fileSeparator() + owningContext.name.toLowerCase().toFirstUpper() )
	};


/**
 * Converts the path name to the classifier name path.
 *
 * @param	pathName	the path of the classifier
 * @return	the name path of the classifier
 */
private String convertToClassifierNamePath(String pathName) :
	pathName.replaceFirst( classesPath() + fileSeparator(), "" ).replaceAll( fileSeparator(), classifierNameSeperator() );


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name conventions (last section)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String abstractClassPrefix() :
	"Abstract";


String interfaceSuffix() :
	"Interface";


String controllerNameSuffix() :
	"Controller";


String repositoryNameSuffix() :
	"Repository";
	

String validatorNameSuffix() :
	"Validator";


String viewHelperNameSuffix() :
	"ViewHelper";


/**
 * Getter of the prefix which is added to the name of a class.
 *
 * @return	the prefix to prepend
 */
String classifierNamePrefix(MClass this) : 
	switch {
		// checks if class is abstract and doesn't already starts with "Abstract" 
		case abstract && !name.startsWith( abstractClassPrefix() ) : 
			abstractClassPrefix()
		default : 
			""
	};


/**
 * Getter of the suffix which is added to the name of a class.
 *
 * @return	the suffix to append
 */
String classifierNameSuffix(MClass this) : 
	switch {
		// checks if class is an TYPO3 MVC controller and doesn't already ends with "Controller"
		case isController() && !name.endsWith( controllerNameSuffix() ) :
			controllerNameSuffix()
		// checks if class is an TYPO3 MVC repository and doesn't already ends with "Repository" 
		case isRepository() && !name.endsWith( repositoryNameSuffix() ) :
			repositoryNameSuffix()
		case isValidator() && !name.endsWith( validatorNameSuffix() ) :
			validatorNameSuffix()
		// checks if class is an TYPO3 Fluid view helper and doesn't already ends with "ViewHelper" 
		case isViewHelper() && !name.endsWith( viewHelperNameSuffix() ) :
			viewHelperNameSuffix()
		default : 
			""
	};


/**
 * Getter of the prefix which is added to the name of an interface.
 *
 * @return	the prefix to prepend
 */
String classifierNamePrefix(MInterface this) : 
	"";


/**
 * Getter of the suffix which is added to the name of an interface.
 *
 * @return	the suffix to append
 */
String classifierNameSuffix(MInterface this) : 
	switch {
		// checks if interface doesn't already starts with "Interface" 
		case !name.endsWith( interfaceSuffix() ) : 
			interfaceSuffix()
		default : 
			""
	};


/**
 * Getter of the prefix which is added to the name of a classifier.
 * Just there for error free templates.
 * 
 * @return	an empty string
 */
String classifierNamePrefix(MClassifier this) : 
	"";


/**
 * Getter of the suffix which is added to the name of an classifier.
 * Just there for error free templates.
 * 
 * @return	an empty string
 */
String classifierNameSuffix(MClassifier this) : 
	"";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC attribute name + accessor conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the prefix which is added to the name of a getter for an attribute.
 *
 * @return	the prefix to prepend
 */
String getterNamePrefix(MAttribute this) : 
	"get";


/**
 * Getter of the prefix which is added to the name of a setter for an attribute.
 *
 * @return	the prefix to prepend
 */
String setterNamePrefix(MAttribute this) :
	"set";


/**
 * Getter of the prefix which is added to the name of an inserIn for an attribute.
 *
 * @return	the prefix to prepend
 */
String insertInNamePrefix(MAttribute this) : 
	"add";


/**
 * Getter of the prefix which is added to the name of a removeFrom for an attribute.
 *
 * @return	the prefix to prepend
 */
String removeFromNamePrefix(MAttribute this) : 
	"remove";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC association role name + accessor conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the prefix which is added to the name of a getter for an association role.
 *
 * @return	the prefix to prepend
 */
String getterNamePrefix(MAssociationRole this) : 
	"get";


/**
 * Getter of the prefix which is added to the name of a setter for an association role.
 *
 * @return	the prefix to prepend
 */
String setterNamePrefix(MAssociationRole this) : 
	"set";


/**
 * Getter of the prefix which is added to the name of an inserIn for an association role.
 *
 * @return	the prefix to prepend
 */
String insertInNamePrefix(MAssociationRole this) : 
	"add";


/**
 * Getter of the prefix which is added to the name of a removeFrom for an association role.
 *
 * @return	the prefix to prepend
 */
String removeFromNamePrefix(MAssociationRole this) : 
	"remove";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC operation name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String controllerActionNameSuffix() :
	"Action";
	
String controllerCommandNameSuffix() :
	"Command";

/**
 * Getter of the suffix which is added to the name of an operation.
 *
 * @return	the suffix to append
 */
String operationNameSuffix(MOperation this) : 
	switch {
		// checks if operation is an TYPO3 MVC Controller Action and doesn't already ends with "Action"
		case isControllerAction() && !name.endsWith( controllerActionNameSuffix() ) :
			controllerActionNameSuffix()
		// checks if operation is an TYPO3 MVC Controller Command and doesn't already ends with "Command"
		case isControllerCommand() && !name.endsWith( controllerCommandNameSuffix() ) :
			controllerCommandNameSuffix()
		default : 
			""
	};
