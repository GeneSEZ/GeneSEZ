/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Access element scripts for TYPO3 CMS specific Extbase + Fluid to simplify access to model elements.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS access element scripts and reexport them
extension org::genesez::platform::typo3::cms::util::AccessElement reexport;


// use TYPO3 CMS specific Extbase profile scripts
extension org::genesez::platform::typo3::cms::mvc::profile::Typo3CmsExtbaseAccessElement;

// use TYPO3 CMS specific Fluid profile scripts
extension org::genesez::platform::typo3::cms::mvc::profile::Typo3CmsFluidAccessElement;


// use TYPO3 CMS specific Extbase + Fluid file system convention scripts
extension org::genesez::platform::typo3::cms::mvc::util::FileSystemConvention;


// use GeneSEZ common Domain Driven Design profile scripts
extension org::genesez::metamodel::core::util::profile::GenesezDomainDrivenDesignAccessElement;

// use GeneSEZ common Persistence profile scripts
extension org::genesez::metamodel::core::util::profile::GenesezPersistenceProfile;
extension org::genesez::metamodel::core::util::profile::GenesezPersistenceAccessElement;

// use GeneSEZ common Validation profile scripts
extension org::genesez::metamodel::core::util::profile::GenesezValidationAccessElement;


// use GeneSEZ common access element scripts
extension org::genesez::metamodel::core::util::AccessElement;

// use GeneSEZ common conversion scripts
extension org::genesez::metamodel::core::util::Conversion;

// use GeneSEZ common navigate element scripts
extension org::genesez::metamodel::core::util::NavigateElement;


// -- TYPO3 CMS specific Extbase controller scripts ---------------------------------------------------------

/**
 * Returns the a list of TYPO3 CMS specific Extbase controllers.
 * 
 * @return	The list of TYPO3 CMS specific Extbase controllers or an empty list.
 */
cached List[MClass] allControllers(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( c | c.isController() );
	

/**
 * Returns the a list of TYPO3 CMS specific Extbase command controllers.
 * 
 * @return	The list of TYPO3 CMS specific Extbase command controllers or an empty list.
 */
cached List[MClass] allCommandControllers(MModel this) :
	allControllers().select( c | c.operation.exists( o | o.emHasExtbaseControllerCommandStereotype() ) );


/**
 * Checks if a classifier is part of the TYPO3 CMS specific Extbase controller package.
 * 
 * @return	True if the classifier is part of the TYPO3 CMS specific Extbase controller package, otherwise false.
 */
cached Boolean isControllerPackageElement(MClassifier this) :
	// checks if the classifier is inside the correct package
	dirPath().startsWith( dirPathClassesController() );


/**
 * Checks if a class is a TYPO3 CMS specific Extbase controller.
 *
 * @return	True if the class is a TYPO3 CMS specific Extbase controller, otherwise false.
 */
cached Boolean isController(MClass this) :
	// first check if the class has the required stereotype
	emHasExtbaseControllerStereotype() ||
	// second check if the package of the class has the required stereotype
	navPackage().emHasExtbaseControllerStereotype() ||
	// third check if generalization is an TYPO3 CMS specific Extbase controller
	(
		!generalization.isEmpty 
			? generalization.first().isController() 
			: false 
	);


cached Boolean isController(MType this) :
	metaType == MExternal
		? ( (MExternal) this ).emHasExtbaseControllerStereotype()
		: false;


// -- Controller Actions + Controller Command Actions + Non Controller Actions --


/**
 * Checks if a operation is a TYPO3 CMS specific Extbase controller action.
 * 
 * @return	True if the operation is a TYPO3 CMS specific Extbase controller action, otherwise false.
 */
cached Boolean isControllerAction(MOperation this) :
	// first check if the operation has the required stereotype
	emHasExtbaseControllerActionStereotype() ||
	// second check if the classifier (class) is a controller AND the operation is neither a controller command action nor a non controller action
	( classifier.isController() && !isControllerCommand() && !isControllerNoAction() );


/**
 * Checks if a operation is a TYPO3 CMS specific Extbase controller command.
 * 
 * @return	True if the operation is a TYPO3 CMS specific Extbase controller command, otherwise false.
 */
cached Boolean isControllerCommand(MOperation this) :
	// checks if the operation has the required stereotype
	emHasExtbaseControllerCommandStereotype();


/**
 * Checks if a operation is not a TYPO3 CMS specific Extbase controller action.
 *
 * @return	True if the operation is not a TYPO3 CMS specific Extbase controller action, otherwise false.
 */
cached Boolean isControllerNoAction(MOperation this) :
	// checks if the operation has the required stereotype
	emHasExtbaseControllerNoActionStereotype();


// -- TYPO3 CMS specific Extbase entity + value object scripts ----------------------------------------------

/**
 * Returns the a list of TYPO3 CMS specific Extbase entities and value objects.
 * 
 * @return	The list of TYPO3 CMS specific Extbase entities and value objects or an empty list.
 */
cached List[MClass] allEntitiesAndValueObjects(MModel this) :
	{}.addAll( allEntities() ).addAll( allValueObjects() );


/**
 * Checks if a classifier is part of the TYPO3 CMS specific Extbase domain model package.
 * 
 * @return	True if the classifier is part of the TYPO3 CMS specific Extbase domain model package, otherwise false.
 */
cached Boolean isDomainModelPackageElement(MClassifier this) :
	// checks if the classifier is inside the correct package
	dirPath().startsWith( dirPathClassesDomainModel() );


/**
 * Checks if a class should be generated as concrete table.
 * 
 * @return	True if the class should be generated as concrete table, otherwise false.
 */
Boolean isConcreteTableInheritance(MClass this) :
	!isSingleTableInheritance() && !isTableMapping();


/**
 * Checks if a class should be generated as single table.
 * 
 * @return	True if the class should be generated as single table, otherwise false.
 */
Boolean isSingleTableInheritance(MClass this) :
	emHasInheritanceInheritanceType( prInheritanceTypeSingleTable() );


/**
 * Checks if a class should be mapped.
 * 
 * @return	True if the class should be mapped, otherwise false.
 */
Boolean isTableMapping(MClass this) :
	emHasTableMappingStereotype();



cached List[MClass] allConreteTableInheritances(MModel this) :
	allEntitiesAndValueObjects().select( do | do.isConcreteTableInheritance() );


cached List[MClass] allSingleTableInheritances(MModel this) :
	allEntitiesAndValueObjects().select( do | do.isSingleTableInheritance() );
	

cached List[MClass] allTableMappings(MModel this) :
	allEntitiesAndValueObjects().select( do | do.isTableMapping() );


String getPersistenceRecordTypeColumnName(MClass this) :
	isSingleTableInheritance() 
		? emGetInheritanceTypeColumn()
		: (	isTableMapping()
				? emGetTableMappingTypeColumn()
				 : ( !allSingleTableInheritanceSpecializations().isEmpty
						? allSingleTableInheritanceSpecializations().first().getPersistenceRecordTypeColumnName()
						: "record_type" ) );


/**
 * Getter for a list of types which should be mapped or stored as single table inheritance.
 * 
 * @return	a list of types or an empty list
 */
cached List[MType] allPersistenceClassMappings(MModel this) :
	let classMappings = {} :
		classMappings.addAll(
			// first add all domain objects which should be mapped
			allTableMappings()
		) ->
		classMappings.addAll(
			// second add all domain objects which should be stored as single table inheritance
			allSingleTableInheritances()
		) ->
		allSingleTableInheritances().
			// add all generalizations for "subclasses" from domain objects which should be stored as single table inheritance
			// maybe this is not needed (see other example implementations) but it is documented in "Zukunftssichere Extensionentwicklung mit Extbase und Fluid"
			collect( do | classMappings.add( do.generalization.first() ) ) ->
		classMappings.toSet();


/**
 * Getter for a list of properties which should be mapped.
 * 
 * @return	a list of properties or an empty list
 */
cached List[MProperty] owningPersistencePropertyMappings(MClass this) :
	// add all properties which should be mapped
	property.select( p | p.emHasColumnMappingStereotype() );


/**
 * Getter for a list of specialization classes which are direct subclasses of single table inheritance.
 * 
 * @return	a list of classes or an empty list
 */
cached List[MClass] owningSingleTableInheritanceSpecializations(MType this) :
	specialization.typeSelect(MClass).select( do | do.isSingleTableInheritance() );


/**
 * Getter for a list of specialization classes which are direct or indirect subclasses of single table inheritance.
 
 * @return	a list of classes or an empty list
 */
cached List[MClass] allSingleTableInheritanceSpecializations(MType this) :
	allSpecializations().typeSelect(MClass).select( do | do.isSingleTableInheritance() );


// -- TYPO3 CMS specific Extbase entity scripts -------------------------------------------------------------

/**
 * Returns the a list of TYPO3 CMS specific Extbase entities.
 * 
 * @return	The list of TYPO3 CMS specific Extbase entities or an empty list.
 */
cached List[MClass] allEntities(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( c | c.isEntity() );


/**
 * Checks if a class is a TYPO3 CMS specific Extbase entity.
 *
 * @return	True if the class is a TYPO3 CMS specific Extbase entity, otherwise false.
 */
cached Boolean isEntity(MClass this) :
	// first check if the class has the required stereotype
	emHasEntityStereotype() ||
	// second check if the package of the class has the required stereotype
	navPackage().emHasEntityStereotype() ||
	// third check if generalization is an TYPO3 CMS specific Extbase entity
	(
		!generalization.isEmpty 
			? generalization.first().isEntity() 
			: false 
	);


cached Boolean isEntity(MType this) :
	metaType == MExternal
		? ( (MExternal) this ).emHasEntityStereotype()
		: false;


// -- TYPO3 CMS specific Extbase value object scripts -------------------------------------------------------

/**
 * Returns the a list of TYPO3 CMS specific Extbase value objects.
 * 
 * @return	The list of TYPO3 CMS specific Extbase value objects or an empty list.
 */
cached List[MClass] allValueObjects(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( c | c.isValueObject() );
	

/**
 * Checks if a class is a TYPO3 CMS specific Extbase value object.
 *
 * @return	True if the class is a TYPO3 CMS specific Extbase value object, otherwise false.
 */
cached Boolean isValueObject(MClass this) :
	// first check if the class has the required stereotype
	emHasValueObjectStereotype() ||
	// second check if the package of the class has the required stereotype
	navPackage().emHasValueObjectStereotype() ||
	// third check if generalization is an TYPO3 CMS specific Extbase value object
	(
		!generalization.isEmpty 
			? generalization.first().isValueObject() 
			: false 
	);


cached Boolean isValueObject(MType this) :
	metaType == MExternal
		? ( (MExternal) this ).emHasValueObjectStereotype()
		: false;


// -- TYPO3 CMS specific Extbase repository scripts ---------------------------------------------------------

/**
 * Returns the a list of TYPO3 CMS specific Extbase repositories.
 * 
 * @return	The list of TYPO3 CMS specific Extbase repositories or an empty list.
 */
cached List[MClass] allRepositories(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( c | c.isRepository() );


/**
 * Checks if a classifier is part of the TYPO3 CMS specific Extbase repository package.
 * 
 * @return	True if the classifier is part of the TYPO3 CMS specific Extbase repository package, otherwise false.
 */
cached Boolean isRepositoryPackageElement(MClassifier this) :
	// checks if the classifier is inside the correct package
	dirPath().startsWith( dirPathClassesDomainRepository() );


/**
 * Checks if a class is a TYPO3 CMS specific Extbase repository.
 *
 * @return	True if the class is a TYPO3 CMS specific Extbase repository, otherwise false.
 */
cached Boolean isRepository(MClass this) :
	// first check if the class has the required stereotype
	emHasRepositoryStereotype() ||
	// second check if the package of the class has the required stereotype
	navPackage().emHasRepositoryStereotype() ||
	// third check if generalization is an TYPO3 CMS specific Extbase repository
	(
		!generalization.isEmpty 
			? generalization.first().isRepository() 
			: false 
	);


Boolean isRepository(MType this) :
	metaType == MExternal
		? ( (MExternal) this ).emHasRepositoryStereotype()
		: false;


// -- TYPO3 CMS specific Extbase validator scripts ----------------------------------------------------------

/**
 * Returns the a list of TYPO3 CMS specific Extbase validators.
 * 
 * @return	The list of TYPO3 CMS specific Extbase validators or an empty list.
 */
cached List[MClass] allValidators(MModel this) :
	allNestedClassifiers().typeSelect(MClass).select( c | c.isValidator() );


/**
 * Checks if a classifier is part of the TYPO3 CMS specific Extbase validator package.
 * 
 * @return	True if the classifier is part of the TYPO3 CMS specific Extbase validator package, otherwise false.
 * @deprecated
 */
cached Boolean isValidatorPackageElement(MClassifier this) :
	// checks if the classifier is inside the correct package
	dirPath().startsWith( dirPathClassesValidationValidator() );


/**
 * Checks if a class is a TYPO3 CMS specific Extbase validator.
 *
 * @return	True if the class is a TYPO3 CMS specific Extbase validator, otherwise false.
 */
cached Boolean isValidator(MClass this) :
	// first check if the class has the required stereotype
	emHasValidatorStereotype() ||
	// second check if the package of the class has the required stereotype
	navPackage().emHasValidatorStereotype() ||
	// third check if generalization is an TYPO3 CMS specific Extbase validator
	(
		!generalization.isEmpty 
			? generalization.first().isValidator() 
			: false 
	);


Boolean isValidator(MType this) :
	metaType == MExternal
		? ( (MExternal) this ).emHasValidatorStereotype()
		: false;


/**
 * Returns the a list of validators which are assigned to an element.
 * 
 * @return	the list of assigned validators or an empty list
 */
List[MStereotype] allAssignedValidators(MProperty this) :
	stereotype.select( s | s.isAssignedValidator() );


/**
 * Checks if a stereotype is a TYPO3 CMS specific Extbase validator.
 *
 * @return	True if the stereotype is a TYPO3 CMS specific Extbase validator, otherwise false.
 */
cached Boolean isAssignedValidator(MStereotype this) :
	// first check if the stereotype ends with the suffix "Validator"
	name.endsWith("Validator") ||
	// second check if the name of the stereotype is equals to a validator class
	model.allValidators().exists( v | v.name == name ) ||
	// third check if the stereotype has the required stereotype
	emHasValidatorStereotype() ||
	// fourth check if generalization is an TYPO3 CMS specific Extbase validator
	(
		!generalization.isEmpty 
			? generalization.exists( s | s.isAssignedValidator() ) 
			: false 
	);


// -- TYPO3 CMS specific Fluid view helper scripts ----------------------------------------------------------

/**
 * Checks if a classifier is part of the TYPO3 CMS specific Fluid view helper package.
 * 
 * @return	True if the classifier is part of the TYPO3 CMS specific Fluid view helper, otherwise false.
 * @deprecated
 */
cached Boolean isViewHelperPackageElement(MClassifier this) :
	// checks if the classifier is inside the correct package
	dirPath().startsWith( dirPathClassesViewHelpers() );


/**
 * Checks if a class is a TYPO3 CMS specific Fluid view helper.
 *
 * @return	True if the class is a TYPO3 CMS specific Fluid view helper, otherwise false.
 */
cached Boolean isViewHelper(MClass this) :
	// first check if the class has the required stereotype
	emHasFluidViewHelperStereotype() ||
	// second check if the package of the class has the required stereotype
	navPackage().emHasFluidViewHelperStereotype() ||
	// third check if generalization is an TYPO3 CMS specific Fluid view helper
	(
		!generalization.isEmpty 
			? generalization.first().isViewHelper() 
			: false 
	);


Boolean isViewHelper(MType this) :
	metaType == MExternal
		? ( (MExternal) this ).emHasFluidViewHelperStereotype()
		: false;


// -- TYPO3 CMS specific Extbase plugin + module scripts ----------------------------------------------------

/**
 * Returns the a list of TYPO3 CMS specific Extbase plugins.
 * 
 * @return	The list of TYPO3 CMS specific Extbase plugins or an empty list.
 */
cached List[MInterface] allPlugins(MModel this) :
	allNestedClassifiers().typeSelect(MInterface).select( i | i.isPlugin() );


/**
 * Checks if an interface is a TYPO3 CMS specific Extbase plugin.
 *
 * @return	True if the interface is a TYPO3 CMS specific Extbase plugin, otherwise false.
 */
cached Boolean isPlugin(MInterface this) :
	// checks if the interface has the required stereotype
	emHasExtbasePluginStereotype();


/**
 * Returns the a list of TYPO3 CMS specific Extbase modules.
 * 
 * @return	The list of TYPO3 CMS specific Extbase modules or an empty list.
 */
cached List[MInterface] allModules(MModel this) :
	allNestedClassifiers().typeSelect( MInterface ).select( i | i.isModule() );


/**
 * Checks if an interface is a TYPO3 CMS specific Extbase module.
 *
 * @return	True if the interface is a TYPO3 CMS specific Extbase module, otherwise false.
 */
cached Boolean isModule(MInterface this) :
	// checks if the interface has the required stereotype
	emHasExtbaseModuleStereotype();


// -- TYPO3 CMS specific Extbase misc -----------------------------------------------------------------------

Boolean isPhpPrimitiveType(String typeName) :
	{"boolean", "float", "int", "mixed", "string"}.contains(typeName);


Boolean isTypo3PrimitiveType(String typeName) :
	{"boolean", "float", "int", "string", "\\DateTime"}.contains(typeName);