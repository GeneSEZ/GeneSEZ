/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * File system conventions for TYPO3 Neos. 
 *
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS file system convention scripts and reexport them
extension org::genesez::platform::typo3::cms::util::FileSystemConvention reexport;


// use GeneSEZ common conversion scripts
extension org::genesez::metamodel::core::util::Conversion;


// -- TYPO3 Neos file extension conventions -----------------------------------------------------------------

/**
 * Getter of the HTML file extension including the beginning dot.
 *
 * @return	The file extension for HTML artefacts ('.html').
 */
String fileExtensionHtml() : 
	fileExtensionSeparator() + "html";


/**
 * Getter of the JSON file extension including the beginning dot.
 *
 * @return	The file extension for JSON artefacts ('.json').
 */
String fileExtensionJson() : 
	fileExtensionSeparator() + "json";


/**
 * Getter of the PHP file extension including the beginning dot.
 *
 * @return	The file extension for PHP artefacts ('.php').
 */
String fileExtensionPhp() : 
	fileExtensionSeparator() + "php";


/**
 * Getter of the XLF file extension including the beginning dot.
 *
 * @return	The file extension for XLF artefacts ('.xlf').
 */
String fileExtensionXlf() : 
	fileExtensionSeparator() + "xlf";


/**
 * Getter of the XML file extension including the beginning dot.
 *
 * @return	The file extension for XML artefacts ('.xml').
 */
String fileExtensionXml() : 
	fileExtensionSeparator() + "xml";


// -- TYPO3 Neos specific file name + path conventions ------------------------------------------------------

/**
 * Gets the file name of "composer.json".
 *
 * @return	The file name of "composer.json". 
 */
String fileNameComposerJson() :
	"composer" + fileExtensionJson();


// -- TYPO3 Neos specific directory path conventions --------------------------------------------------------

// -- Classes --

String dirPathClasses() :
	"Classes";


// -- Configuration --

String dirPathConfiguration() :
	"Configuration";


// -- Documentation --

String dirPathDocumentation() :
	"Documentation";


// -- Meta --

String dirPathMeta() :
	"Meta";


// -- Resources --

String dirPathResources() :
	"Resources";
	

String dirPathResourcesPrivate() :
	"Resources/Private";


String dirPathResourcesPrivateContent() :
	"Resources/Private/Content";


String dirPathResourcesPrivatePartials() :
	"Resources/Private/Partials";


String dirPathResourcesPrivateStyles() :
	"Resources/Private/Styles";


String dirPathResourcesPrivateTemplates() :
	"Resources/Private/Templates";


String dirPathResourcesPrivateTemplatesPage() :
	"Resources/Private/Templates/Page";


String dirPathResourcesPrivateTypoScripts() :
	"Resources/Private/TypoScripts";


String dirPathResourcesPrivateTypoScriptsLibrary() :
	"Resources/Private/TypoScripts/Library";


String dirPathResourcesPublic() :
	"Resources/Public";


String dirPathResourcesPublicAssets() :
	"Resources/Public/Assets";


String dirPathResourcesPublicFonts() :
	"Resources/Public/Fonts";


String dirPathResourcesPublicImages() :
	"Resources/Public/Images";


String dirPathResourcesPublicJavaScript() :
	"Resources/Public/JavaScript";


String dirPathResourcesPublicStyles() :
	"Resources/Public/Styles";


// -- Tests --

String dirPathTests() :
	"Tests";


String dirPathTestsFunctional() :
	"Functional";


String dirPathTestsUnit() :
	"Unit";