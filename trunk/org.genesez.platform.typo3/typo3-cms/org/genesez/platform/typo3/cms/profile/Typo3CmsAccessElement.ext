/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Simplifies access to "GeneSEZ TYPO3 CMS Profile" profile and makes working with them more easier.
 * 
 * HINT: All scripts for extension mechanism are available under the prefix 'em'.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer) 
 */

// use profile scripts
extension org::genesez::platform::typo3::cms::profile::Typo3CmsProfile;

// use GeneSEZ common extension mechanism scripts
extension org::genesez::metamodel::core::util::AccessElement;


// -- Xtend scripts for Stereotype "Typo3ExtensionManager" --

/**
 * Checks if an element is annotated with the stereotype "Typo3ExtensionManager".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTypo3ExtensionManagerStereotype(MElement this) :
	emHasStereotypeAssignment( prTypo3ExtensionManager() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "Typo3ExtensionManager".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "Typo3ExtensionManager".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTypo3ExtensionManager(), tag, valueReference );


// -- "author" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "author" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableAuthor(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthor() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "author" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerAuthor(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthor(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "author" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningAuthor(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthor() );


/**
 * Returns the value of the single-valued tagged value "author"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerAuthor(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthor() );


// -- "authorCompany" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "authorCompany" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableAuthorCompany(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorCompany() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "authorCompany" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerAuthorCompany(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorCompany(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "authorCompany" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningAuthorCompany(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorCompany() );


/**
 * Returns the value of the single-valued tagged value "authorCompany"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerAuthorCompany(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorCompany() );


// -- "authorEMail" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "authorEMail" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableAuthorEMail(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorEMail() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "authorEMail" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerAuthorEMail(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorEMail(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "authorEMail" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningAuthorEMail(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorEMail() );


/**
 * Returns the value of the single-valued tagged value "authorEMail"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerAuthorEMail(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerAuthorEMail() );


// -- "category" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "category" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableCategory(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerCategory() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "category" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerCategory(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerCategory(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "category" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningCategory(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerCategory() );


/**
 * Returns the value of the single-valued tagged value "category"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerCategory(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerCategory() );


// -- "clearCacheOnLoad" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "clearCacheOnLoad" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableClearCacheOnLoad(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerClearCacheOnLoad() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "clearCacheOnLoad" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerClearCacheOnLoad(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerClearCacheOnLoad(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "clearCacheOnLoad" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningClearCacheOnLoad(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerClearCacheOnLoad() );


/**
 * Returns the value of the single-valued tagged value "clearCacheOnLoad"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerClearCacheOnLoad(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerClearCacheOnLoad() );


// -- "conflicts" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "conflicts" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableConflicts(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerConflicts() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "conflicts" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerConflicts(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerConflicts(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "conflicts" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningConflicts(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerConflicts() );


/**
 * Returns the list of values of the multi-valued tagged value "conflicts"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTypo3ExtensionManagerConflicts(MElement this) : 
	emAllTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerConflicts() );


// -- "createDirs" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "createDirs" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableCreateDirs(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerCreateDirs() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "createDirs" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerCreateDirs(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerCreateDirs(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "createDirs" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningCreateDirs(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerCreateDirs() );


/**
 * Returns the list of values of the multi-valued tagged value "createDirs"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTypo3ExtensionManagerCreateDirs(MElement this) : 
	emAllTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerCreateDirs() );


// -- "dependencies" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "dependencies" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableDependencies(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerDependencies() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "dependencies" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerDependencies(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerDependencies(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "dependencies" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningDependencies(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerDependencies() );


/**
 * Returns the list of values of the multi-valued tagged value "dependencies"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTypo3ExtensionManagerDependencies(MElement this) : 
	emAllTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerDependencies() );


// -- "description" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "description" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableDescription(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerDescription() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "description" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerDescription(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerDescription(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "description" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningDescription(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerDescription() );


/**
 * Returns the value of the single-valued tagged value "description"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerDescription(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerDescription() );


// -- "internal" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "internal" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableInternal(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerInternal() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "internal" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerInternal(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerInternal(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "internal" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningInternal(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerInternal() );


/**
 * Returns the value of the single-valued tagged value "internal"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerInternal(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerInternal() );


// -- "lockType" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "lockType" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableLockType(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerLockType() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "lockType" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerLockType(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerLockType(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "lockType" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningLockType(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerLockType() );


/**
 * Returns the list of values of the multi-valued tagged value "lockType"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTypo3ExtensionManagerLockType(MElement this) : 
	emAllTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerLockType() );


// -- "modifyTables" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "modifyTables" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableModifyTables(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerModifyTables() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "modifyTables" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerModifyTables(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerModifyTables(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "modifyTables" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningModifyTables(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerModifyTables() );


/**
 * Returns the list of values of the multi-valued tagged value "modifyTables"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTypo3ExtensionManagerModifyTables(MElement this) : 
	emAllTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerModifyTables() );


// -- "priority" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "priority" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizablePriority(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerPriority() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "priority" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerPriority(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerPriority(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "priority" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningPriority(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerPriority() );


/**
 * Returns the value of the single-valued tagged value "priority"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerPriority(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerPriority() );


// -- "shy" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "shy" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableShy(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerShy() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "shy" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerShy(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerShy(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "shy" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningShy(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerShy() );


/**
 * Returns the value of the single-valued tagged value "shy"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerShy(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerShy() );


// -- "state" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "state" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableState(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerState() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "state" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerState(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerState(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "state" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningState(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerState() );


/**
 * Returns the value of the single-valued tagged value "state"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerState(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerState() );


// -- "suggests" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "suggests" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableSuggests(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerSuggests() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "suggests" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerSuggests(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerSuggests(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "suggests" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningSuggests(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerSuggests() );


/**
 * Returns the list of values of the multi-valued tagged value "suggests"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTypo3ExtensionManagerSuggests(MElement this) : 
	emAllTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerSuggests() );


// -- "title" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "title" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableTitle(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerTitle() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "title" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerTitle(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerTitle(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "title" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningTitle(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerTitle() );


/**
 * Returns the value of the single-valued tagged value "title"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerTitle(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerTitle() );


// -- "uploadFolder" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "uploadFolder" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableUploadFolder(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerUploadFolder() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "uploadFolder" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUploadFolder(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerUploadFolder(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "uploadFolder" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningUploadFolder(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerUploadFolder() );


/**
 * Returns the value of the single-valued tagged value "uploadFolder"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerUploadFolder(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerUploadFolder() );


// -- "version" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "version" of the stereotype "Typo3ExtensionManager" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerUtilizableVersion(MElement this) :
	emHasUtilizableTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerVersion() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "version" of the stereotype "Typo3ExtensionManager".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3ExtensionManagerVersion(MElement this, String value) :
	emHasTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerVersion(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "version" of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3ExtensionManagerOwningVersion(MElement this) : 
	emOwningTaggedValues( prTypo3ExtensionManager(), prTypo3ExtensionManagerVersion() );


/**
 * Returns the value of the single-valued tagged value "version"
 * of the stereotype "Typo3ExtensionManager".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3ExtensionManagerVersion(MElement this) :
	emGetTaggedValue( prTypo3ExtensionManager(), prTypo3ExtensionManagerVersion() );


// -- Xtend scripts for Stereotype "Typo3FlexForm" --

/**
 * Checks if an element is annotated with the stereotype "Typo3FlexForm".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTypo3FlexFormStereotype(MElement this) :
	emHasStereotypeAssignment( prTypo3FlexForm() );


// -- Xtend scripts for Stereotype "Typo3FlexFormElement" --

/**
 * Checks if an element is annotated with the stereotype "Typo3FlexFormElement".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTypo3FlexFormElementStereotype(MElement this) :
	emHasStereotypeAssignment( prTypo3FlexFormElement() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "Typo3FlexFormElement".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTypo3FlexFormElement(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "Typo3FlexFormElement".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTypo3FlexFormElement(), tag, valueReference );


// -- "flexFormElementDefaultExtras" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "flexFormElementDefaultExtras" of the stereotype "Typo3FlexFormElement" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementUtilizableFlexFormElementDefaultExtras(MElement this) :
	emHasUtilizableTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementDefaultExtras() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "flexFormElementDefaultExtras" of the stereotype "Typo3FlexFormElement".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementFlexFormElementDefaultExtras(MElement this, String value) :
	emHasTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementDefaultExtras(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "flexFormElementDefaultExtras" of the stereotype "Typo3FlexFormElement".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3FlexFormElementOwningFlexFormElementDefaultExtras(MElement this) : 
	emOwningTaggedValues( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementDefaultExtras() );


/**
 * Returns the value of the single-valued tagged value "flexFormElementDefaultExtras"
 * of the stereotype "Typo3FlexFormElement".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3FlexFormElementFlexFormElementDefaultExtras(MElement this) :
	emGetTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementDefaultExtras() );


// -- "flexFormElementExclude" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "flexFormElementExclude" of the stereotype "Typo3FlexFormElement" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementUtilizableFlexFormElementExclude(MElement this) :
	emHasUtilizableTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementExclude() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "flexFormElementExclude" of the stereotype "Typo3FlexFormElement".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementFlexFormElementExclude(MElement this, String value) :
	emHasTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementExclude(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "flexFormElementExclude" of the stereotype "Typo3FlexFormElement".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3FlexFormElementOwningFlexFormElementExclude(MElement this) : 
	emOwningTaggedValues( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementExclude() );


/**
 * Returns the value of the single-valued tagged value "flexFormElementExclude"
 * of the stereotype "Typo3FlexFormElement".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3FlexFormElementFlexFormElementExclude(MElement this) :
	emGetTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormElementExclude() );


// -- "flexFormSheet" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "flexFormSheet" of the stereotype "Typo3FlexFormElement" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementUtilizableFlexFormSheet(MElement this) :
	emHasUtilizableTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormSheet() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "flexFormSheet" of the stereotype "Typo3FlexFormElement".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3FlexFormElementFlexFormSheet(MElement this, String value) :
	emHasTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormSheet(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "flexFormSheet" of the stereotype "Typo3FlexFormElement".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3FlexFormElementOwningFlexFormSheet(MElement this) : 
	emOwningTaggedValues( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormSheet() );


/**
 * Returns the value of the single-valued tagged value "flexFormSheet"
 * of the stereotype "Typo3FlexFormElement".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3FlexFormElementFlexFormSheet(MElement this) :
	emGetTaggedValue( prTypo3FlexFormElement(), prTypo3FlexFormElementFlexFormSheet() );


// -- Xtend scripts for Stereotype "Typo3Localization" --

/**
 * Checks if an element is annotated with the stereotype "Typo3Localization".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTypo3LocalizationStereotype(MElement this) :
	emHasStereotypeAssignment( prTypo3Localization() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "Typo3Localization".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3LocalizationTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTypo3Localization(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "Typo3Localization".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3LocalizationTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTypo3Localization(), tag, valueReference );


// -- "languageKeys" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "languageKeys" of the stereotype "Typo3Localization" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3LocalizationUtilizableLanguageKeys(MElement this) :
	emHasUtilizableTaggedValue( prTypo3Localization(), prTypo3LocalizationLanguageKeys() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "languageKeys" of the stereotype "Typo3Localization".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3LocalizationLanguageKeys(MElement this, String value) :
	emHasTaggedValue( prTypo3Localization(), prTypo3LocalizationLanguageKeys(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "languageKeys" of the stereotype "Typo3Localization".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3LocalizationOwningLanguageKeys(MElement this) : 
	emOwningTaggedValues( prTypo3Localization(), prTypo3LocalizationLanguageKeys() );


/**
 * Returns the list of values of the multi-valued tagged value "languageKeys"
 * of the stereotype "Typo3Localization".
 * 
 * @return	The list of values of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 */
List[String] emGetTypo3LocalizationLanguageKeys(MElement this) : 
	emAllTaggedValues( prTypo3Localization(), prTypo3LocalizationLanguageKeys() );


// -- Xtend scripts for Stereotype "Typo3Tca" --

/**
 * Checks if an element is annotated with the stereotype "Typo3Tca".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTypo3TcaStereotype(MElement this) :
	emHasStereotypeAssignment( prTypo3Tca() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "Typo3Tca".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTypo3Tca(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "Typo3Tca".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTypo3Tca(), tag, valueReference );


// -- "ctrlAdminOnly" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "ctrlAdminOnly" of the stereotype "Typo3Tca" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaUtilizableCtrlAdminOnly(MElement this) :
	emHasUtilizableTaggedValue( prTypo3Tca(), prTypo3TcaCtrlAdminOnly() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "ctrlAdminOnly" of the stereotype "Typo3Tca".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaCtrlAdminOnly(MElement this, String value) :
	emHasTaggedValue( prTypo3Tca(), prTypo3TcaCtrlAdminOnly(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlAdminOnly" of the stereotype "Typo3Tca".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaOwningCtrlAdminOnly(MElement this) : 
	emOwningTaggedValues( prTypo3Tca(), prTypo3TcaCtrlAdminOnly() );


/**
 * Returns the value of the single-valued tagged value "ctrlAdminOnly"
 * of the stereotype "Typo3Tca".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaCtrlAdminOnly(MElement this) :
	emGetTaggedValue( prTypo3Tca(), prTypo3TcaCtrlAdminOnly() );


// -- "ctrlHideTable" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "ctrlHideTable" of the stereotype "Typo3Tca" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaUtilizableCtrlHideTable(MElement this) :
	emHasUtilizableTaggedValue( prTypo3Tca(), prTypo3TcaCtrlHideTable() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "ctrlHideTable" of the stereotype "Typo3Tca".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaCtrlHideTable(MElement this, String value) :
	emHasTaggedValue( prTypo3Tca(), prTypo3TcaCtrlHideTable(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlHideTable" of the stereotype "Typo3Tca".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaOwningCtrlHideTable(MElement this) : 
	emOwningTaggedValues( prTypo3Tca(), prTypo3TcaCtrlHideTable() );


/**
 * Returns the value of the single-valued tagged value "ctrlHideTable"
 * of the stereotype "Typo3Tca".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaCtrlHideTable(MElement this) :
	emGetTaggedValue( prTypo3Tca(), prTypo3TcaCtrlHideTable() );


// -- "ctrlLabel" --
	
/**
 * Checks if an element has a utilizable value reference
 * of the tagged value "ctrlLabel" of the stereotype "Typo3Tca" 
 * which is not null.
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaUtilizableCtrlLabel(MElement this) :
	emHasUtilizableTaggedValueReference( prTypo3Tca(), prTypo3TcaCtrlLabel() );


/**
 * Checks if an element is annotated with the specified value reference
 * of the tagged value "ctrlLabel" of the stereotype "Typo3Tca".
 *
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaCtrlLabel(MElement this, MElement valueReference) :
	emHasTaggedValue( prTypo3Tca(), prTypo3TcaCtrlLabel(), valueReference );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlLabel" of the stereotype "Typo3Tca".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaOwningCtrlLabel(MElement this) : 
	emOwningTaggedValues( prTypo3Tca(), prTypo3TcaCtrlLabel() );


/**
 * Returns the value reference of the single-valued tagged value "ctrlLabel"
 * of the stereotype "Typo3Tca".
 * 
 * @return	The value reference of the single-valued tagged value, otherwise null, if the tagged value is not assigned.
 */
MProperty emGetTypo3TcaCtrlLabel(MElement this) :
	emGetTaggedValueReference( prTypo3Tca(), prTypo3TcaCtrlLabel() );


// -- "ctrlLabelAlt" --
	
/**
 * Checks if an element has a utilizable value reference
 * of the tagged value "ctrlLabelAlt" of the stereotype "Typo3Tca" 
 * which is not null.
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaUtilizableCtrlLabelAlt(MElement this) :
	emHasUtilizableTaggedValueReference( prTypo3Tca(), prTypo3TcaCtrlLabelAlt() );


/**
 * Checks if an element is annotated with the specified value reference
 * of the tagged value "ctrlLabelAlt" of the stereotype "Typo3Tca".
 *
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaCtrlLabelAlt(MElement this, MElement valueReference) :
	emHasTaggedValue( prTypo3Tca(), prTypo3TcaCtrlLabelAlt(), valueReference );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlLabelAlt" of the stereotype "Typo3Tca".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaOwningCtrlLabelAlt(MElement this) : 
	emOwningTaggedValues( prTypo3Tca(), prTypo3TcaCtrlLabelAlt() );


/**
 * Returns the list of value references of the multi-valued tagged value "ctrlLabelAlt"
 * of the stereotype "Typo3Tca".
 * @return	The list of value references of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 * 
 */
List[MProperty] emGetTypo3TcaCtrlLabelAlt(MElement this) : 
	emAllTaggedValueReferences( prTypo3Tca(), prTypo3TcaCtrlLabelAlt() );


// -- "ctrlLabelAltForce" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "ctrlLabelAltForce" of the stereotype "Typo3Tca" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaUtilizableCtrlLabelAltForce(MElement this) :
	emHasUtilizableTaggedValue( prTypo3Tca(), prTypo3TcaCtrlLabelAltForce() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "ctrlLabelAltForce" of the stereotype "Typo3Tca".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaCtrlLabelAltForce(MElement this, String value) :
	emHasTaggedValue( prTypo3Tca(), prTypo3TcaCtrlLabelAltForce(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlLabelAltForce" of the stereotype "Typo3Tca".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaOwningCtrlLabelAltForce(MElement this) : 
	emOwningTaggedValues( prTypo3Tca(), prTypo3TcaCtrlLabelAltForce() );


/**
 * Returns the value of the single-valued tagged value "ctrlLabelAltForce"
 * of the stereotype "Typo3Tca".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaCtrlLabelAltForce(MElement this) :
	emGetTaggedValue( prTypo3Tca(), prTypo3TcaCtrlLabelAltForce() );


// -- "ctrlReadOnly" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "ctrlReadOnly" of the stereotype "Typo3Tca" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaUtilizableCtrlReadOnly(MElement this) :
	emHasUtilizableTaggedValue( prTypo3Tca(), prTypo3TcaCtrlReadOnly() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "ctrlReadOnly" of the stereotype "Typo3Tca".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaCtrlReadOnly(MElement this, String value) :
	emHasTaggedValue( prTypo3Tca(), prTypo3TcaCtrlReadOnly(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlReadOnly" of the stereotype "Typo3Tca".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaOwningCtrlReadOnly(MElement this) : 
	emOwningTaggedValues( prTypo3Tca(), prTypo3TcaCtrlReadOnly() );


/**
 * Returns the value of the single-valued tagged value "ctrlReadOnly"
 * of the stereotype "Typo3Tca".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaCtrlReadOnly(MElement this) :
	emGetTaggedValue( prTypo3Tca(), prTypo3TcaCtrlReadOnly() );


// -- "ctrlSearchFields" --
	
/**
 * Checks if an element has a utilizable value reference
 * of the tagged value "ctrlSearchFields" of the stereotype "Typo3Tca" 
 * which is not null.
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaUtilizableCtrlSearchFields(MElement this) :
	emHasUtilizableTaggedValueReference( prTypo3Tca(), prTypo3TcaCtrlSearchFields() );


/**
 * Checks if an element is annotated with the specified value reference
 * of the tagged value "ctrlSearchFields" of the stereotype "Typo3Tca".
 *
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaCtrlSearchFields(MElement this, MElement valueReference) :
	emHasTaggedValue( prTypo3Tca(), prTypo3TcaCtrlSearchFields(), valueReference );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "ctrlSearchFields" of the stereotype "Typo3Tca".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaOwningCtrlSearchFields(MElement this) : 
	emOwningTaggedValues( prTypo3Tca(), prTypo3TcaCtrlSearchFields() );


/**
 * Returns the list of value references of the multi-valued tagged value "ctrlSearchFields"
 * of the stereotype "Typo3Tca".
 * @return	The list of value references of a multi-valued tagged value, otherwise an empty list, if the tagged value is not assigned.
 * 
 */
List[MProperty] emGetTypo3TcaCtrlSearchFields(MElement this) : 
	emAllTaggedValueReferences( prTypo3Tca(), prTypo3TcaCtrlSearchFields() );


// -- Xtend scripts for Stereotype "Typo3TcaAssociation" --

/**
 * Checks if an element is annotated with the stereotype "Typo3TcaAssociation".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTypo3TcaAssociationStereotype(MElement this) :
	emHasStereotypeAssignment( prTypo3TcaAssociation() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "Typo3TcaAssociation".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTypo3TcaAssociation(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "Typo3TcaAssociation".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTypo3TcaAssociation(), tag, valueReference );


// -- "columnsConfigWizardAdd" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsConfigWizardAdd" of the stereotype "Typo3TcaAssociation" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationUtilizableColumnsConfigWizardAdd(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardAdd() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsConfigWizardAdd" of the stereotype "Typo3TcaAssociation".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationColumnsConfigWizardAdd(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardAdd(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsConfigWizardAdd" of the stereotype "Typo3TcaAssociation".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaAssociationOwningColumnsConfigWizardAdd(MElement this) : 
	emOwningTaggedValues( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardAdd() );


/**
 * Returns the value of the single-valued tagged value "columnsConfigWizardAdd"
 * of the stereotype "Typo3TcaAssociation".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaAssociationColumnsConfigWizardAdd(MElement this) :
	emGetTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardAdd() );


// -- "columnsConfigWizardEdit" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsConfigWizardEdit" of the stereotype "Typo3TcaAssociation" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationUtilizableColumnsConfigWizardEdit(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardEdit() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsConfigWizardEdit" of the stereotype "Typo3TcaAssociation".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationColumnsConfigWizardEdit(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardEdit(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsConfigWizardEdit" of the stereotype "Typo3TcaAssociation".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaAssociationOwningColumnsConfigWizardEdit(MElement this) : 
	emOwningTaggedValues( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardEdit() );


/**
 * Returns the value of the single-valued tagged value "columnsConfigWizardEdit"
 * of the stereotype "Typo3TcaAssociation".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaAssociationColumnsConfigWizardEdit(MElement this) :
	emGetTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardEdit() );


// -- "columnsConfigWizardSuggest" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsConfigWizardSuggest" of the stereotype "Typo3TcaAssociation" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationUtilizableColumnsConfigWizardSuggest(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardSuggest() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsConfigWizardSuggest" of the stereotype "Typo3TcaAssociation".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaAssociationColumnsConfigWizardSuggest(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardSuggest(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsConfigWizardSuggest" of the stereotype "Typo3TcaAssociation".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaAssociationOwningColumnsConfigWizardSuggest(MElement this) : 
	emOwningTaggedValues( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardSuggest() );


/**
 * Returns the value of the single-valued tagged value "columnsConfigWizardSuggest"
 * of the stereotype "Typo3TcaAssociation".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaAssociationColumnsConfigWizardSuggest(MElement this) :
	emGetTaggedValue( prTypo3TcaAssociation(), prTypo3TcaAssociationColumnsConfigWizardSuggest() );


// -- Xtend scripts for Stereotype "Typo3TcaProperty" --

/**
 * Checks if an element is annotated with the stereotype "Typo3TcaProperty".
 * 
 * @return	True if the element has the stereotype assigned, otherwise false.
 */
boolean emHasTypo3TcaPropertyStereotype(MElement this) :
	emHasStereotypeAssignment( prTypo3TcaProperty() );


/**
 * Checks if an element is annotated with the specified value 
 * of the specified tagged value of the stereotype "Typo3TcaProperty".
 *
 * @param	tag		The name of a tagged value.
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyTaggedValue(MElement this, String tag, String value) :
	emHasTaggedValue( prTypo3TcaProperty(), tag, value );


/**
 * Checks if an element is annotated with the specified value reference 
 * of the specified tagged value of the stereotype "Typo3TcaProperty".
 *
 * @param	tag				The name of a tagged value.
 * @param	valueReference	The value reference of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyTaggedValue(MElement this, String tag, MElement valueReference) :
	emHasTaggedValue( prTypo3TcaProperty(), tag, valueReference );


// -- "columnsDefaultExtras" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsDefaultExtras" of the stereotype "Typo3TcaProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyUtilizableColumnsDefaultExtras(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsDefaultExtras() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsDefaultExtras" of the stereotype "Typo3TcaProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyColumnsDefaultExtras(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsDefaultExtras(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsDefaultExtras" of the stereotype "Typo3TcaProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaPropertyOwningColumnsDefaultExtras(MElement this) : 
	emOwningTaggedValues( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsDefaultExtras() );


/**
 * Returns the value of the single-valued tagged value "columnsDefaultExtras"
 * of the stereotype "Typo3TcaProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaPropertyColumnsDefaultExtras(MElement this) :
	emGetTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsDefaultExtras() );


// -- "columnsExclude" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "columnsExclude" of the stereotype "Typo3TcaProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyUtilizableColumnsExclude(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsExclude() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "columnsExclude" of the stereotype "Typo3TcaProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyColumnsExclude(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsExclude(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "columnsExclude" of the stereotype "Typo3TcaProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaPropertyOwningColumnsExclude(MElement this) : 
	emOwningTaggedValues( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsExclude() );


/**
 * Returns the value of the single-valued tagged value "columnsExclude"
 * of the stereotype "Typo3TcaProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaPropertyColumnsExclude(MElement this) :
	emGetTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyColumnsExclude() );


// -- "typesAltLabel" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesAltLabel" of the stereotype "Typo3TcaProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyUtilizableTypesAltLabel(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesAltLabel() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesAltLabel" of the stereotype "Typo3TcaProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyTypesAltLabel(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesAltLabel(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesAltLabel" of the stereotype "Typo3TcaProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaPropertyOwningTypesAltLabel(MElement this) : 
	emOwningTaggedValues( prTypo3TcaProperty(), prTypo3TcaPropertyTypesAltLabel() );


/**
 * Returns the value of the single-valued tagged value "typesAltLabel"
 * of the stereotype "Typo3TcaProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaPropertyTypesAltLabel(MElement this) :
	emGetTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesAltLabel() );


// -- "typesFormStyleCodes" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesFormStyleCodes" of the stereotype "Typo3TcaProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyUtilizableTypesFormStyleCodes(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesFormStyleCodes() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesFormStyleCodes" of the stereotype "Typo3TcaProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyTypesFormStyleCodes(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesFormStyleCodes(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesFormStyleCodes" of the stereotype "Typo3TcaProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaPropertyOwningTypesFormStyleCodes(MElement this) : 
	emOwningTaggedValues( prTypo3TcaProperty(), prTypo3TcaPropertyTypesFormStyleCodes() );


/**
 * Returns the value of the single-valued tagged value "typesFormStyleCodes"
 * of the stereotype "Typo3TcaProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaPropertyTypesFormStyleCodes(MElement this) :
	emGetTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesFormStyleCodes() );


// -- "typesPaletteNumber" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesPaletteNumber" of the stereotype "Typo3TcaProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyUtilizableTypesPaletteNumber(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesPaletteNumber() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesPaletteNumber" of the stereotype "Typo3TcaProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyTypesPaletteNumber(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesPaletteNumber(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesPaletteNumber" of the stereotype "Typo3TcaProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaPropertyOwningTypesPaletteNumber(MElement this) : 
	emOwningTaggedValues( prTypo3TcaProperty(), prTypo3TcaPropertyTypesPaletteNumber() );


/**
 * Returns the value of the single-valued tagged value "typesPaletteNumber"
 * of the stereotype "Typo3TcaProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaPropertyTypesPaletteNumber(MElement this) :
	emGetTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesPaletteNumber() );


// -- "typesSpecialConfiguration" --
	
/**
 * Checks if an element has a utilizable value
 * of the tagged value "typesSpecialConfiguration" of the stereotype "Typo3TcaProperty" 
 * which is neither empty ('') nor null ('null').
 *
 * @return	True if the element has a utilizable tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyUtilizableTypesSpecialConfiguration(MElement this) :
	emHasUtilizableTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesSpecialConfiguration() );


/**
 * Checks if an element is annotated with the specified value 
 * of the tagged value "typesSpecialConfiguration" of the stereotype "Typo3TcaProperty".
 *
 * @param	value	The value of a tagged value.
 * @return	True if the element has a tagged value, otherwise false.
 */
boolean emHasTypo3TcaPropertyTypesSpecialConfiguration(MElement this, String value) :
	emHasTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesSpecialConfiguration(), value );


/**
 * Returns the list of owning tagged values 
 * of the tagged value "typesSpecialConfiguration" of the stereotype "Typo3TcaProperty".
 * 
 * @return	The list of tagged values, otherwise an empty list.
 */
List[MTaggedValue] emGetTypo3TcaPropertyOwningTypesSpecialConfiguration(MElement this) : 
	emOwningTaggedValues( prTypo3TcaProperty(), prTypo3TcaPropertyTypesSpecialConfiguration() );


/**
 * Returns the value of the single-valued tagged value "typesSpecialConfiguration"
 * of the stereotype "Typo3TcaProperty".
 * 
 * @return	The value of the single-valued tagged value, otherwise an empty string, if the tagged value is not assigned.
 */
String emGetTypo3TcaPropertyTypesSpecialConfiguration(MElement this) :
	emGetTaggedValue( prTypo3TcaProperty(), prTypo3TcaPropertyTypesSpecialConfiguration() );


// PROTECTED REGION ID(accesselement.own.code.4d8385d1-1c85-11e3-8460-2388508c54e2) ENABLED START
// PROTECTED REGION END
