/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;


/**
 * Naming convention scripts for TYPO3 CMS.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS profile scripts
extension org::genesez::platform::typo3::cms::profile::Typo3CmsProfile;


// use TYPO3 MVC workflow global var scripts
extension org::genesez::platform::typo3::cms::util::GlobalVar;


// -- TYPO3 CMS extension key + vendor name + package name conventions --------------------------------------

/**
 * Getter of the extension key. 
 * This script is only a wrapper for "globalVarExtensionKey()" defined in "GlobalVar.ext".
 * E.g.: If the extension key is "blog_example" then this method returns the same extension key "blog_example".
 * See http://docs.typo3.org/typo3cms/CoreApiReference/ExtensionArchitecture/ExtensionKey/Index.html
 *
 * @return	The extension key.
 */
String extensionKey() :
	globalVarExtensionKey();


/**
 * Getter of the extension key without underscores.
 * E.g.: Extension key "blog_example" would become "blogexample".
 *
 * @return	The extension key without underscores.
 */
String extensionKeyWithoutUnderscores() :
	extensionKey().replaceAll("_", "");


/**
 * Getter of the extension vendor name. 
 * This script is only a wrapper for "globalVarExtensionVendorName()" defined in "GlobalVar.ext".
 * E.g.: If the extension vendor name is "GeneSEZ" then this method returns the same extension vendor name "GeneSEZ".
 *
 * @return	The extension vendor name.
 */
String extensionVendorName() :
	globalVarExtensionVendorName();


/**
 * Getter of the extension package name.
 * The package name corresponds to the extension key which means that underscores in the extension key 
 * are removed and replaced by upper camel case.
 * E.g.: Extension key "blog_example" would become "BlogExample" as package name.
 *
 * @return	The extension package name.
 */
String extensionPackageName() :
	// using toString() method without parameter does not work
	extensionKey().split("_").toFirstUpper().toString("");


// -- TYPO3 CMS extension prefix conventions ----------------------------------------------------------------

/**
 * Getter of the extension prefix.
 * Example for general extensions: If the extension key is "blog_example" then this method returns the prefix "tx_blogexample".
 * Example for user specific extensions: If the extension key is "user_blog_example" then the method returns the prefix "user_blog_example".
 * See http://docs.typo3.org/typo3cms/CoreApiReference/ExtensionArchitecture/NamingConventions/Index.html
 * 
 * @return	The prefix to prepend to extensions.
 */
String extensionPrefix() :
	// checks if the extension is a general or a user specific extension, 
	// by determination of the extension key if it does start with prefix "user_"
	isGeneralExtension()
		? "tx_" + extensionKeyWithoutUnderscores()
		: extensionKey();


/**
 * Getter of the extension prefix without underscores.
 * Example for general extensions: If the extension key is "blog_example" then this method returns the prefix "txblogexample".
 * Example for user specific extensions: If the extension key is "user_blog_example" then the method returns the prefix "userblogexample".
 * See http://docs.typo3.org/typo3cms/CoreApiReference/ExtensionArchitecture/NamingConventions/Index.html
 * 
 * @return	The prefix to prepend to extensions.
 */
String extensionPrefixWithoutUnderscores() :
	extensionPrefix().replaceAll("_", "");


/**
 * Checks if the extension is a general or a user specific extension, 
 * by determination if the extension key does not start with prefix "user_".
 * See http://docs.typo3.org/typo3cms/CoreApiReference/ExtensionArchitecture/NamingConventions/Index.html
 */
Boolean isGeneralExtension() :
	!extensionKey().startsWith("user_");


// -- TYPO3 CMS extension management conventions ------------------------------------------------------------

/**
 * Formats a string value into a TYPO3 CMS extension category value.
 *
 * @param	category	The category to format.
 * @return	The TYPO3 CMS extension category.
 */
String asExtensionCategory(String category) :
	category.toLowerCase();


/**
 * Formats a string value into a TYPO3 CMS extension state value.
 *
 * @param	state	The state to format.
 * @return	The TYPO3 CMS extension state.
 */
String asExtensionState(String state) :
	switch (state) {
		case prTypo3ExtensionStateExcludeFromUpdates() :
			"excludeFromUpdates"
		default :
			state.toLowerCase()
	};


/**
 * Formats a string value into a TYPO3 CMS associative extension constraint array item.
 * 
 * @param	constraint	The constraint to format.
 * @return	The associative constraint array item.
 */
String asExtensionConstraint(String constraint) :
	constraint.contains(":")
		? "'" + constraint.split(":").trim().toString("' => '") + "'"
		: constraint;


// -- PHP Composer extension management conventions ---------------------------------------------------------

/**
 * Getter of the extension key in PHP Composer notation.
 * E.g.: Extension key "blog_example" would become "blog-example".
 *
 * @return	The extension key in PHP Composer notation.
 */
String composerExtensionKey() :
	extensionKey().replaceAll("_", "-");


/**
 * Getter of the extension vendor name in PHP Composer notation. 
 * E.g.: Extension vendor name "GeneSEZ" would become "genesez".
 *
 * @return	The extension vendor name in PHP composer notation.
 */
String composerExtensionVendorName() :
	extensionVendorName().toLowerCase();


// -- TYPO3 CMS conventions ---------------------------------------------------------------------------------

/**
 * Formats a string value into a TYPO3 CMS language key value.
 *
 * @param	languageKey	The language key to format.
 * @return	The TYPO3 CMS language key.
 */
String asTypo3LanguageKey(String languageKey) :
	languageKey.toLowerCase();


// -- TYPO3 CMS Table Configuration Array conventions -------------------------------------------------------

/**
 * Formats a string value into a TYPO3 CMS TCA rootLevel value.
 *
 * @param	rootLevel	The rootLevel to format.
 * @return	The TYPO3 CMS TCA rootLevel.
 */
Integer asTcaRootLevel(String rootLevel) :
	switch (rootLevel) {
		case prTypo3TcaRootLevelExistsInBoth() :
			-1
		case prTypo3TcaRootLevelExistsOnlyInRoot() :
			1
		default :
			0
	};


// -- PHP Standards Recommendations conventions -------------------------------------------------------------

/**
 * Formats a boolean value into a PHP PSR-2 Boolean value.
 * See http://www.php-fig.org/psr/psr-2/
 *
 * @param	boolean	The Boolean to format.
 * @return	The PHP PSR-2 Boolean (true or false).
 */
String asPhpBoolean(Boolean boolean) :
	boolean.toString().toLowerCase();


/**
 * Formats a integer value into a PHP PSR-2 Boolean.
 * See http://www.php-fig.org/psr/psr-2/
 *
 * @param	boolean	The Boolean to format.
 * @return	The PHP PSR-2 Boolean (true or false).
 */
String asPhpBoolean(Integer boolean) :
	boolean == 1
		? asPhpBoolean(true)
		: asPhpBoolean(false);


/**
 * Formats a string value into a PHP PSR-2 Boolean.
 * See http://www.php-fig.org/psr/psr-2/
 *
 * @param	boolean	The Boolean to format.
 * @return	The PHP PSR-2 Boolean (true or false).
 */
String asPhpBoolean(String boolean) :
	boolean.toLowerCase() == "true" || boolean == "1"
		? asPhpBoolean(true)
		: asPhpBoolean(false);