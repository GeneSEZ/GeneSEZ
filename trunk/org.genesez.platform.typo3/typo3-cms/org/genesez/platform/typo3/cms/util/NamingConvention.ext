/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */


/**
 * Naming convention scripts for TYPO3 CMS.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS profile scripts
extension org::genesez::platform::typo3::cms::profile::Typo3CmsProfile;


// -- TYPO3 CMS conventions ---------------------------------------------------------------------------------

/**
 * Formats a string value into a TYPO3 CMS Boolean value.
 *
 * @param	boolean	The Boolean to format.
 * @return	The TYPO3 CMS Boolean.
 */
String asTypo3Boolean(Boolean boolean) :
	boolean.toString().toUpperCase();


/**
 * Formats a string value into a TYPO3 CMS Boolean.
 *
 * @param	boolean	The Boolean to format.
 * @return	The TYPO3 CMS Boolean.
 */
String asTypo3Boolean(String boolean) :
	boolean.toLowerCase() == "true"
		? "TRUE"
		: "FALSE";


/**
 * Formats a string value into a TYPO3 CMS category value.
 *
 * @param	category	The category to format.
 * @return	The TYPO3 CMS category.
 */
String asTypo3Category(String category) :
	category.toLowerCase();


/**
 * Formats a string value into a TYPO3 CMS language key value.
 *
 * @param	language	The language to format.
 * @return	The TYPO3 CMS language key.
 */
String asTypo3LanguageKey(String language) :
	language.toLowerCase();


/**
 * Formats a string value into a TYPO3 CMS lock type value.
 *
 * @param	lockType	The lock type to format.
 * @return	The TYPO3 CMS lock type.
 */
String asTypo3LockType(String lockType) :
	lockType.subString( 0, 1 );


/**
 * Formats a string value into a TYPO3 CMS priority value.
 *
 * @param	priority	The priority to format.
 * @return	The TYPO3 CMS priority.
 */
String asTypo3Priority(String priority) :
	switch ( priority ) {
		case prTypo3PriorityEmpty() :
			""
		default :
			priority.toLowerCase()
	};
	

/**
 * Formats a string value into a TYPO3 CMS state value.
 *
 * @param	state	The state to format.
 * @return	The TYPO3 CMS state.
 */
String asTypo3State(String state) :
	switch ( state ) {
		case prTypo3StateExcludeFromUpdates() :
			"excludeFromUpdates"
		default :
			state.toLowerCase()
	};


/**
 * Formats a string value into a TYPO3 CMS main module value.
 *
 * @param	mainModule	The main module to format.
 * @return	The TYPO3 CMS main module.
 */
String asTypo3MainModul(String mainModule) :
	mainModule.toLowerCase();
	
	
/**
 * Formats a string value into a TYPO3 CMS access role value.
 *
 * @param	accessRole	The access role to format.
 * @return	The TYPO3 CMS access role.
 */
String asTypo3AccessRole(String accessRole) :
	accessRole.toLowerCase();
	

/**
 * Formats a string value into a TYPO3 CMS TCx eval type value.
 *
 * @param	tcxEvalType	The TCx eval type to format.
 * @return	The TYPO3 CMS TCx eval type.
 */
//String asTypo3TCxEvalType(String tcxEvalType) :
//	tcxEvalType.toLowerCase();
	

/**
 * Formats a string value into a TYPO3 CMS associative array item.
 * 
 * Having a trailing comma after the last defined array entry, while unusual, is a valid syntax. 
 * See http://php.net/manual/en/function.array.php
 *
 * When using this latter declaration, we encourage using a trailing comma for the last item in the array; 
 * this minimizes the impact of adding new items on successive lines, and helps to ensure no parse errors 
 * occur due to a missing comma. 
 * See http://framework.zend.com/manual/en/coding-standard.coding-style.html
 *
 * @param	item	The item to format.
 * @return	The TYPO3 CMS associative array item.
 */
List[String] asTypo3AssociativeArrayItem(String item) :
	item.contains( "=" )
		? (	let kv = item.replaceFirst( "=", "=>" ).split( "=>" ) :
				"'" + kv.get( 0 ).trim() + "' => " + kv.get( 1 ).trim() + ","
		) : "";