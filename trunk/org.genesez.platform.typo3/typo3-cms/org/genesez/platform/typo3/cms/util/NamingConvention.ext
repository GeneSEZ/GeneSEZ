/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;


/**
 * Naming convention scripts for TYPO3 CMS.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

// use TYPO3 CMS profile scripts
extension org::genesez::platform::typo3::cms::profile::Typo3CmsProfile;


// use TYPO3 MVC workflow global var scripts
extension org::genesez::platform::typo3::cms::util::GlobalVar;


// -- TYPO3 CMS extension key + vendor name + package name conventions --------------------------------------

/**
 * Getter of the extension key. 
 * This script is only a wrapper for "globalVarExtensionKey()" defined in "GlobalVar.ext".
 * E.g.: If the extension key is "blog_example" then this method returns the same extension key "blog_example".
 *
 * @return	The extension key.
 */
String extensionKey() :
	globalVarExtensionKey();


/**
 * Getter of the extension key without underscores. 
 * E.g.: Extension key "blog_example" would become "blogexample".
 *
 * @return	The extension key without underscores.
 */
String extensionKeyWithoutUnderscores() :
	extensionKey().replaceAll("_", "");


/**
 * Getter of the extension vendor name. 
 * This script is only a wrapper for "globalVarExtensionVendorName()" defined in "GlobalVar.ext".
 * E.g.: If the extension vendor name is "GeneSEZ" then this method returns the same extension vendor name "GeneSEZ".
 *
 * @return	The extension vendor name.
 */
String extensionVendorName() :
	globalVarExtensionVendorName();


/**
 * Getter of the extension package name.
 * The package name corresponds to the extension key which means that underscores in the extension key 
 * are removed and replaced by upper camel case.
 * E.g.: Extension key "blog_example" would become "BlogExample" as package name.
 *
 * @return	The extension package name.
 */
String extensionPackageName() :
	extensionPackageName( extensionKey() );


/**
 * Getter of the extension package name.
 *
 * @param	extensionKey	The extension key.
 * @return	The extension package name.
 */
private cached String extensionPackageName(String extensionKey) :
		JAVA org.genesez.platform.typo3.cms.convention.NamingConvention.extensionPackageName(java.lang.String);


// -- TYPO3 CMS extension prefix conventions ----------------------------------------------------------------

/**
 * Getter of the extension prefix.
 * Example for general extensions: If the extension key is "blog_example" then this method returns the prefix "tx_blogexample".
 * Example for user specific extensions: If the extension key is "user_blog_example" then the method returns the prefix "user_blog_example".
 *
 * @return	The prefix to prepend to extensions.
 */
String extensionPrefix() :
	isGeneralExtension()
		? "tx_" + extensionKeyWithoutUnderscores()
		: extensionKey();


/**
 * Getter of the extension prefix without underscores.
 * Example for general extensions: If the extension key is "blog_example" then this method returns the prefix "txblogexample".
 * Example for user specific extensions: If the extension key is "user_blog_example" then the method returns the prefix "userblogexample".
 *
 * @return	The prefix to prepend to extensions.
 */
String extensionPrefixWithoutUnderscores() :
	// checks if the extension is a general or a user specific extension, 
	// by determination of the extension key if it does start with prefix "user_"
	isGeneralExtension()
		? "tx" + extensionKeyWithoutUnderscores()
		: extensionKeyWithoutUnderscores();


/**
 * Checks if the extension is a general or a user specific extension, 
 * by determination of the extension key if it does not start with prefix "user_".
 */
private Boolean isGeneralExtension() :
	!extensionKey().startsWith("user_");


// -- TYPO3 CMS conventions ---------------------------------------------------------------------------------

/**
 * Formats a string value into a TYPO3 CMS Boolean value.
 *
 * @param	boolean	The Boolean to format.
 * @return	The TYPO3 CMS Boolean.
 */
String asTypo3Boolean(Boolean boolean) :
	boolean.toString().toUpperCase();


/**
 * Formats a string value into a TYPO3 CMS Boolean.
 *
 * @param	boolean	The Boolean to format.
 * @return	The TYPO3 CMS Boolean.
 */
String asTypo3Boolean(String boolean) :
	boolean.toLowerCase() == "true"
		? "TRUE"
		: "FALSE";


/**
 * Formats a string value into a TYPO3 CMS category value.
 *
 * @param	category	The category to format.
 * @return	The TYPO3 CMS category.
 */
String asTypo3Category(String category) :
	category.toLowerCase();


/**
 * Formats a string value into a TYPO3 CMS language key value.
 *
 * @param	language	The language to format.
 * @return	The TYPO3 CMS language key.
 */
String asTypo3LanguageKey(String language) :
	language.toLowerCase();


/**
 * Formats a string value into a TYPO3 CMS lock type value.
 *
 * @param	lockType	The lock type to format.
 * @return	The TYPO3 CMS lock type.
 */
String asTypo3LockType(String lockType) :
	lockType.subString(0, 1);


/**
 * Formats a string value into a TYPO3 CMS priority value.
 *
 * @param	priority	The priority to format.
 * @return	The TYPO3 CMS priority.
 */
String asTypo3Priority(String priority) :
	switch (priority) {
		case prTypo3PriorityEmpty() :
			""
		default :
			priority.toLowerCase()
	};
	

/**
 * Formats a string value into a TYPO3 CMS state value.
 *
 * @param	state	The state to format.
 * @return	The TYPO3 CMS state.
 */
String asTypo3State(String state) :
	switch (state) {
		case prTypo3StateExcludeFromUpdates() :
			"excludeFromUpdates"
		default :
			state.toLowerCase()
	};


/**
 * Formats a string value into a TYPO3 CMS main module value.
 *
 * @param	mainModule	The main module to format.
 * @return	The TYPO3 CMS main module.
 */
String asTypo3MainModul(String mainModule) :
	mainModule.toLowerCase();
	
	
/**
 * Formats a string value into a TYPO3 CMS access role value.
 *
 * @param	accessRole	The access role to format.
 * @return	The TYPO3 CMS access role.
 */
String asTypo3AccessRole(String accessRole) :
	accessRole.toLowerCase();


/**
 * Formats an interface name into a TYPO3 CMS plugin name.
 *
 * @return	The TYPO3 CMS plugin name.
 */
String asTypo3PluginName(MInterface this):
	name.toFirstUpper();


/**
 * Formats an interface name into a TYPO3 CMS module name.
 *
 * @return	The TYPO3 CMS module name.
 */
String asTypo3ModuleName(MInterface this) :
	extensionPrefixWithoutUnderscores() + "_"  + name.toLowerCase();


// -- PHP conventions ---------------------------------------------------------------------------------------

/**
 * Formats a string value into a associative array item.
 * 
 * Having a trailing comma after the last defined array entry, while unusual, is a valid syntax. 
 * See http://php.net/manual/en/function.array.php
 *
 * When using this latter declaration, we encourage using a trailing comma for the last item in the array; 
 * this minimizes the impact of adding new items on successive lines, and helps to ensure no parse errors 
 * occur due to a missing comma. 
 * See http://framework.zend.com/manual/en/coding-standard.coding-style.html
 *
 * @param	item	The item to format.
 * @return	The associative array item.
 */
List[String] asAssociativeArrayItem(String item) :
	item.contains("=")
		? (	
			let kv = item.replaceFirst("=", "=>").split("=>") :
				"'" + kv.get(0).trim() + "' => " + kv.get(1).trim() + ","
		) 
		: "";