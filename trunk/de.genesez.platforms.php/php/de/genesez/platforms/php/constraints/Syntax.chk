/* 
 * validates the model syntax for php code generation
 * 
 * currently covered:
 * - check for 'MDataType's
 * - check for 'MEnumeration's
 * - realizations of 'MInterface's, generalizations for 'MClass's
 * - association classes
 * - visibility, abstract + final modifiers for classes + interfaces
 * - visibility of operations
 * - abstract operations contained in abstract classes
 * - constructor + destructor operations with return types
 * - destructor operations with parameters
 * 
 * @author	tobias haubold
 * @date	2008-04-10
 */

// based on genesez meta model
import genesezMM;

// use helper to access information more easily
extension de::genesez::platforms::common::AccessHelper;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if the model contains 'MDataType's
 * @return	false, if the model contains data types
 */
context MDataType WARNING "GeneSEZ-Gen: generation of 'MDataType's are currently NOT suported!" :
	!( metaType == MDataType );

/**
 * checks if the model contains association classes
 * @return	false, if the model contains association classes, otherwise true
 */
context MClass WARNING "GeneSEZ-GEN: association class '" + name + "': association classes are currently NOT supported!" :
	ownedAssociation == null;

/**
 * checks if the model contains 'MEnumeration's
 * @return	false, if the model contains enumerations
 */
context MEnumeration WARNING "GeneSEZ-GEN: Enumerations are NOT nativly supported by PHP; generating them as 'final' classes with constant's" :
	!( metaType == MEnumeration );

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if an interface has realizations
 * @return	false, if the interface has realizations, otherwise true
 */
context MInterface ERROR "GeneSEZ-GEN: the realizations '" + realization.name() + "' of the interface '" + name + "' will be ignored; interfaces cannot have realizations!" :
	realization.isEmpty;

/**
 * checks if an interface has a visibility
 * @return	false, if the interface has a visibility which will be ignored, otherwise true
 */
context MInterface WARNING "GeneSEZ-GEN: the visibility '" + visibility + "' of the interface '" + name + "' will be ignored, because it is NOT supported by PHP" :
	visibility.trim().length > 0;

/**
 * checks if an interface is abstract
 * @return	false, if the abstract modifier is set to 'true' and will be ignored, otherwise true
 */
context MInterface WARNING "GeneSEZ-GEN: the abstract modifier of interface '" + name + "' will be ignored, because it is NOT supported by PHP" :
	!abstract;

/**
 * checks if an interface is final
 * @return	false, if the final modifier is set to 'true' and will be ignored, otherwise true
 */
context MInterface WARNING "GeneSEZ-GEN: the final modifier of interface '" + name + "' will be ignored, because NOT it is supported by PHP" :
	!final;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if a class has a visibility
 * @return	false, if the class has a visibility which will be ignored, otherwise true
 */
context MClass WARNING "GeneSEZ-GEN: the visibility '" + visibility + "' of the class '" + name + "' will be ignored, because it is NOT supported by PHP" :
	visibility.trim().length > 0;

/**
 * checks if a class is both, abstract + final
 * @return	false, if the class is both, abstract + final, otherwise true
 */
context MClass WARNING "GeneSEZ-GEN: the class '" + name + "' is both, abstract + final, which is NOT supported by PHP - only one modifier will be used!" :
	!( abstract && final );

/**
 * checks if a class has more than one generalization
 * @return	false, if the class has more than one realization, otherwise true
 */
context MClass WARNING "GeneSEZ-GEN: the class '" + name + "' cannot have more than one generalization, because multiple inheritance is NOT supported by PHP - only the first one is used!" :
	!( generalization.size > 1 );

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * checks if an operation has an illegal visibility
 * visibility can only be: private, protected, public
 * @return	false, if the operation has an illegal visibility
 */
context MOperation ERROR "GeneSEZ-GEN: the operation '" + name + "' has illegal modifiers - PHP only supports 'private', 'protected' + 'public'!" :
	visibility == "private" || visibility == "protected" || visibility == "public";

/**
 * checks if an abstract operation is contained in an abstract class
 * @return	false, if the operation is abstract and not within an abstract class, otherwise true
 */
context MOperation WARNING "GeneSEZ-GEN: the abstract operation '" + name + "' MUST be contained within an abstract class, NOT within the non-abstract class '" + classifier.name + "' !" :
	!( abstract && !classifier.abstract );

/**
 * checks if an constructor operation has a return type set
 * @return	false, if the constructor has a return type, otherwise true
 */
context MOperation WARNING "GeneSEZ-GEN: the constructor operation '" + name + "' cannot have a return type ('" + returnType + "') - it will be ignored!" :
	!( isConstructor() && returnType != null && returnType.name().toLowerCase() != "void" );

/**
 * checks if an destructor operation has a return type set
 * @return	false, if the destructor has a return type, otherwise true
 */
context MOperation WARNING "GeneSEZ-GEN: the destructor operation '" + name + "' cannot have a return type ('" + returnType + "') - it will be ignored!" :
	!( isDestructor() && returnType != null && returnType.name().toLowerCase() != "void" );

/**
 * checks if an destructor operation has parameters
 * @return	false, if the destructor operation has parameters, otherwise true
 */
context MOperation WARNING "GeneSEZ-GEN: the destructor operation '" + name + "' cannot have parameters - they will be ignored!" :
	!( isDestructor() && parameter.size > 0 );

