/* 
 * naming conventions for php
 * 
 * @author	tobias haubold
 * @date	2008-04-07
 * @todo	concept for filename conventions
 */

// based on genesez meta model
import genesezMM;

/**
 * formats the filename of an type
String asFileName(String this) : toFirstUpper();
 */


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	types (+ classifiers)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats the name of a type
 * don't touch generics, primitive types or external types (external are mapped correctly)
 * just format the own created + generated types (classifiers)
 * 
 * @context	name of the type after type mapping
 * @return	formatted name of the type
 */
String asTypeName(MType this) :
	switch (metaType) {
		// don't touch the names of the following types - it's nonsense
		case MPrimitiveType : ((MPrimitiveType)this).name
		case MGeneric : ((MGeneric)this).specification
		case MExternal : ((MExternal)this).specification
		// format the classifiers
		case MClass : ((MClass)this).name.toFirstUpper()
		case MInterface : ((MInterface)this).name.toFirstUpper()
		case MEnumeration : ((MEnumeration)this).name.toFirstUpper()
		case MDataType : ((MDataType)this).name.toFirstUpper()
		default : ((MClassifier)this).name.toFirstUpper()
	};
	
/**
 * formats the name of a type after typemapping
 * don't touch the type, the name of the type is given by typemapping
 * @return	the name of the type
 */
String asTypeName(String this) : this;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	enumeration literals
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an enumeration literal
 * @context	the enumeration literal to format
 * @return	the formatted enum literal
 */
String asEnumLiteral(MLiteral this) : name.toUpperCase();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	attributes
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an attribute name as a constant
 * @context	the attribute to format
 * @return	the formatted attribute name
 */
String asConstant(MAttribute this) : name.toUpperCase();

/**
 * formats an attribute name as a normal attribute
 * @context	the attribute to format
 * @return	the formatted attribute name
 */
String asAttribute(MAttribute this) : name.toFirstLower();

/**
 * formats an attribute name as a getter method
 * @context	the attribute to format
 * @return	the formatted name of the getter method
 */
String asGetter(MAttribute this) : "get" + name.toFirstUpper();

/**
 * formats an attribute name as a setter method
 * @context	the attribute to format
 * @return	the formatted name of the setter method
 */
String asSetter(MAttribute this) : "set" + name.toFirstUpper();

/**
 * formats an attribute name as a 'insert in' method
 * @context	the attribute to format
 * @return	the formatted name of the 'insert in' method
 */
String asInsertIn(MAttribute this) : "insertIn" + name.toFirstUpper();

/**
 * formats an attribute name as a 'remove from' method
 * @context	the attribute to format
 * @return	the formatted name of the 'remove from' method
 */
String asRemoveFrom(MAttribute this) : "removeFrom" + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	association attributes
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an association role as a association attribute
 * @context	the association role to format
 * @return	the formatted name of the association attribute
 */
String asAttribute(MAssociationRole this) : name.toFirstLower();

/**
 * formats an association role as a getter method
 * @context	the association role to format
 * @return	the formatted name of the getter method
 */
String asGetter(MAssociationRole this) : "get" + name.toFirstUpper();

/**
 * formats an association role as a setter method
 * @context	the association role to format
 * @return	the formatted name of the setter method
 */
String asSetter(MAssociationRole this) : "set" + name.toFirstUpper();

/**
 * formats an association role as a 'insert in' method
 * @context	the association role to format
 * @return	the formatted name of the 'insert in' method
 */
String asInsertIn(MAssociationRole this) : "insertIn" + name.toFirstUpper();

/**
 * formats an association role as a 'remove from' method
 * @context	the association role to format
 * @return	the formatted name of the 'remove from' method
 */
String asRemoveFrom(MAssociationRole this) : "removeFrom" + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	operations
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an operation name
 * @context	the operation to format
 * @return	the formatted name of the operation
 */
String asOperation(MOperation this) : name.toFirstLower();

/**
 * formats an operation name as a constructor
 * only for php4, not called for php5 and higher
 * 
 * @context	the operation to format
 * @return	the formatted name of the operation
 */
String asConstructor(MOperation this) : name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	parameters
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an operation name
 * @context	the operation to format
 * @return	the formatted name of the operation
 */
String asParameter(MParameter this) : name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	type compatibility functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats a property as an attribute
 * just there for error-free templates (polymorphism)
 * @see	asAttribute(MAttribute)
 * @see asAttribtue(MAssociationRole)
 */
String asAttribute(MProperty this) : name.toFirstLower();
