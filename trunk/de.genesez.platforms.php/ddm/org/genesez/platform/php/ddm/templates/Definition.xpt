«REM»
	Generates the ddm (dynamic data model) definitions from an gcore model.
	
	@author	tobias haubold
	@date	2009-06-08
«ENDREM»

«REM» based on gcore meta model «ENDREM»
«IMPORT gcore»

«EXTENSION org::genesez::platform::common::Conversion»
«EXTENSION org::genesez::platform::common::FileSystemHelper»
«EXTENSION org::genesez::platform::common::UserInfoHelper»
«EXTENSION org::genesez::platform::php::ddm::scripts::Definition»


«REM»
	generates a ddm definition file
«ENDREM»
«DEFINE Root FOR MModel -»
«FILE filename() -»
<?php
«EXPAND comment -»

«PROTECT CSTART '/* ' CEND ' */' ID "initialization"»
// TODO: initialize your database connection
«ENDPROTECT»

«EXPAND imports -»

// - - type definitions - - - - - - - - - - - - - - - - - - - - - - - - - -
«EXPAND Type FOREACH types() -»

// - - class definitions - - - - - - - - - - - - - - - - - - - - - - - - - -
«EXPAND Class FOREACH classes() -»

// - - attribute definitions - - - - - - - - - - - - - - - - - - - - - - - -
«EXPAND Attribute FOREACH attributes() -»

// - - association definitions - - - - - - - - - - - - - - - - - - - - - - -
«EXPAND Association FOREACH associations() -»
?>
«ENDFILE»
«ENDDEFINE»

«REM»
	generates a comment
«ENDREM»
«DEFINE comment FOR MModel -»
/**
 * ddm definitions for «name»
 *
 * @author «getUserName()»
 */
«ENDDEFINE»

«REM»
	generates the ddm include
«ENDREM»
«DEFINE imports FOR MModel -»
require_once 'DDM.php';
«ENDDEFINE»

«REM»
	generates a ddm type definition
«ENDREM»
«DEFINE Type FOR MDataType»
// - - «name()»
$«name()» = new DDM_Type();
$«name()»->t_name = '«asName()»';
$«name()»->t_description = '«comment()»';
$«name()»->t_basetype = '«basetype().asBaseType()»';
$«name()»->t_constraint = '«constraint()»';
$«name()»->t_editable = «IF final»false«ELSE»true«ENDIF»;
$«name()»->save();
«ENDDEFINE»

«REM»
	generates a ddm class definition
«ENDREM»
«DEFINE Class FOR MClass»
// - - «name()»
$«name()» = new DDM_Class();
$«name()»->c_name = '«asName()»';
$«name()»->c_description = '«comment()»';
$«name()»->c_view = '«view().asViewName()»';
«IF !generalization.typeSelect(MClass).isEmpty -»
$«name()»->parent = $«generalization.typeSelect(MClass).first().name()»;
«ENDIF -»
$«name()»->c_editable = «IF final»false«ELSE»true«ENDIF»;
$«name()»->save();
«ENDDEFINE»

«REM»
	generates a ddm attribute definition
«ENDREM»
«DEFINE Attribute FOR MAttribute»
// - - «name()»
$attribute = new DDM_Attribute();
$attribute->a_name = '«asName()»';
$attribute->a_column = '«IF defaultvalue == null || defaultvalue == ""»«name.asColumnName()»«ELSE»«defaultvalue.asColumnName()»«ENDIF»';
$attribute->a_description = '«comment()»';
$attribute->type = $«((MDataType)type).name()»;
$attribute->class = $«classifier.name()»;
$attribute->save();
«ENDDEFINE»

«REM»
	generates a ddm association definition
«ENDREM»
«DEFINE Association FOR MAssociation»
// - - «name()»
//$association = new DDM_Association();
//$association->s_name = '«asName()»';
//$association->s_description = '«comment()»';
$«end.first().classifier.name()»->addAssociation(
	'«asName()»',
	$«((MClassifier)end.first().type).name()»,
	'«end.first().multiplicity.cardinality()»',
	'«end.first().oppositeMultiplicity.cardinality()»',
	'«comment()»'
);
//$association->save();
«ENDDEFINE»
