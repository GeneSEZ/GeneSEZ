«REM»
	handles everything about operations
	
	currently implemented:
	- modifiers (visibility, static, final)
	- constructors, destructors, declarations, implementations
	- parameters, protected regions
	- default value for params
	- type mapping, param types
	- comment support with exceptions
	- type hints are not used!
	
	TODO:
	- revise default return value when included in typemapping xml file
«ENDREM»


«REM» based on genesez meta model «ENDREM»
«IMPORT genesezMM»

«REM» use helper to access information «ENDREM»
«EXTENSION de::genesez::common::AccessHelper»
«REM» use the type mapping «ENDREM»
«EXTENSION de::genesez::common::typemapping::TypeMapping»

«REM» use naming conventions «ENDREM»
«EXTENSION de::genesez::platforms::php::scripts::Naming»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	processes the operations of a classifier
	order: constructor, destructor, declarations, implementations
«ENDREM»
«DEFINE All FOR MClassifier -»
	«EXPAND Constructor -»
	«EXPAND Destructor -»
	«EXPAND Declaration -»
	«EXPAND Implementation -»
«ENDDEFINE»

«REM»
	processes all constructors
«ENDREM»
«DEFINE Constructor FOR MClassifier -»
	«EXPAND _Constructor FOREACH operation.select( e| e.isConstructor() ) -»
«ENDDEFINE»

«REM»
	processes all destructors
«ENDREM»
«DEFINE Destructor FOR MClassifier -»
	«EXPAND _Destructor FOREACH operation.select( e| e.isDestructor() ) -»
«ENDDEFINE»

«REM»
	processes all operations to declare
«ENDREM»
«DEFINE Declaration FOR MClassifier -»
	«EXPAND _Declaration FOREACH operation.select( e| !e.isConstructor() && !e.isDestructor() && e.abstract ) -»
«ENDDEFINE»

«REM»
	processes all operations to implement
«ENDREM»
«DEFINE Implementation FOR MClassifier -»
	«EXPAND _Implementation FOREACH operation.select( e| !e.isConstructor() && !e.abstract ) -»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	generates an operation declaration
	@param	this	an operation to declare
«ENDREM»
«DEFINE _Declaration FOR MOperation -»
	«EXPAND Comment::Operation -»
	«EXPAND _Modifier -» function «asOperation()»(«EXPAND _Params -»);
«ENDDEFINE»

«REM»
	generates an operation implementation
	@param	this	an operation to implement
«ENDREM»
«DEFINE _Implementation FOR MOperation -»
	«EXPAND Comment::Operation -»
	«EXPAND _Modifier -» function «asOperation()»(«EXPAND _Params -») {
		«IF hasReturnType()»$returnValue = NULL;«ENDIF»
		«EXPAND _OwnCodeImpl("php.implementation." + xmiGuid) -»
		«IF hasReturnType()»return $returnValue;«ENDIF»
	}
«ENDDEFINE»

«REM»
	generates a constructor
	has no return value
	@param	this	an constructor operation
«ENDREM»
«DEFINE _Constructor FOR MOperation -»
	«EXPAND Comment::Constructor -»
	«visibility» function __construct(«EXPAND _Params -») {
		«EXPAND _OwnCodeImpl("php.constructor." + xmiGuid) -»
	}
«ENDDEFINE»

«REM»
	generates a destructor
	cannot have parameters or a return value
	@param	this	an destructor operation
«ENDREM»
«DEFINE _Destructor FOR MOperation -»
	«EXPAND Comment::Destructor -»
	«visibility» function __destruct() {
		«EXPAND _OwnCodeImpl("php.destructor." + xmiGuid) -»
	}
«ENDDEFINE»

«REM»
	generates the visibility and the modifiers static, final + abstract for an operation
	abstract only if the class is also abstract
	@param	this	an operation
«ENDREM»
«DEFINE _Modifier FOR MOperation -»
	«visibility»«IF static» static«ENDIF -»«IF final» final«ENDIF -»«IF abstract && classifier.abstract» abstract«ENDIF -»
«ENDDEFINE»

«REM»
	generates the parameters of an operation
	@param	this	an operation
«ENDREM»
«DEFINE _Params FOR MOperation -»
«FOREACH parameter AS p SEPARATOR ", " -»
«IF p.multiplicity == 1 -»
«REM»«p.type.mapName().asTypeName(p.type)» «ENDREM»$«p.asParameter()»«IF p.hasDefaultValue()» = «p.defaultvalue»«ENDIF -»
«ELSE -»
«REM»array «ENDREM»$«p.asParameter()»«IF p.hasDefaultValue()» = «p.defaultvalue»«ENDIF -»
«ENDIF -»
«ENDFOREACH -»
«ENDDEFINE»

«REM»
	generates the protected region of an operation
	@param	this	an operation
«ENDREM»
«DEFINE _OwnCodeImpl(String id) FOR MOperation -»
«IF isConstructor() -»
		«PROTECT CSTART '/* ' CEND ' */' ID (id)»
		// TODO: implementation of constructor for class '«classifier.asTypeName()»'
		«ENDPROTECT»
«ELSEIF isDestructor() -»
		«PROTECT CSTART '/* ' CEND ' */' ID (id)»
		// TODO: implementation of destructor for class '«classifier.asTypeName()»'
		«ENDPROTECT»
«ELSE -»
		«PROTECT CSTART '/* ' CEND ' */' ID (id)»
		// TODO: implementation of method '«classifier.asTypeName()».«asOperation()»(...)'
		«ENDPROTECT»
«ENDIF -»
«ENDDEFINE»

