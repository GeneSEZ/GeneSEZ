module org.genesez.metamodel.requirements

// properties from file (i don't know any way to reference a properties file in mwe2')
var model.dir = "model"
var ecore.file = "${model.dir}/greq.ecore"
var modeling.dir = "modeling"
var uml2.file = "${modeling.dir}/greq.uml"

var nsUri = "http://genesez.org/metamodel/requirements"
// transform the root package (model) in uml model
var includedPackages = "org.genesez.metamodel"
var addNameAttribute = false
var resourcePerToplevelPackage = false

/*
 * performs the uml 2 ecore transformation
 */
Workflow {
	// initialize uml2 support
	bean = org.eclipse.xtend.typesystem.uml2.Setup {
		standardUML2Setup = true
	}
	
	// reference to the ecore meta model
	bean = org.eclipse.xtend.typesystem.emf.EmfMetaModel : emf {
		metaModelPackage = "org.eclipse.emf.ecore.EcorePackage"
	}
	
	// reference to the uml meta model
	bean = org.eclipse.xtend.typesystem.uml2.UML2MetaModel : uml { }
	
	// instantiate the uml model from file
	component = org.eclipse.emf.mwe.utils.Reader {
		uri = "${uml2.file}"
		modelSlot = "uml2model"
	}
	// validate uml model to be transformable into an ecore model
	component = org.eclipse.xtend.check.CheckComponent {
		metaModel = emf
		metaModel = uml
		checkFile = "org::eclipse::xtend::util::uml2ecore::constraints"
		emfAllChildrenSlot = "uml2model"
		abortOnError = true
	}
	// transform the uml model into an ecore model
	component = org.eclipse.xtend.XtendComponent {
		metaModel = emf
		metaModel = uml
		globalVarDef = { name = "nsUri" value = "'${nsUri}'" }
		globalVarDef = { name = "includedPackages" value = "'${includedPackages}'" }
		globalVarDef = { name = "addNameAttribute" value = "${addNameAttribute}" }
		globalVarDef = { name = "resourcePerToplevelPackage" value = "${resourcePerToplevelPackage}" }
		invoke = "org::eclipse::xtend::util::uml2ecore::uml2ecore::top(uml2model)"
		outputSlot = "ecoreModel"
	}
	/*
		this serializer sets the uri into the ecore model references
		due to the base path of this workflow is not the ecore file location, the model references are wrong!
	<!--component id="serialize" class="org.eclipse.emf.mwe.utils.Writer">
		<modelSlot value="ecoreModel" />
		<uri value="${ecore.file}" />
	</component-->
	*/
	// serialize the instantiated ecore model into a file
	component = org.eclipse.xtend.typesystem.emf.XmiWriter {
		inputSlot = "ecoreModel"
		modelFile = "${ecore.file}"
	}
}