/**
 * General naming for elements
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-08-23
 */

// based on genesez meta model
import gcore;

// use common type mapping scripts
extension org::genesez::platforms::common::typemapping::TypeMapping reexport;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	  
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


Void setXtendNamingFile(String xtendNamingFile) :
	JAVA org.genesez.platforms.common.naming.Naming.setXtendNamingFile(java.lang.String);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Registering scripts  
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Get the actual naming context.
 * 
 * @return The actual naming context
 */
String getNamingContext() :
	JAVA org.genesez.platforms.common.naming.NamingContextManager.getContext();


/**
 * Get the actual type mapping context.
 * 
 * @return The actual type mapping context
 */
String getTypeMappingContext() :
	JAVA org.genesez.platforms.common.naming.TypeMappingContextManager.getContext();


/**
 * Set the new naming context.
 * 
 * @param namingContext The new naming context
 */
Void setNamingContext(String namingContext) :
	JAVA org.genesez.platforms.common.naming.NamingContextManager.setContext(java.lang.String);


/**
 * Set the new type mapping context.
 * 
 * @param typeMappingContext The new type mapping context
 */
Void setTypeMappingContext(String typeMappingContext) :
	JAVA org.genesez.platforms.common.naming.TypeMappingContextManager.setContext(java.lang.String);


/**
 * Revert to the previous naming context.
 */
Void revertNamingContext() :
	JAVA org.genesez.platforms.common.naming.NamingContextManager.revertContext();


/**
 * Revert to the previous type mapping context.
 */
Void revertTypeMappingContext() :
	JAVA org.genesez.platforms.common.naming.TypeMappingContextManager.revertContext();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Naming scripts for all MElements exclude all MTypes  
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * The name depends on the actual naming context.
 */
String name(MElement this) :
	naming( getNamingContext() );


/**
 * The name depends on the naming context parameter.
 *
 * @param namingContext The naming context
 */
String name(MElement this, String namingContext) :
	naming(namingContext);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Naming scripts for all MTypes  
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * The name depends on the actual naming context.
 */
String name(MClassifier this) :
	naming( getNamingContext() );


/**
 * The name depends on the naming context parameter.
 *
 * @param namingContext The naming context
 */
String name(MClassifier this, String namingContext) :
	naming(namingContext);
	

/**
 * The name depends on the naming and typemapping context parameters.
 *
 * @param namingContext The naming context
 * @param typeMappingContext The type mapping context
 */
String name(MClassifier this, String namingContext, String typeMappingContext) :
	naming(namingContext);


/**
 * The name depends on the actual naming context.
 */
String name(MPrimitiveType this) :
	mapName( getTypeMappingContext() );

/**
 * The name depends on the naming context parameter.
 *
 * @param namingContext The naming context
 */
String name(MPrimitiveType this, String namingContext) :
	mapName( getTypeMappingContext() );


/**
 * The name depends on the naming and typemapping context parameters.
 *
 * @param namingContext The naming context
 * @param typeMappingContext The type mapping context
 */
String name(MPrimitiveType this, String namingContext, String typeMappingContext) :
	mapName( typeMappingContext );


/**
 * The name depends on the actual naming context.
 */
String name(MExternal this) :
	mapName( getTypeMappingContext() );


/**
 * The name depends on the naming context parameter.
 *
 * @param namingContext The naming context
 */
String name(MExternal this, String namingContext) :
	mapName( getTypeMappingContext() );


/**
 * The name depends on the naming and typemapping context parameters.
 *
 * @param namingContext The naming context
 * @param typeMappingContext The type mapping context
 */
String name(MExternal this, String namingContext, String typeMappingContext) :
	mapName(typeMappingContext);


/**
 * The name depends on the actual naming context.
 */
String name(MGeneric this) :
	mapName( getTypeMappingContext() ).specification;


/**
 * The name depends on the naming context parameter.
 *
 * @param namingContext The naming context
 */
String name(MGeneric this, String namingContext) :
	mapName( getTypeMappingContext() ).specification;


/**
 * The name depends on the naming and typemapping context parameters.
 *
 * @param namingContext The naming context
 * @param typeMappingContext The type mapping context
 */
String name(MGeneric this, String namingContext, String typeMappingContext) :
	mapName(typeMappingContext).specification;


/**
 * The name depends on the actual naming context.
 */
String name(MType this) :
	this.toString();


/**
 * The name depends on the naming context parameter.
 *
 * @param namingContext The naming context
 */
String name(MType this, String namingContext) :
	this.toString();


/**
 * The name depends on the naming and typemapping context parameters.
 *
 * @param namingContext The naming context
 * @param typeMappingContext The type mapping context
 */
String name(MType this, String namingContext, String typeMappingContext) :
	this.toString();
	

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	mapping eXtend functions to private java functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

private String naming(MElement this, String namingContext) :
	JAVA org.genesez.platforms.common.naming.Naming.naming(de.genesez.metamodel.gcore.MElement, java.lang.String);