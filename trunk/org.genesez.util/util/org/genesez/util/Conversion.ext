/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */


/**
 * Utility scripts for conversions to make code generation more easier.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 * @author	André Pflüger <andre.pflueger@fh-zwickau.de>
 */


// -- Comment Conversions -----------------------------------------------------------------------------------


/**
 * Formats a comment text by adding the asterix (' * ') as prefix and the newline ('\n') as suffix to each line within the comment text.
 * 
 * @return	The formatted string comment.
 * @see		formatComment(String, String, String)
 * @api
 */
String formatCommentAsterix(String this) : 
	formatComment( " * ", "\n" );


/**
 * Formats a comment text by adding two slashes  ('// ') as prefix and the newline ('\n') as suffix to each line within the comment text.
 * 
 * @return	The formatted comment text.
 * @see		formatComment(String, String, String)
 * @api
 */
String formatCommentSlashSlash(String this) : 
	formatComment( "// ", "\n" );


/**
 * Formats a comment text by adding the asterix (' * ') as prefix and the newline ('\n') as suffix to each line within the string.
 * 
 * @return	The formatted comment text.
 * @see		formatComment(String, String, String)
 * @api
 */
String formatComment(String this) :
	formatComment( " * ", "\n" );


/**
 * Formats a comment text by adding the specified prefix and suffix to each line within the string.
 * 
 * @param	linePrefix	A prefix which is prepended to each line.
 * @param	lineSuffix	A suffix which is appended to each line.
 * @return	The formatted comment text.
 * @api
 */
String formatComment(String this, String linePrefix, String lineSuffix) :
	JAVA org.genesez.util.comment.CommentProcessing.formatComment(java.lang.String, java.lang.String, java.lang.String);


// -- Directory and File Conversions ------------------------------------------------------------------------ 


/**
 * Getter for the directory path separator character.
 *
 * @return	The directory path separator character ('/').
 * @todo	Should be moved to package filesystem.
 * @api
 */
String dirPathSeparator() : 
	"/";


/**
 * Getter for the file extension separator character.
 *
 * @return	The file extension separator character ('.').
 * @todo	Should be moved to package filesystem.
 * @api
 */
String fileExtensionSeparator() : 
	".";


// -- String Splitting and List Merging Conversions ---------------------------------------------------------


/**
 * Splits a comma separated list of values into a list of strings and removes all unnessesary whitespace.
 * If the length of the specified string is 0 an empty list is returned, otherwise   
 * if the specified string only contains the separator a list with an empty string is returned.
 * 
 * @param	s	A comma separated list of values.
 * @return	The list of strings, otherwise an empty list or a list with an empty string.
 * @todo 	The list should return an empty list if one of the exeptions matched.
 * @api
 */
List[String] convertToList(String string) :
	string.trim().length != 0
		? string.split(",").trim()
		: {};


/**
 * Splits a string representation of an array into a list of values.
 * 
 * @param	this	a string representation of an array (e.g. "[a,b, c]")
 * @return	The list of string elements or en empty list.
 * @api
 */
List[String] convertStringArrayToList(String this) : 
	this == null || this == "" || this == "[]"
		? {}
		: subString(1, length -1).convertToList();

/**
 * Splits a string with comma separated values into a list of strings optionally removing
 * the quotes and curly braces at the beginning and end.
 * 
 * Examples:
 * "{1, 2}" -> [1,2]
 * "[1, 2]" -> [1,2]
 * "1","2" -> ["1","2"]
 * 
 * @param	this	a string with comma separated values
 * @return	The list of string values or an empty list.
 * 
 * @api
 */
List[String] valueToList(String this) :
	this == null || this.trim().length == 0
		? {}
		: removeSurrounding("\"{").removeSurrounding("\"[").convertToList();

/**
 * Removes the surrounding string around the specified string if they exist, else do noting.
 * If the string starts with the specified string, then its length is removed from both ends.
 */
String removeSurrounding(String this, String s) :
	startsWith(s)
		? subString(s.length, length -s.length)
		: this;

/**
 * 	This method splits the given String by every capital letter, 
 *	transforms every token to upper case and adds underscores 
 *	between of them. 
 *	For instance: 'relatedPosts' -> 'RELATED_POSTS'.
 * 
 * 	@param 		name	string which should be converted
 * 	@return 	name in upper case and with underscores
 *	@see		toUpperPropertyName(String)
 *	@api
 */
String toUpperName(String name) : 
	JAVA org.genesez.util.naming.NameConverter.toUpperPropertyName(java.lang.String);
	

/**
 * 	This method splits the name by every capital letter, 
 *	transforms every token to lower case and adds underscores 
 *	between of them. 
 *	For instance: 'relatedPosts' -> 'related_posts'.
 * 
 * 	@param 		name	string which should be converted 
 * 	@return 	name in lower case and with underscores
 *	@see		toLowerPropertyName(String)
 *	@api
 */
String toLowerName(String name) : 
	JAVA org.genesez.util.naming.NameConverter.toLowerPropertyName(java.lang.String);

