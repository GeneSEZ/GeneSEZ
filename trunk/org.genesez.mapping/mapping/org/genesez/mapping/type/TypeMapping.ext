/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */


/**
 * Frontend for type mapping support of external and multi-valued types.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */


// -- Checks for External Types -----------------------------------------------------------------------------


/**
 * Returns true if a mapping for the specified type in the specified context exists, otherwise false.
 * 
 * @param mappingType	The type to map.
 * @param context		The context in which the type should be mapped.
 * @return	True if a type mapping exists, otherwise false.
 * 
 * @see org.genesez.mapping.type.ITypeMappingManager#hasTypeMapping(java.lang.String, java.lang.String)
*/
boolean hasExternalTypeMapping(String externalType, String contextName) :
	JAVA org.genesez.mapping.type.TypeMapping.hasExternalTypeMapping(java.lang.String, java.lang.String);


// -- Mapping of External Types -----------------------------------------------------------------------------


/**
 * Maps the name of an external type if a mapping entry exits,
 * otherwise the specified name of the external type will be returned.
 * 
 * @param	externalType	The name of the external type which shall be mapped.
 * @return 	The mapped or specified name of the external type.
 */
String mapExternalType(String externalType) :
	JAVA org.genesez.mapping.type.TypeMapping.mapExternalType(java.lang.String);


/**
 * Maps the name of an external type by means of the specified context if a mapping entry exists, 
 * otherwise the default mapped name will be returned. If no mapping exists the specified name of the external type will be returned.
 * 
 * @param	externalType	The name of the external type which shall be mapped.
 * @param	contextName		The name of the context in which the external type shall be mapped. 
 * @return 	The mapped or specified name of the external type.
 */
String mapExternalType(String externalType, String contextName) :
	JAVA org.genesez.mapping.type.TypeMapping.mapExternalType(java.lang.String, java.lang.String);	


// -- Mapping of Multi-valued Types -------------------------------------------------------------------------


/**
 * Returns the name of the multi-valued type by means of the specified modificators if a mapping entry exists,
 * otherwise an empty string will be returned.
 * 
 * @param	unique	Set to true, if the values in the multi-valued type are unique, otherwise false. 
 * @param	ordered	Set to true, if the values in the multi-valued type are ordered, otherwise false.
 * @return 	The mapped multi-valued type or an empty string.
 */
String mapMultiValuedType(Boolean unique, Boolean ordered) :
	JAVA org.genesez.mapping.type.TypeMapping.mapMultiValuedType(java.lang.Boolean, java.lang.Boolean);


/**
 * Returns the name of the multi-valued type by means of the specified modificators and context if a mapping entry exists,
 * otherwise the default mapped name will be returned. If no mapping exists an empty string will be returned.
 * 
 * @param	unique		Set to true, if the values in the multi-valued type are unique, otherwise false. 
 * @param	ordered		Set to true, if the values in the multi-valued type are ordered, otherwise false.
 * @param	contextName	The name of the context in which the multi-valued type shall be mapped.
 * @return 	The mapped or default name of the multi-valued type or an empty string.
 */
String mapMultiValuedType(Boolean unique, Boolean ordered, String contextName) :
	JAVA org.genesez.mapping.type.TypeMapping.mapMultiValuedType(java.lang.Boolean, java.lang.Boolean, java.lang.String);	
