<?xml version="1.0" ?>
<!--
	ant build file for automation of model transformation steps
	@author	dreamer
	
	includes:
	- starts oaw workflow to generate *.ecore file from emf uml2 model
	  [ uml2ecore ]
	- starts ecore code generation to generate the *.genmodel file and
	  the java metamodel implementation
	  [ ecore2java ]
-->

<project name="de.genesez.metamodel.user" basedir=".." default="generate.metamodel.implementation">
	
	<!--
		include oaw properties + build properties
	-->
	<property file="config/genesezMM.properties" />
	<property file="build/build.properties" />
	
	
	<!--
		exported ant buildfile from eclipse containing all referenced libraries
		provides classpathref 'de.genesez.metamodel.classpath'
	-->
	<import file="../build.xml" />
	
	
	<!-- oaw workflow task definition -->
	<taskdef name = "oaw.workflow"
		classname = "org.openarchitectureware.workflow.ant.WorkflowAntTask"
		classpathref = "de.genesez.metamodel.classpath" />
	
	
	<!--
		executes uml2ecore + ecore2java
		- starts the oaw workflow to generate the ecore model from the emf uml2 model
		- starts ecore code generation to generate the genmodel file and the metamodel implementation from the ecore model 
	-->
	<target name = "generate.metamodel.implementation"
		depends="uml2ecore, ecore2java"
		description="executes the oaw workflow to create the ecore model + then generates the metamodel implementation from it">
	</target>
	
	
	<!-- transform uml2 model to ecore -->
	<target name = "uml2ecore"
		description="transform emf uml2 model to ecore model" >
		
		<!-- workflow task is derived from the java ant task -->
		<oaw.workflow file = "${oaw.workflow.file}"
			classpathref="de.genesez.metamodel.classpath"
			fork = "true"
			dir = "${basedir}">
			
			<param name="baseDir" value="${basedir}/" />
		</oaw.workflow>
	</target>
	
	<!-- other method to start oaw workflow with java ant task -->
	<!--target name = "uml2ecore2">
		<java classname = "org.openarchitectureware.workflow.WorkflowRunner"
			classpathref="de.genesez.metamodel.classpath"
			fork = "true"
			dir = "${basedir}">
			
			<classpath>
				<path refid="de.genesez.metamodel.classpath" />
				<pathelement location="${basedir}" />
			</classpath>
			
			<arg value = "-pbaseDir=${basedir}/" />
			<arg value = "genesezMMRun.oaw" />
		</java>
	</target-->
	
	
	<!--
		start ecore code generation
		
		note: 
		when starting ant build file from eclipse, it runs as an 'external' tool,
		not having the 'contibuted liberies' in the classpath from the ant runtime view
		
		so another headless eclipse instance is started and runs the ant runner with the 
		specified build file and build target
	-->
	<target name="ecore2java"
		description="performs the ecore java codegen with an headless eclipse instance">
		
		<java classname="org.eclipse.core.launcher.Main" 
			fork="true">
			
			<classpath>
				<fileset dir="${ECLIPSE_HOME}" includes="startup.jar"/>
			</classpath>
			<arg value="-noupdate" />
			<arg value="-data" />
			<arg value="${workspace.location}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${build.file}" />
			<arg value="ecore2java.private" />
			<!--arg value="-verbose" /-->
		</java>
	</target>
	
	
	<!--
		generate *.genmodel + java code impl from *.ecore model
		note: genModel must be set in task and must be generated!
	-->
	<target name = "ecore2java.private">
		<emf.Ecore2Java model = "${ecoreMetaModelPath}${ecoreMetaModelFile}"
			genModel = "${genModelPath}/${genModelFile}"
			reconcileGenModel="overwrite"
			
			generateJavaCode="true"
			generateModelProject="false"
			generateEditProject="false"
			generateEditorProject="false"
			
			modelProject = "${basedir}"
			modelProjectFragmentPath = "${ecore2java.path}">
			
			<arg line = "-package ${ecore.package}" />
		</emf.Ecore2Java>
	</target>
	
</project>
