<?xml version="1.0" encoding="utf-8"?>
<!-- this file runs the uml2ecore Workflow from the oaw Model-to-Model -->

<workflow>

	<!-- Load the properties file for this workflow. -->
	<property file="genesezMM.properties" />


	<!-- First is to initialize the support for uml2 models. -->
    <bean class="oaw.uml2.Setup" standardUML2Setup="true"/> 

    
    <!-- Read the uml2 model file into the uml2model workflow slot. -->
	<component id="xmiReader" class="org.openarchitectureware.emf.XmiReader">
		<modelFile value="${uml2MetaModelPath}${uml2MetaModelFile}"/>
		<outputSlot value="uml2metamodel"/>
	</component>

	
	<!-- Check some constraints to keep	the model consistent. -->
	<component id="constraintChecker" class="org.openarchitectureware.check.CheckComponent">
		
		<!-- Workin with ecore models also requires the ecore meta model. -->
	    <metaModel id="metamodel.emf" class="oaw.type.emf.EmfMetaModel">
			<metaModelPackage value="org.eclipse.emf.ecore.EcorePackage"/>
		</metaModel>
		
		<!-- Workin with uml2 models also requires the UML2 meta model. -->
		<metaModel id="metamodel.uml2" class="oaw.uml2.UML2MetaModel"/>
		
		<!-- This is the file that contains the constraints. Note the use of
			 :: as the namespace delimiter. Also don't specify the .chk
			 extension of the uml2Constraints file. The namespaces correspond
			 to Java packages. -->
		<checkFile value="de::genesez::uml2ecore::uml2Constraints"/>
		
		<!-- Check the complete set of model elements under the generatorModel 
			 slot in the workflow. This will be the model object and all its
			 children, recusively.  -->
		<emfAllChildrenSlot value="uml2metamodel"/>
		
		<!-- Finally, if encounter errors here (i.e. failed constraints)
			 we stop the workflow here. We won't invoke the transformation if
			 the model is faulty. -->
		<abortOnError value="true"/>
	</component>
	
	
	<!-- This one runs the transformation from UML2 to Ecore. -->
	<component id="uml2ecore" class="oaw.xtend.XtendComponent">

		<!-- Workin with ecore models also requires the ecore meta model. -->
		<metaModel idRef="metamodel.emf"/>
		
		<!-- Workin with uml2 models also requires the UML2 meta model. -->
	    <metaModel idRef="metamodel.uml2"/>
	   
	   	<!-- This statement makes the value "${nsUriPrefix"} passed in
	         by the external workflow file available as a global variable
	         that is accessed by the nsUri() function in uml2ecore.ext -->
	   	<globalVarDef name="nsUriPrefix" value="'${nsUriPrefix}'"/>
	   
	   	<!-- Also make the addNameAttribute property globally available. -->
	   	<globalVarDef name="addNameAttribute" value="${addNameAttribute}"/>
	   
	   	<!-- Run the model to model transformation itself. There's an 
			 extension file called uml2ecore.ext in the respective location
		 	 in the classpath that contains a function called transform that
		 	 takes an object of type UML2::Model as its parameter. Note that 
		 	 we can use the slot name ecoremodel as a variable in this expression. -->
	   	<invoke value="de::genesez::uml2ecore::uml2ecore::transform(uml2metamodel)"/>
	        
	   	<!-- Finally, the return value of the transformation is put into the 
			 ecoreModel slot in the workflow. -->
	   <outputSlot value="ecoreModel"/>
	</component>
	
	
	<!-- Write the ecore model into the ecore file. -->
	<component id="xmiWriter" class="org.openarchitectureware.emf.XmiWriter">
		<inputSlot value="ecoreModel"/>
		<modelFile value="${ecoreMetaModelPath}${ecoreMetaModelFile}"/>
	</component>
    
    
	<component id="codeGenerator" class="oaw.xpand2.Generator" skipOnErrors="true">
		
		<!-- Template files are written in the utf-8 charset. -->
		<fileEncoding value="utf-8" />
		
		<!-- Workin with ecore models also requires the ecore meta model. -->
		<metaModel idRef="metamodel.emf"/>
		
		<!-- Workin with uml2 models also requires the UML2 meta model. -->
	    <metaModel idRef="metamodel.uml2"/>
		
		<expand value="de::genesez::genesezmm2genesezmm::genesezmm2genesezmm::Root FOR uml2metamodel" />
		<genPath value="${genDir}" />
		
	</component>
    
</workflow>