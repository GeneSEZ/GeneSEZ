«IMPORT gcore»

«REM»
	import statements for jpa platform
	
	@author		andre pflueger
	@date		2010-10-11
«ENDREM»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION org::genesez::platform::common::log::Log»

«EXTENSION org::genesez::platform::common::AccessHelper»
«EXTENSION org::genesez::platform::common::Conversion»
«EXTENSION org::genesez::platform::common::typemapping::TypeMapping»
«EXTENSION org::genesez::platform::common::m2t::Helper»

«EXTENSION org::genesez::platform::java::scripts::Type»
«EXTENSION org::genesez::platform::java::scripts::Naming»
«EXTENSION org::genesez::platform::java::scripts::Conversion»
«EXTENSION org::genesez::platform::java::jpa::scripts::Naming»
«EXTENSION org::genesez::platform::java::jpa::scripts::Class»

«REM» 
	generates import proReg and statements for hibernate classes
	is used by aspects to extend´import generation of java5 cartridge
«ENDREM»
«DEFINE ImportStatements FOR MClassifier-»
	«IF hasStereotype("jpaPersistentEntity")-»
		import javax.persistence.Entity;
		«IF isClass() && checkAnnotationTableUsage((MClass) this) -»
			import javax.persistence.Table;
		«ENDIF-»
		«IF !generalization.typeSelect(MClassifier).exists(e | e.hasStereotype("jpaPersistentEntity")) -»
			import java.io.Serializable;
		«ENDIF-»
	«ENDIF-»
	«IF property.exists(e|e.hasStereotype("jpaOptimisticLocking")) || operation.exists(e|e.hasStereotype("jpaOptimisticLocking"))-»
		import javax.persistence.Version;
	«ENDIF-»
	«IF hasStereotype("jpaInheritance")-»
		import javax.persistence.Inheritance;
		import javax.persistence.InheritanceType;
	«ENDIF»
	«IF property.exists(e|e.hasStereotype("jpaPersistenceUnit")) || operation.exists(e|e.hasStereotype("jpaPersistenceUnit"))-»		 
		import javax.persistence.PersistenceUnit;
	«ENDIF-»
	«IF property.exists(e|e.hasStereotype("jpaPersistenceContext")) || operation.exists(e|e.hasStereotype("jpaPersistenceContext"))-»	
		import javax.persistence.PersistenceContext;
	«ENDIF-»
	«IF operation.exists(e|e.hasTaggedValue("jpaAssociation", "type", "OneToOne")) || property.exists(e|e.hasTaggedValue("jpaAssociation", "type", "OneToOne"))-»
		import javax.persistence.OneToOne;
	«ENDIF-»
	«IF operation.exists(e|e.hasTaggedValue("jpaAssociation", "type", "ManyToOne")) || property.exists(e|e.hasTaggedValue("jpaAssociation", "type", "ManyToOne"))-»
		import javax.persistence.ManyToOne;
	«ENDIF-»
	«IF operation.exists(e|e.hasTaggedValue("jpaAssociation", "type", "OneToMany")) || property.exists(e|e.hasTaggedValue("jpaAssociation", "type", "OneToMany"))-»
		import javax.persistence.OneToMany;
	«ENDIF-»
	«IF operation.exists(e|e.hasTaggedValue("jpaAssociation", "type", "ManyToMany")) || property.exists(e|e.hasTaggedValue("jpaAssociation", "type", "ManyToMany"))-»
		import javax.persistence.ManyToMany;
	«ENDIF-»
	«IF operation.exists(e|e.hasUtilizableValue("jpaAssociation", "cascade")) || property.exists(e|e.hasUtilizableValue("jpaAssociation", "cascade"))-»
		import javax.persistence.CascadeType;
	«ENDIF-»
	«IF operation.exists(e|e.hasStereotype("jpaColumn")) || property.exists(e|e.hasStereotype("jpaColumn"))-»
		import javax.persistence.Column;
	«ENDIF-»
	«IF operation.exists(e|e.hasStereotype("jpaPrimaryKey")) || property.exists(e|e.hasStereotype("jpaPrimaryKey"))-»
		import javax.persistence.Id;
		import javax.persistence.GeneratedValue;
		import javax.persistence.GenerationType;
	«ENDIF»
	«IF hasTaggedValue("jpaPrimaryKey", "embeddedId", "true")-»
		import javax.persistence.EmbeddedId;
	«ENDIF-»
	«IF hasStereotype("jpaPrimaryKeyClass")-»
		import javax.persistence.IdClass;
	«ENDIF-»
	«REM» realize as JPA specific type mapping file ?!? «ENDREM»
	«IF property.exists(e|e.type.mapName().asTypeName() == "EntityManager")-»
		import javax.persistence.EntityManager;
	«ENDIF-»
	«IF property.exists(e|e.type.mapName().asTypeName() == "EntityManagerFactory")-»
		import javax.persistence.EntityManagerFactory;
	«ENDIF-»	
«ENDDEFINE»