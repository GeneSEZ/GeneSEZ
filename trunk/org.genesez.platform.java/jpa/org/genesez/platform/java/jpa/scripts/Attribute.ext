import gcore;

extension org::genesez::util::logging::Logging;
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::platform::java::jpa::scripts::Stereotypes;

/**
 *	checks whether an attribute has a reserved name which
 *	can creates conflicts with some databases and adds
 *	the stereotype "jpaColumn" with a name prefix to
 *	get another column name for this attribute
 *	
 *	values of an existing "jpaColum" stereotype will be 
 *	considered 
 *
 *	toDo:	make name prefix customizable 
 */
Void checkAttributeName(MAttribute this) :
	this.classifier.emHasStereotypeAssignment("jpaPersistentEntity")
		? (
			switch(name.asTypeName()) {
				case "index" : checkColumnStereotype()
				case "position" : checkColumnStereotype()
				case "end" : checkColumnStereotype()
				default : ""
			}
		)
		: "";

/**
  *	look for primary key in superclass
  *	if the names are equal there must be an column annotation with insertable = false
  *	and updatable = false
  *	otherwise there will be a mapping error because hibernate tries to map the
  *	primary key of the superclass and of the subclass in the same column
  *	Per derfault there is no need for an primary key in the derived class
  *	
  *	@param		this		instance of MElement
  */
Void checkPrimaryKey(MElement this) :
	let classifier = (
		switch (metaType) {
			case MOperation : ((MOperation)this).classifier
			case MAttribute : ((MAttribute)this).classifier
			case MAssociationRole : ((MAssociationRole)this).classifier
			default : null
		}
	) :
	classifier != null && 
	classifier.generalization.typeSelect(MClassifier).property.exists(e|e.name == name && e.emHasStereotypeAssignment("jpaPrimaryKey")) 
		? (
			!emHasStereotypeAssignment("jpaColumn")
				? addColumnForPrimaryKeyInheritance( classifier )
				: (
					stereotype.selectFirst(e|e == "jpaColumn").taggedValue.selectFirst(e|e == "insertable").setValue("false") ->
					stereotype.selectFirst(e|e == "jpaColumn").taggedValue.selectFirst(e|e == "updatable").setValue("false")
				)
		)
		: "";

/**
 *	check if there is a stereotype with a critical column name
  *
  *	@param		this		instance of MAttribute
 */
private Void checkColumnStereotype(MAttribute this) :
	this.emHasUtilizableTaggedValue("jpaColumn", "value") && 
	(this.emGetTaggedValue("jpaColumn", "value") == name.asTypeName())
		?  (
			//replace the critical column name
			this.setTaggedValue("jpaColumn", "value", this.classifier.name.toLowerCase()+"_"+name)
		)
		: (
			//create a new stereotype with default values
			this.addColumnStereotype("true", "true", this.classifier.name.toLowerCase()+"_"+name, "0", "0", "255", "null", "null", "true", "false")
		);

/**
  *	adds the stereotype "jpaPersistenceContext" if attributes data type
  *	is "EntityManager" or "Session" and adds stereotype "jpaPersistenceUnit" 
  *	if attributes data type is "EntityManagerFactory" or "SessionFactory" and
  *	the attribute has no such stereotype
  *
  *	@param		this		instance of MAttribute
  */
Void checkPersistenceStereotypes(MAttribute this) :
	( !this.classifier.emHasTaggedValue("ejb3SessionBean","entityManager", "None") && 
	  (this.type.asTypeName().matches("EntityManager") || this.type.asTypeName().matches("Session")) &&
	  !this.classifier.property.exists(e|e.emHasStereotypeAssignment("jpaPersistenceContext")))
		? this.addPersistenceContextStereotype("[]", "[]", "[]") 
		: "" ->
	(this.type.asTypeName().matches("EntityManagerFactory") || this.type.asTypeName().matches("SessionFactory")) &&
	 !this.classifier.property.exists(e|e.emHasStereotypeAssignment("jpaPersistenceUnit"))
		? this.addPersistenceUnitStereotype("[]", "[]")
		: "";

/**
  *	adds the stereotype "jpaOptimisticLocking" if attributes name is "version", the 
  *	data type is "int" and there is no such steretype
  *
  *	@param		this		instance of MAttribute
  */		
Void checkOptimisticLockingStereotype(MAttribute this) :
	 this.classifier.emHasStereotypeAssignment("jpaPersistentEntity") &&
	 ((this.name.asTypeName() == "version" && this.type.asTypeName() == "int") ||
	 this.classifier.property.exists(e|e.emHasTaggedValue("jpaPersistentEntity", "optimisticLocking", "true")))
	 	? addOptimisticLockingStereotype()
	 	: "";