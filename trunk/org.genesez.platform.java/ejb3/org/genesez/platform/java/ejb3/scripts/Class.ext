import gcore;

extension org::genesez::platform::common::log::Log;
extension org::genesez::platform::common::AccessHelper;
extension org::genesez::platform::java::scripts::Naming;
extension org::genesez::platform::java::java5::scripts::Class;
extension org::genesez::platform::java::ejb3::scripts::Stereotypes;
extension org::genesez::platform::common::m2m::MakeElement;
extension org::genesez::platform::common::m2m::RemoveElement;
extension org::genesez::platform::common::m2m::CreateBasics;
extension org::genesez::platform::common::m2m::CreateTemplate;
/* remove this import to be independent from jpa cartridge */
extension org::genesez::platform::java::jpa::scripts::Stereotypes;

/**
 *	transform Jacobson stereotype "control" to a stateless session bean 
 *	with local business interface
 *	transform Jacobson stereotype "boundary" to a stateless session bean 
 *	with remote business interface
 */
Void transformJacobsonStereotypes(MClass this) :
	this.hasStereotype("control")
		? (
			this.addSessionBeanStereotype(this.name, "", "", false, "EntityManager", "None") ->
			this.addLocalStereotype("")
		)
		: "" ->
	this.hasStereotype("boundary")
		? (
			this.addSessionBeanStereotype(this.name, "", "", false, "EntityManager", "None") ->
			this.addRemoteStereotype("")
		)
		: "" ;

/**
 *	transform WAM stereotype "tool" to a stateless session bean with local business interface
 *	transform WAM stereotype "automaton" to a stateless session bean with local business interface
 *	and an timer operation
 */
Void transformWAMStereotypes(MClass this) :
	this.hasStereotype("tool")
		? (
			this.addSessionBeanStereotype(this.name, "", "", false, "EntityManager", "None") ->
			this.addLocalStereotype("")
		)
		: "" ->
	this.hasStereotype("automaton")
		? (
			this.addSessionBeanStereotype(this.name, "", "", false, "EntityManager", "None") ->
			this.addLocalStereotype("") ->
			this.makeAttribute("timerService", "TimerService", "public") ->
			(
				let op = this.makeOperation("executeTask", "public", false, false, false) :				
					op.parameter.add(op.makeParameter("timer", "", "in", this.model().createExternal("Timer")))
			)
		)
		: "" ;

/**
 *	adds the stereotype "ejb3Remote" to a session bean
 *	if the stereotype "jwsWebService" exists and 
 *	there is neither stereotype "ejb3Local" nor "ejb3Remote"
 *	available
 *
 *	this		instance of MClassifier	
 */
Void addRemoteBusinessInterface(MClassifier this) :
	hasStereotype("ejb3SessionBean") &&
	hasStereotype("jwsWebService") &&
	realization.isEmpty && 
	!(hasStereotype("ejb3Local") || hasStereotype("ejb3Remote"))
		? addRemoteStereotype("")
		: "";

/**
 *	adds the stereotype "ejb3Local" to a session bean
 *	if no business interface is implemented and 
 *	there is neither stereotype "ejb3Local" nor "ejb3Remote"
 *	available
 *
 *	this		instance of MClassifier	
 */
addLocalBusinessInterface(MClassifier this) :
	hasStereotype("ejb3SessionBean") &&
	realization.isEmpty && 
	!(hasStereotype("ejb3Local") || hasStereotype("ejb3Remote"))
		? addLocalStereotype("")
		: "";

/**
  * adds no argument constructor to a session or message 
  *	driven bean if there is not already one
  */	
MClassifier addStandardConstructor(MClass this) :
	(this.hasStereotype("ejb3SessionBean") || this.hasStereotype("ejb3MessageDrivenBean")) &&
	!(operation.exists(e|e.name == name && e.parameter.isEmpty))
		? makeStandardConstructor()
		: "";
	
/**
  *	evaluates "ejb3SessionBean" stereotype and adds entityManager attribute
  *	for jpa uasage in the session bean.
  *
  *	this operation binds the ejb3 cartridge to jpa cartridge because the attributes
  *	have to be annotated. It is preferred to have DRY code instead of no coupling and 
  *	it is preferred because in most cases ejb3 and jpa are used together
  *
  **/
Void checkUseOfEntityManager(MClass this) :
	!hasTaggedValue("ejb3SessionBean", "entityManager", "None")
		? (	hasTaggedValue("ejb3SessionBean", "entityManager", "EntityManager")
			? (	addEntityManager("EntityManager") ->
				addStereotypesForEntityManager("entityManager", "[]")
			)
			:(
			hasTaggedValue("ejb3SessionBean", "entityManager", "EntityManager_Extended")
				? (	addEntityManager("EntityManager_Extended") ->
					this.hasTaggedValue("ejb3SessionBean", "stateful", "true")
						? addStereotypesForEntityManager("entityManager", "[EXTENDED]")
						: (
							addStereotypesForEntityManager("entityManager", "[]") ->
							error("Use of an EntityManager with extended persistence context in a stateless SessionBean "+this.name+". Context was switched from extended to normal.")
						)

				)
				:(
				hasTaggedValue("ejb3SessionBean", "entityManager", "Session")
					? (	addEntityManager("Session") ->
						addStereotypesForEntityManager("session", "[]")
					)
					: (
					hasTaggedValue("ejb3SessionBean", "entityManager", "Session_Extended")
						? (	addEntityManager("Session_Extended") ->
							this.hasTaggedValue("ejb3SessionBean", "stateful", "true")
								? addStereotypesForEntityManager("session", "[EXTENDED]")
								: (
									addStereotypesForEntityManager("session", "[]") ->
									error("Use of an SessionManager with extended persistence context in the stateless SessionBean "+this.name+". Context was switched from extended to normal.")
								)
							
						)
						: ""
					)
				)
			)
		)
		: "";
	
/**
  *	adds "ejb3PersistenceContext" and "accessor" to the attribute with the given name
  *
  *	@param	attributeName	attribute name of the entity manager
  *	@param	fetchTypes		fetch types for the persistenceContext stereotype
  */
Void addStereotypesForEntityManager(MClass this, String attributeName, String fetchTypes) :
	let e = this.property.typeSelect(MAttribute).selectFirst(e|e.name == attributeName) :
		e != null
			? (	addPersistenceContextStereotype(e, fetchTypes, "[]", "[]") ->
				e.createAccessorForEntityManager()
			)
			: "";
	
Void createAccessorForEntityManager(MProperty this) :
	!this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "None")
		? (	this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "Both")
			? createAccessor(this, "true", "true")
			: (	this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "Getter")
				? createAccessor(this, "true", "false")
				: (	this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "Setter")
					? createAccessor(this, "false", "true")
					: ""
				) 
			) 
		)
		: createAccessor(this, "false", "false") ->
	"";

/**
  *	adds an attribute with name "entityManager" or "session" if an attribute
  *	with the datatype "EntityManager" or "Session" not already exists
  */
Void addEntityManager(MClass this, String type) :
	!existEntityManager() 
		? (type.matches("EntityManager")
			? makeAttribute("entityManager", "EntityManager", "private")
			: (type.matches("EntityManager_Extended")
				? makeAttribute("entityManager", "EntityManager", "private")
				: (type.matches("Session")
					? makeAttribute("session", "Session", "private")
					: (type.matches("Session_Extended")
						? makeAttribute("session", "Session", "private")
						: ""
					)	
				)
			)
		)
		: "" ->
	"";

/**
  *
  */
Void checkMessageDrivenBeanConfig(MClass this) :
	this.hasStereotype("ejb3MessageDrivenBean") && 
	this.hasUtilizableValue("ejb3MessageDrivenBean", "mappedName") &&
	!this.hasStereotype("ejb3ActivationConfigProperty")
		? (
			let queueName = this.getTaggedValue("ejb3MessageDrivenBean", "mappedName").split("/").get(1) :
				let names = {} :
					names.add("destination") ->
					names.add("destinationType") ->
					(
						let values = {} :
							values.add("queue/" + queueName) ->
							values.add("javax.jms.Queue") ->
							addActivationConfigPropertyStereotype(names, values)
					)
		)
		: "";

/**
  *	checks if class contains an attribute with the type "EntityManager" or "Session"
  */
boolean existEntityManager(MClass this) : 
	this.property.exists(e|e.type.name().matches("EntityManager")) || this.property.exists(e|e.type.name().matches("Session"))
		? true
		: false;		