import gcore;

extension org::genesez::util::logging::Logging;
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::platform::common::m2m::MakeElement;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::platform::java::util::JavaTypes;
extension org::genesez::platform::java::jws::scripts::Stereotypes;

/**
 *	checks if WebServiceClient stereotype is available and adds
 *	MExternal "javax.xml.ws.Service" if this class has no other 
 * 	generalization
 *
 *	@param	this		instance of MClass
 */
Void checkWebServiceClientSuperClass(MClass this) :
	emHasStereotypeAssignment("jwsWebServiceClient") 
	&& generalization.isEmpty
		? generalization.add( this.navModel().typeService() ) 
		: "";

/**
  *	adds copy of stereotype jwsWebService to the associated remote business interface
  *	add copies of stereoytypes jwsSOAPBinding and jwsHandlerChain to the associated
  * remote buesiness interface if these stereotypes are available 
  *
  *	@param 	this		instance of MClass
  *
  */
Void checkWebServiceInterface(MClass this) :
	emHasStereotypeAssignment("jwsWebService")
		? (
			let i = realization.typeSelect(MInterface).selectFirst(e|e.emHasStereotypeAssignment("ejb3Remote")) :
			 	i.addWebServiceStereotype(this) ->
			 	emHasStereotypeAssignment("jwsSOAPBinding") 
			 		? i.addSOAPBindingStereotype(this)
			 		: "" ->
			 	emHasStereotypeAssignment("jwsHandlerChain")
			 		? i.addHandlerChainStereotype(this)
			 		: ""
		)
		: "";
		
/** 
  *	checks the tagged value name of stereotype jwsWebService and assigns
  *	the class name if there is no value available
  *
  *	@param	this	instance of MClass
  */
Void checkWebServiceName(MClass this) :
	!emHasUtilizableTaggedValue("jwsWebService", "name")
		? setTaggedValue("jwsWebService", "name", this.asTypeName())
		: "";
		
/** 
  *	checks the tagged value name of stereotype jwsWebServiceClient and assigns
  *	the class name if there is no value available
  *
  *	@param	this	instance of MClass
  */
Void checkWebServiceClientName(MClass this) :
	!emHasUtilizableTaggedValue("jwsWebServiceClient", "name")
		? setTaggedValue("jwsWebServiceClient", "name", this.asTypeName())
		: "";
		
/**
  *	adds interface SOAPHandler and corresponding operations with
  *	stereotype "jwsSOAPHandler"
  *
  *	@param	this	instance of MClass
  */
Void checkSOAPHandler(MClass this) :
	emHasStereotypeAssignment("jwsSOAPHandler")
		? (
			!realization.exists(e|e.name().contains("SOAPHandler"))
				? realization.add(this.navModel().typeSOAPHandlerSOAPMessageContext() )
				: "" ->
			!operation.exists(e|e.name.matches("handleMessage"))
				? (
					let o = makeOperation("handleMessage", "public") :
						o.parameter.add(o.makeParameter("context", "in", this.navModel().typeSOAPMessageContext() ) ) ->
						o.setReturn(o.makeReturnParameter(createPrimitiveTypeBoolean(this.navModel())))
				)
				: "" ->
			!operation.exists(e|e.name.matches("handleFault"))
				? (
					let o = makeOperation("handleFault", "public") :
						o.parameter.add(o.makeParameter("context", "in", this.navModel().typeSOAPMessageContext() ) ) ->
						o.setReturn(o.makeReturnParameter(createPrimitiveTypeBoolean(this.navModel())))
				)
				: "" ->
			!operation.exists(e|e.name.matches("getHeaders"))
				? (
					let o = makeOperation("getHeaders", "public") :
						o.setReturn(o.makeReturnParameter(1, -1, true, false, this.navModel().typeQName() ))
				)
				: "" ->
			!operation.exists(e|e.name.matches("close"))
				? (
					let o = makeOperation("close", "public")  :
						o.parameter.add(o.makeParameter("context", "in", this.navModel().typeMessageContext() ))
				)
				: ""
		)
		: "";