«REM»
    template for cdi entity home class
    
    @author     nancy doerfel
    6@date      2010-10-03
    @version    1.0
«ENDREM»

«REM» import code gen meta model «ENDREM»
«IMPORT gcore»

«REM» useful support fuctions «ENDREM»
«EXTENSION org::genesez::util::logging::Logging»
«EXTENSION org::genesez::platform::common::AccessHelper»
«EXTENSION org::genesez::platform::common::m2t::Helper»
«EXTENSION org::genesez::platform::common::typemapping::TypeMapping»

«EXTENSION org::genesez::platform::java::scripts::Type»
«EXTENSION org::genesez::platform::java::scripts::Naming»
«EXTENSION org::genesez::platform::java::scripts::Conversion»

«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»


«DEFINE MakeEntityHome FOR MClass»
    «IF this.hasStereotype("cdiExtEntityHome")»
	    «IF this.package().allClassifiers().select(e|e.hasStereotype("cdiExtEntityHome")).size > 0»
	        «EXPAND _CreateEntityHomeInterface-»
	        «EXPAND _CreateEntityHomeBaseClass-»
	        «EXPAND _CreateConversationAdminClass-»
	    «ENDIF»
    «ENDIF»
«ENDDEFINE»


«REM»
    The HomeBean interface
«ENDREM»
«DEFINE _CreateEntityHomeInterface FOR MClass»
        «FILE filePath( "IHomeBean.java", basePath() )-»
        
        package «packageDeclaration( basePackage() ) -»;
        
        «PROTECT CSTART "/* " CEND " */" ID ( packageDeclaration(basePackage()) + "." + xmiGuid + ".IHomeBean_Imports" )»
		import java.io.Serializable;
		import java.util.List;
		import javax.persistence.EntityManager;
		import Bank_Tutorial_Weld_Server.bankgroupServer.EntityBase;
        «ENDPROTECT»

        «REM» generate a newline between imports + type comment «ENDREM»
        
		public interface IHomeBean<T extends IEntityBase, E extends EntityManager> extends Serializable {
		
		    /**
		     * Returns the instance of the bean. If no instance exists, but an id is set,
		     * the instance will be read from the database. If no id is set, a new instance will be created.
		     * 
		     * @return An instance of the bean.
		     */
		    public T getInstance();
		    
		    /**
		     * Returns the primary key of the enity. 
		     * 
		     * @return The id of the entity.
		     */
		    public long getId();
		    
		    /**
		     * Sets the id (primaray key of the entity)
		     *  
		     * @param id
		     */
		    public void setId(long id);
		    
		    /**
		     * Loads an instance of the bean from the database with its id.
		     * 
		     * @return The bean instance.
		     */
		    public T loadInstance();
		    
		    /**
		     * Creates a new instance.
		     * 
		     * @return The new bean instance.
		     */
		    public T createInstance();
		    
		    /**
		     * Returnd true if the bean has been persisted (if it is managed by the entity manager).
		     * 
		     * @return true if managed by the entity manager, else false.
		     */
		    public boolean isManaged();
		    
		    /**
		     * Saves a bean in the database.
		     * 
		     * @return String "saved"
		     */
		    public String save();
		    
		    /**
		     * Deletes an object from the database.
		     * 
		     * @return String "deleted"
		     */
		    public String delete();
		    
		    /**
		     * Stopps the conversation.
		     * 
		     * @return String "cancelled"
		     */
		    public String cancel();
		    
		    /**
		     * Starts the conversation
		     */
		    public void initConversation();
		    
		    /**
		     * Ends the conversation
		     */
		    public void endConversation();
		    
		    /**
		     * @return the conversation id
		     */
		    public String getConversationId();  
		    /**
		     * Returns all objects of the type T.
		     * @return list of all objects
		     */
		    public List<T> getList();

            «PROTECT CSTART "/* " CEND " */" ID ( packageDeclaration(basePackage()) + "." + xmiGuid + ".IHomeBean_OwnCodeImpl" )»
            /* TODO: put your own source code here */
            «ENDPROTECT»     
                        
        }                          
            
        «ENDFILE»
«ENDDEFINE»


«REM»
    The HomeBean class as abstract base class for all entity Home classes.
«ENDREM»
«DEFINE _CreateEntityHomeBaseClass FOR MClass»
        «FILE filePath( "HomeBean.java", basePath() )-»
        
        package «packageDeclaration( basePackage() ) -»;
        
		«PROTECT CSTART "/* " CEND " */" ID ( packageDeclaration(basePackage()) + "." + xmiGuid + ".HomeBean_Imports" )»
		import java.io.Serializable;
		import java.lang.reflect.ParameterizedType;
		import java.util.List;
		
		import javax.enterprise.context.Conversation;
		import javax.inject.Inject;
		import javax.persistence.EntityManager;
		«ENDPROTECT»

        «REM» generate a newline between imports + type comment «ENDREM»
        
        public abstract class HomeBean<T extends IEntityBase, E extends EntityManager> implements IHomeBean<T, E> 
        {
            /**
             * The default serialVersionUID.
             */
            private static final long serialVersionUID = 1L;
        
            /**
             * The Conversation Object.
             */
            @Inject
            private Conversation conversation;
    
            /**
             * The conversation administration object of the session.
             */
			@Inject
			private ConversationAdmin conversationAdmin;        

            /**
             * The primary key of the beans.
             */
            private long id;
        
            /**
             * The instance of the entity bean.
             */
            private T instance;

            /**
             * Returns the entity manager.
             */
            abstract E getEntityManager();
                    
            /**
             * Returns the instance of the bean. If no instance exists, but an id is set,
             * the instance will be read from the database. If no id is set, a new instance will be created.
             * 
             * @return An instance of the bean.
             */
            public T getInstance() {
                if (instance == null) {
                    if (id > 0) {
                        instance = loadInstance();
                    } else {
                        instance = createInstance();
                    }
                }
                return instance;
            }
        
            /**
             * Returns the primary key of the enity. 
             * 
             * @return The id of the entity.
             */
            public long getId() {
                return id;
            }
            
            /**
             * Sets the id (primaray key of the entity)
             *  
             * @param id
             */
            public void setId(long id) {
                this.id = id;
            }
        
            /**
             * Loads an instance of the bean from the database with its id.
             * 
             * @return The bean instance.
             */
            public T loadInstance() {
                return getEntityManager().find(getClassType(), new Long(getId()));
            }
        
            /**
             * Creates a new instance.
             * 
             * @return The new bean instance.
             */
            public T createInstance() {
                try {
                    return getClassType().newInstance();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }
        
            /**
             * Returns the class type of the bean.
             * 
             * @return The class type.
             */
            @SuppressWarnings("unchecked")
            private Class<T> getClassType() {
                ParameterizedType parameterizedType = (ParameterizedType) getClass()
                        .getGenericSuperclass();
                return (Class<T>) parameterizedType.getActualTypeArguments()[0];
            }
            
            /**
             * Returnd true if the bean has been persisted (if it is managed by the entity manager).
             * 
             * @return true if managed by the entity manager, else false.
             */
            public boolean isManaged() {
                  return (this.id > 0 && this.id > 0);
            }
        
            /**
             * Saves a bean in the database.
             * 
             * @return String "saved"
             */
            public String save() {
                if (isManaged()) {
		            getEntityManager().merge(getInstance());
		        } else {
		            getEntityManager().persist(getInstance());
		        }       
                endConversation();
                return "saved";
            }
        
            /**
             * Deletes an object from the database.
             * 
             * @return String "deleted"
             */
            public String delete() {
                getEntityManager().merge(getInstance());
                getEntityManager().remove(getInstance());
                endConversation();
                return "deleted";
            }   
            
            /**
             * Stopps the conversation.
             * 
             * @return String "cancelled"
             */
            public String cancel() {
                endConversation();
                return "cancelled";
            }
        
            /**
             * Starts the conversation
             */
            public void initConversation() {
                if (conversation.isTransient()) {
                    conversation.begin();
                    conversationAdmin.getConversationList().add(getConversationId());
                }
            }
        
            /**
             * Ends the conversation
             */
            public void endConversation() {
                if (!conversation.isTransient()) {
                    conversationAdmin.removeConversation(getConversationId());
                    conversation.end();
                }
            }        
        
            /**
             * @return the conversation id
             */
            public String getConversationId() {
                return conversation.getId();
            }
            
		    /**
		     * Returns all objects of the type T.
		     * @return list of all objects
		     */
		    @SuppressWarnings("unchecked")
		    public List<T> getList() {
		        getEntityManager().flush();
		        return getEntityManager().createQuery("select OBJECT(o) from " 
		                + getClassType().getSimpleName() 
		                + " o").getResultList();        
		    }                            
		    
	        «PROTECT CSTART "/* " CEND " */" ID ( packageDeclaration(basePackage()) + "." + xmiGuid + ".HomeBean_OwnCodeImpl" )»
	        /* TODO: put your own source code here */
	        «ENDPROTECT»     
	        		    
        }
        
        «ENDFILE»
«ENDDEFINE»

«REM»
    A administration class for all conversations of the generated *Home entitys.
«ENDREM»
«DEFINE _CreateConversationAdminClass FOR MClass»
        «FILE filePath( "ConversationAdmin.java", basePath() )-»
        
        package «packageDeclaration( basePackage() ) -»;
        
        «PROTECT CSTART "/* " CEND " */" ID ( packageDeclaration(basePackage()) + "." + xmiGuid + ".ConversationAdmin_Imports" )»
		import java.io.Serializable;
		import javax.enterprise.context.SessionScoped;
		import javax.enterprise.inject.Produces;
		import javax.inject.Named;
        «ENDPROTECT»

        «REM» generate a newline between imports + type comment «ENDREM»
        
		@Named
		@SessionScoped
		public class ConversationAdmin implements Serializable {
		    
		    private java.util.List<String> conversationList = new java.util.ArrayList<String>();
		    
		    /**
		     * returns if a conversation is currently running
		     * @return  
		     */
		    @Named("isConversationRunning")
		    @Produces
		    public boolean isConversationRunning() {
		        return (getConversationList().size() > 0);
		    }
		    
		    /**
		     * removes a conversation from the list
		     * @param   id  
		     */
		    public void removeConversation(String id) {
		        if (conversationList != null) {
		            conversationList.remove(id);
		        }
		        
		    }
		    
		    /**
		     * returns the last conversation id
		     * @return  
		     */
		    @Named("currentConversationId")
		    @Produces
		    public String getLastConversationId() {
		        String id = "";
		        if(conversationList != null && conversationList.size() > 0)
		            id = conversationList.get(conversationList.size() - 1);
		        return id;
		    }
		    
		    /**
		     * getter for the attribute '<em><b>conversationList</b></em>'
		     */
		    public java.util.List<String> getConversationList() {
		        return conversationList;
		    }

            «PROTECT CSTART "/* " CEND " */" ID ( packageDeclaration(basePackage()) + "." + xmiGuid + ".ConversationAdmin_OwnCodeImpl" )»
            /* TODO: put your own source code here */
            «ENDPROTECT»     
        }
        
        «ENDFILE»
«ENDDEFINE»

