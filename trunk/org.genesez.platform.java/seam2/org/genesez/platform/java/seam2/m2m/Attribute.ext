/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 * 
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

extension org::genesez::util::logging::Logging;
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::profile::AccessorStereotype;
extension org::genesez::metamodel::core::util::profile::GenesezStandardProfile;
extension org::genesez::metamodel::core::util::RemoveElement;
extension org::genesez::platform::java::seam2::m2m::Stereotypes;
extension org::genesez::platform::java::jbv::m2m::Stereotypes;
extension org::genesez::platform::java::seam2::m2m::Class;
extension org::genesez::platform::java::seam2::m2m::Naming;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::platform::java::util::ExtensionMechanism;

/**
  *	if there is a stereotype seam2JasyptEncryption add stereotype
  *	jhvType to the attribute and remove stereotype seam2JasyptEncryption
  * (it is no longer needed, adding jhvTypeDef stereotype to class should 
  * be done before calling this method)
  *
  *	@api
  */
Void checkJasyptEncryptionStereotype(MAttribute this) :
	this.emHasStereotypeAssignment("seam2JasyptEncryption") &&
	!this.emHasStereotypeAssignment("jhvType")
		? (
			this.addTypeStereotype("encryptedString", {}, {}) ->
			this.emRemoveStereotypeAssignment(this.emGetStereotypeAssignment("seam2JasyptEncryption"))
		)
		: "";

/**
 *	checks if an attribute has the stereotype "ejb3EJB" and "seam2Injection"
 *	these stereotypes can create a conflict and "ejb3EJB" will be removed
  *
  *	@api
 */
Void checkAttributesWithInjectionStereotype(MAttribute this) :
	this.emHasStereotypeAssignment("seam2Injection") &&
	this.emHasStereotypeAssignment("ejb3EJB")
		? this.stereotype.remove(this.stereotype.selectFirst(e|e.name == "ejb3EJB"))
		: "";

/**
  *	if the attribute has the stereotype "seam2Logger", "seam2Injection", "seam2Outjection"
  *	"seam2DataModel", "seam2Selection" or "seam2SelectionIndex" there is no need for getter/setter
  *	user defined accessor stereotypes have higher priority
  *
  *	@api
  */
Void checkAccessStereotypeOfSeamStereotypedAttributes(MAttribute this) : 
	this.emHasStereotypeAssignment("seam2Logger") ||
	this.emHasStereotypeAssignment("seam2Injection") ||
	this.emHasStereotypeAssignment("seam2Outjection") ||
	this.emHasStereotypeAssignment("seam2DataModel") ||
	this.emHasStereotypeAssignment("seam2Selection") ||
	this.emHasStereotypeAssignment("seam2SelectionIndex") && 
	!this.emHasStereotypeAssignment( prAccessor() )
		? emAssignGeneSezAccessorStereotype(false, false, false, false)
		: "";

/**
  *	creates a factory method for initiation of an attribute with stereotype "seam2DataModel"
  *	if no such method exists
  */
Void addFactoryMethodForDataModelAttributes(MAttribute this) :
	this.emHasStereotypeAssignment("seam2DataModel") && this.emHasStereotypeAssignment("seam2Factory") 
		? (
			!this.hasFactoryMethodForAttribute()
				? this.classifier.addFactoryMethod(this.emGetTaggedValue("seam2Factory", "autoCreate"), this.emGetTaggedValue("seam2Factory", "scope"), !this.emHasUtilizableTaggedValue("seam2Factory", "value") ? this.name : this.emGetTaggedValue("seam2Factory", "value"))
				: logWarn("There is already a factory method for the attribute "+this.name.asTypeName()+" in class "+this.classifier.name.asTypeName()+". Stereotype 'seam2Factory' will be ignored.")
		)
		: "";
		

/**
  * check if there is a factory method for this attribute
  *
  *	@api
  */
Boolean hasFactoryMethodForAttribute(MAttribute this) :
	this.classifier.operation.exists(e|e.emHasTaggedValue("seam2Factory", "value", this.name))
		? true
		: false;


/**
  *	use attribute name for value of tagged value "value" of stereotype "seam2DataModel" if no value is available
  *	attribute name should be in plural but should not have a special plural form 
  *
  *	@api
  */
Void addDataModelValue(MAttribute this) :
	this.emHasStereotypeAssignment("seam2DataModel") && !this.emHasUtilizableTaggedValue("seam2DataModel", "value") 
		? this.setTaggedValue("seam2DataModel", "value", this.name.asTypeName())
		: "" ;

/**
  *	use attribute name for value of tagged value "value" of stereotype "seam2Selection" if no value is available
  *	attribute name has to have the format: selected<NameOfDataModelAttributeInSingular>
  *
  *	@api
  */
Void addDataModelSelectionValue(MAttribute this) : 
	this.emHasStereotypeAssignment("seam2Selection") && !this.emHasUtilizableTaggedValue("seam2Selection", "value") 
		? this.setTaggedValue("seam2Selection", "value", this.name.asTypeName().subString(8, this.name.length).toFirstLower()+"s")
		: "";

/**
  *	use attribute name for value of tagged value "value" of stereotype "seam2SelectionIndex" if no value is available
  *	attribute name has to have the format: selected<NameOfDataModelAttributeInSingular>Index
  *
  *	@api
  */
Void addDataModelSelectionIndexValue(MAttribute this) :
	this.emHasStereotypeAssignment("seam2SelectionIndex") && !this.emHasUtilizableTaggedValue("seam2SelectionIndex", "value") 
		? this.setTaggedValue("seam2SelectionIndex", "value", this.name.asTypeName().subString(8, this.name.length-5).toFirstLower()+"s")
		: "";
	

/**
  *	if this attribute has the stereotype "jpaPersistenceContext" and the tagged value "seamPersistence" 
  *	of the stereotype "seam2Component" is true (use of Seam Managed Persistence), delete "jpaPersistenceContext"
  *	stereotype (implementation in XPAND at the moment) and add "seam2Injecion" stereotype
  *	if there is no accessor stereotype no getter and setter will be created for this attribute 
  *
  *	@api
  */
Void setupSeamManagedPersistence(MAttribute this) :
	this.emHasStereotypeAssignment("jpaPersistenceContext") && 
	this.classifier.emHasTaggedValue("seam2Component", "seamPersistence", "true") &&
	!this.emHasStereotypeAssignment("seam2Injection")
	? (
		this.addInjectionStereotype("false", "true", "UNSPECIFIED", "") ->
		emRemoveStereotypeAssignment(emGetStereotypeAssignment("jpaPersistenceContext")) ->
		!this.emHasStereotypeAssignment("accessor")
			? this.emAssignGeneSezAccessorStereotype(false, false, false, false)
			: ""
	)
	: "";
	
/**
  *	if there is an attribute with name "logger" and datatype "Logger" the stereotype
  *	"seam2Logger" will be added to this attribute
  *
  *	@api
  */
Void checkLogger(MAttribute this) :
	(this.type.asTypeName().matches("Logger") 
	|| this.type.asTypeName().matches("Logger")) 
	&& this.name.matches("logger") &&
	!this.emHasStereotypeAssignment("seam2Logger")
		? this.addLoggerStereotype("")
		: "";
		
/**
  *	if there is an attribute with name "identity" and datatype "Identity" the stereotype
  *	"seam2Injection" will be added to this attribute
  *
  *	@api
  */
Void checkIdentity(MAttribute this) :
	this.type.asTypeName().matches("Identity") && this.name.matches("identity") &&
	!this.emHasStereotypeAssignment("seam2Injection")
		? this.addInjectionStereotype("false", "true", "UNSPECIFIED", "")
		: "";
		
/**
  *	if there is an attribute with name "facesMessages" and datatype "FacesMessages" the stereotype
  *	"seam2Injection" will be added to this attribute
  *
  *	@api
  */
Void checkFacesMessages(MAttribute this) :
	this.type.asTypeName().matches("FacesMessages") && this.name.matches("facesMessages") &&
	!this.emHasStereotypeAssignment("seam2Injection")
		? this.addInjectionStereotype("false", "true", "UNSPECIFIED", "")
		: "";
		
/**
  *	if there is an attribute with name "events" and datatype "Events" the stereotype
  *	"seam2Injection" will be added to this attribute
  *
  *	@api
  */
Void checkEvents(MAttribute this) :
	this.type.asTypeName().matches("Events") && this.name.matches("events") &&
	!this.emHasStereotypeAssignment("seam2Injection")
		? this.addInjectionStereotype("false", "true", "UNSPECIFIED", "")
		: "";
		
/**
  *	if there is an attribute with name "credentials" and datatype "Credentials" the stereotype
  *	"seam2Injection" will be added to this attribute
  *
  *	@api
  */
Void checkCredentials(MAttribute this) :
	this.type.asTypeName().matches("Credentials") && this.name.matches("credentials") &&
	!this.emHasStereotypeAssignment("seam2Injection")
		? this.addInjectionStereotype("false", "true", "UNSPECIFIED", "")
		: "";