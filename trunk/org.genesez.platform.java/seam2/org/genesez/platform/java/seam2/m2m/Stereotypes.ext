/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 * 
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * 	functions for creating new MStereotypes, MTags, MTaggedValues and for changing the value
 *	of an MTaggedValue 
 * 
 * @author	andre pflueger <andre.pflueger@fh-zwickau.de>
 */

extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::NavigateElement;

/**
 *	function to add an "seam2Packaging" stereotype to a MPackage
 *	default values are not set by this function!
 *
 *	@param		this		instance of MPackage
 *	@param		value		value for tagged value "value"
 *	@param		prefix		value for tagged value "prefix"
 *
 */
Void addPackagingStereotype(MPackage this, String value, String prefix) :
	let s = makePackagingStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "value", "String"), value) ->
		createTaggedValue(this, createTag(s, "prefix", "String"), prefix);

/**
 *	function to create an "seam2Packaging" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MPackage
 *
 */
MStereotype makePackagingStereotype(MPackage container) :
	let s = createStereotype(container.navModel(), "seam2Packaging", "seam2Packaging") :
		s.property.add(createTag(s, "value", "String")) ->
		s.property.add(createTag(s, "prefix", "String")) ->
		s;

/**
 *	function to add an "seam2Factory" stereotype to a MOperation
 *	default values are not set by this function!
 *
 *	@param		this		instance of MOperation
 *	@param		a			value for tagged value "autoCreate"
 *	@param		scope		value for tagged value "scope"
 *	@param		v			value for taggedvalue "value"
 *
 */
Void addFactoryStereotype(MOperation this, String a, String scope, String v) :
	let s = makeFactoryStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "autoCreate", "Boolean"), a) ->
		createTaggedValue(this, createTag(s, "scope", "seam2ScopeType"), scope) ->
		createTaggedValue(this, createTag(s, "value", "String"), v);

/**
 *	function to create an "seam2Factory" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MOperation
 *
 */
MStereotype makeFactoryStereotype(MOperation container) :
	let s = createStereotype(container.classifier.navModel(), "seam2Factory", "seam2Factory") :
		s.property.add(createTag(s, "autoCreate", "Boolean")) ->
		s.property.add(createTag(s, "scope", "seam2ScopeType")) ->
		s.property.add(createTag(s, "value", "String")) ->
		s;

/**
 *	function to add an "seam2Injection" stereotype to a MAttribute
 *	default values are not set by this function!
 *
 *	@param		this		instance of MAttribute
 *	@param		c			value for taggedvalue "create"
 *	@param		r			value for taggedvalue "required"
 *	@param		scope		value for taggedvalue "scope"
 *	@param		v			value for taggedvalue "value"
 *
 */
Void addInjectionStereotype(MAttribute this, String c, String r, String scope, String v) :
	let s = makeInjectionStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "create", "Boolean"), c) ->
		createTaggedValue(this, createTag(s, "required", "Boolean"), r) ->
		createTaggedValue(this, createTag(s, "scope", "seam2ScopeType"), scope) ->
		createTaggedValue(this, createTag(s, "value", "String"), v);

/**
 *	function to create an "seam2Injection" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MAttribute
 *
 */
MStereotype makeInjectionStereotype(MAttribute container) :
	let s = createStereotype(container.classifier.navModel(), "seam2Injection", "seam2Injection") :
		s.property.add(createTag(s, "create", "Boolean")) ->
		s.property.add(createTag(s, "required", "Boolean")) ->
		s.property.add(createTag(s, "scope", "seam2ScopeType")) ->
		s.property.add(createTag(s, "value", "String")) ->
		s;


/**
 *	function to add an "seam2Logger" stereotype to a MAttribute
 *	default values are not set by this function!
 *
 *	@param		this		instance of MAttribute
 *	@param		v			value for taggedvalue "value"
 *
 */
Void addLoggerStereotype(MAttribute this, String v) :
	let s = makeLoggerStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "value", "String"), v);

/**
 *	function to create an "seam2Logger" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MAttribute
 *
 */
MStereotype makeLoggerStereotype(MAttribute container) :
	let s = createStereotype(container.classifier.navModel(), "seam2Logger", "seam2Logger") :
		s.property.add(createTag(s, "value", "String")) ->
		s;


/**
 *	function to add an "seam2Lifecycle" stereotype to a MOperation
 *	default values are not set by this function!
 *
 *	@param		this		instance of MOperation
 *	@param		c			value for taggedvalue "create"
 *	@param		d			value for taggedvalue "destroy"
 *
 */
Void addLifecycleStereotype(MOperation this, String c, String d) :
	let s = makeLifecycleStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "create", "Boolean"), c) ->
		createTaggedValue(this, createTag(s, "destroy", "Boolean"), d);

/**
 *	function to create an "seam2Lifecycle" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MOperation
 *
 */
MStereotype makeLifecycleStereotype(MOperation container) :
	let s = createStereotype(container.classifier.navModel(), "seam2Lifecycle", "seam2Lifecycle") :
		s.property.add(createTag(s, "create", "Boolean")) ->
		s.property.add(createTag(s, "destroy", "Boolean")) ->
		s;


/**
 *	function to add an "seam2Component" stereotype to a MClass
 *	default values are not set by this function!
 *
 *	@param		this		instance of MClassifier
 *	@param		name		name of the remote interface
 *	@param		home		creation of a homeEntity for the Seam component
 *	@param		query		creation of a queryEntity for the Seam component
 *
 */
Void addComponentStereotype(MClass this, String name, String home, String query) :
	let s = makeComponentStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "autoCreate", "Boolean"), "false") ->
		createTaggedValue(this, createTag(s, "byPassInterceptors", "Boolean"), "false") ->
		createTaggedValue(this, createTag(s, "conversational", "Boolean"), "false") ->
		createTaggedValue(this, createTag(s, "jndiName", "String"), "") ->
		createTaggedValue(this, createTag(s, "name", "String"), name) ->
		createTaggedValue(this, createTag(s, "scope", "seam2ScopeType"), "") ->
		createTaggedValue(this, createTag(s, "synchronizedTimeout", "long"), "1000") ->
		createTaggedValue(this, createTag(s, "logger", "Boolean"), "true") ->		
		createTaggedValue(this, createTag(s, "seamPersistence", "Boolean"), "true") ->
		createTaggedValue(this, createTag(s, "home", "Boolean"), home) ->		
		createTaggedValue(this, createTag(s, "query", "Boolean"), query);

/**
 *	function to create an "seam2Component" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MClass
 *
 */
MStereotype makeComponentStereotype(MClass container) :
	let s = createStereotype(container.navModel(), "seam2Component", "seam2Component") :
		s.property.add(createTag(s, "autoCreate", "Boolean")) ->
		s.property.add(createTag(s, "byPassInterceptor", "Boolean")) ->
		s.property.add(createTag(s, "conevrsational", "Boolean")) ->
		s.property.add(createTag(s, "jndiName", "String")) ->
		s.property.add(createTag(s, "name", "String")) ->
		s.property.add(createTag(s, "scope", "seam2ScopeType")) ->
		s.property.add(createTag(s, "synchronizedTimeout", "long")) ->
		s.property.add(createTag(s, "logger", "Boolean")) ->
		s.property.add(createTag(s, "seamPersistence", "Boolean")) ->
		s.property.add(createTag(s, "home", "Boolean")) ->
		s.property.add(createTag(s, "query", "Boolean")) ->
		s;	