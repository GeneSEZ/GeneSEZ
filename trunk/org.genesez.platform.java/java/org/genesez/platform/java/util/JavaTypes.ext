/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides java core types as external types and checks for java primitive types.
 * 
 * @author	tobias haubold <toh@fh-zwickau.de> (maintainer)
 */
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::mapping::TypeMapping;


/**
 * Checks if the specified external type is a primitive type.
 * 
 * @return 	True, if the specified type is a java primitive type, otherwise false.
 */
boolean isPrimitiveType(MExternal this) : 
	mapName() == "boolean" || (switch (mapName().toLowerCase()) {
		case "int": true
		case "long": true
		case "byte": true
		case "short": true
		case "float": true
		case "double": true
		default: false
	});

/**
 * Checks if any type except an external type is a primitive type.
 * 
 * @return	False, only an external type can be primitive.
 */
boolean isPrimitiveType(MType this) : false;

/**
 * Returns the primitive type boolean.
 */
MExternal typeBooleanPrimitive(MModel this) : ensureExternalTypeExistence("boolean", "boolean");

/**
 * Returns the primitive type int.
 */
MExternal typeIntPrimitive(MModel this) : ensureExternalTypeExistence("int", "int");

/**
 * Returns the type 'java.lang.Object'.
 */
MExternal typeObject(MModel this) : ensureExternalTypeExistence("java.lang.Object", "Object");

/**
 * Returns the type 'java.util.HashSet'.
 */
MExternal typeHashSet(MModel this) : ensureExternalTypeExistence("java.util.HashSet", "HashSet");

/**
 * Returns the type 'java.util.HashMap'.
 */
MExternal typeHashMap(MModel this) : ensureExternalTypeExistence("java.util.HashMap", "HashMap");
