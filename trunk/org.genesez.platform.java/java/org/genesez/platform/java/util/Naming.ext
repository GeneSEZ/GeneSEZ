/**
 * Naming conventions for java
 * 
 * - fileName is only the file name, e.g. 'FooBar.java'
 * 
 * @author	nico herbig
 * @author	tobias haubold (last)
 * @date	2007-07-16
 */

// based on genesez meta model
import gcore;

extension org::genesez::metamodel::core::util::AccessHelper;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	prefix + suffix + file extensions for java types
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter of the separator for full qualified names
 * @return	the separator for full qualified names on the java platform ('.')
 */
String fqnSeparator() : ".";

/**
 * getter of the file extension including the beginning dot
 * @return	the file extension for java artefacts ('.java')
 */
String fileExtension() : ".java";

/**
 * getter of the prefix which is added to the name of an interface
 * @return	the prefix to prepend
 */
String prefix(MInterface this) : "";

/**
 * getter of the suffix which is added to the name of an interface
 * @return	the suffix to append
 */
String suffix(MInterface this) : "";

/**
 * getter of the prefix which is added to the name of a class
 * @return	the prefix to prepend
 */
String prefix(MClass this) : abstract ? "" : "";

/**
 * getter of the suffix which is added to the name of a class
 * @return	the suffix to append
 */
String suffix(MClass this) : abstract ? "" : "";

/**
 * getter of the prefix which is added to the name of an enumeration
 * @return	the prefix to prepend
 */
String prefix(MEnumeration this) : "";

/**
 * getter of the suffix which is added to the name of an enumeration
 * @return	the suffix to append
 */
String suffix(MEnumeration this) : "";

/**
 * just there for error free templates ;-)
 * @return	an empty string
 */
String prefix(MClassifier this) : "";

/**
 * just there for error free templates ;-)
 * @return	an empty string
 */
String suffix(MClassifier this) : "";

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	type names
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats the name of a class using prefix + suffix
 * @return	formatted name of the class
 */
String asTypeName(MClass this) : prefix() + name.toFirstUpper() + suffix();

/**
 * formats the name of an interface using prefix + suffix
 * @return	formatted name of the interface
 */
String asTypeName(MInterface this) : prefix() + name.toFirstUpper() + suffix();

/**
 * formats the name of an enumeration using prefix + suffix
 * @return	formatted name of the enumeration
 */
String asTypeName(MEnumeration this) : prefix() + name.toFirstUpper() + suffix();

/**
 * formats the name of a data type using prefix + suffix
 * @return	formatted name of the data type
 */
String asTypeName(MDataType this) : prefix() + name.toFirstUpper() + suffix();

/**
 * formats the name of a classifier using prefix + suffix
 * @return	formatted name of the classifier
 */
String asTypeName(MClassifier this) : prefix() + name.toFirstUpper() + suffix();

/**
 * formats the name of a type, it should NOT do anything, it's just there for error free templates ;-)
 * don't touch generics, primitive types or external types (external are mapped correctly)
 * @return	the name of the type
 */
String asTypeName(MType this) : name();

/**
 * formats the name of an event
 * @return	the name of the event
 */
String asTypeName(MEvent this) : name.startsWith("_")? name : name.toFirstUpper();

/**
 * formats the name of a type after typemapping
 * don't touch the type - the name of the type is determined by typemapping
 * @return	the name of the type
 */
String asTypeName(String this) : this;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	file names
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats the filename of a classifier
 * it's usually not called!
 * @return	the filename of a classifier
 */
String asFileName(MClassifier this) : asTypeName() + fileExtension();

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	enumeration literals
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an enumeration literal
 * @context	the enumeration literal to format
 * @return	the formatted enum literal
 * @see		asEnumLiteral(String)
 */
String asEnumLiteral(MLiteral this) : name.asEnumLiteral();

/**
 * formats an enumeration literal using a string
 * this is needed for the generation of default values!
 * @context	the enumeration literal to format
 * @return	the formatted enum literal
 */
String asEnumLiteral(String this) : toUpperCase();

/**
 * formats an association role as enum literal
 * this is needed for the association handling
 * @return	the formatted enum literal
 */
String asEnumLiteral(MAssociationRole this) : 
	name.length == 0
		? type.name().toUpperCase()
		: name.toUpperCase();

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	attributes
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an attribute name according to the value of it's 'static' and 'final' property
 * @context	the attribute to format
 * @return	the formatted attribute name
 */
String asAttribute(MAttribute this) : static && final || classifier.metaType == MInterface ? asConstant() : asVariable();

/**
 * formats an attribute name as a constant
 * @context	the attribute to format
 * @return	the formatted attribute name
 */
String asConstant(MAttribute this) : name.toUpperCase();

/**
 * formats an attribute name as a normal attribute
 * @context	the attribute to format
 * @return	the formatted attribute name
 */
String asVariable(MAttribute this) : name.toFirstLower();

/**
 * formats an property name as a getter method
 * @context	the property to format
 * @return	the formatted name of the getter method
 */
String asGetter(MProperty this) : "get" + name.toFirstUpper();

/**
 * formats an arbitrary Element as a getter method
 * @context	the element to format
 * @return	the formatted name of the getter method
 */
String asGetter(MElement this) : "get" + name.toFirstUpper();

/**
 * formats an property name as a setter method
 * @context	the property to format
 * @return	the formatted name of the setter method
 */
String asSetter(MProperty this) : "set" + name.toFirstUpper();

/**
 * Returns the name of the property access operation add for the specified property.
 */
String asAddPropertyAccessOperation(MProperty this) : "add" + name.toFirstUpper();

/**
 * Returns the name of the property access operation remove for the specified property.
 */
String asRemovePropertyAccessOperation(MProperty this) : "remove" + name.toFirstUpper();

/**
 * checks if operation is a getter method
 * @context	the operation to check
 * @return	true, if method follows the naming convention of a getter method
 */
boolean isGetter(MOperation this) : 
	// do not use attributeName() in this method cause it creates call circle
	(this.return != null && ( this.return.type.name() == "Boolean" || this.return.type.name() == "boolean") ) &&
	(this.name == "is"+this.name.subString(2,this.name.length) || this.name == "has"+this.name.subString(3,this.name.length))
		? true
		: (
			this.name == "get"+this.name.toFirstUpper()
				? true
				: false
		);
		
/**
 * checks if operation is a setter method
 * @context	the operation to check
 * @return	true, if method follows the naming convention of a setter method
 */
boolean isSetter(MOperation this) : 
	this.name == "set"+this.name.toFirstUpper()
		? true
		: false;

/**
 * extracts the attribute name of a getter or setter method
 * @context	the operation
 * @return	name of the attribute
 */
String attributeName(MOperation this) : 
	this.isSetter()
		? this.name.subString(3,this.name.length)
		: "" ->
	this.isGetter()
		? (
			(this.return != null && ( this.return.type.name() == "Boolean" || this.return.type.name() == "boolean") ) &&
			this.name.subString(0,1) == "is"	 
				? this.name.subString(2,this.name.length)
				: this.name.subString(3,this.name.length) 
		)
		: "";

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	association attributes
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an association role as a association attribute
 * @context	the association role to format
 * @return	the formatted name of the association attribute
 */
String asAttribute(MAssociationRole this) : name.toFirstLower();

/**
 * formats a class as an attribute
 * @context the association class of an association role to format
 * @return	the formatted name of the association class
 */
String asAttribute(MClass this) : name.toFirstLower();

/**
 * formats the accessor method of an association role
 * @context	the accessor method of an association role to format
 * @return	the formatted name of the accessor method
 */
String asAccessor(MAssociationRole this) : name.toFirstLower();

/*
	Naming conventions for old association handling
*/

/**
 * formats a name as a getter method according naming convention
 * @param	s	name of an attribute/method
 * @return	name as getter method
 */
String asGetter(MAssociationRole this) :
	"get" + name.toFirstUpper();

/**
 * formats a name as a setter method according naming convention
 * @param	s	name of an attribute/method
 * @return	name as setter method
 */
String asSetter(MAssociationRole this) :
	"set" + name.toFirstUpper();
	
/**
 * formats a name of a method used to insert something in a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the insert-in method
 */
String asInsertIn(MAssociationRole this) :
	"insertIn" + name.toFirstUpper();

/**
 * formats a name of a method used to add something to a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the add-to method
 
String asAddTo(MAssociationRole this) :
	"addTo" + name.toFirstUpper();
*/

/**
 * formats a name of a method used to remove something from a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the remove-from method
 */
String asRemoveFrom(MAssociationRole this) :
	"removeFrom" + name.toFirstUpper();

/**
 * formats a name of a method used to remove something from a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the remove-from method
 */
String asVariable(MAssociationRole this) :
	name.toFirstLower();

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	operations
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an operation name
 * @context	the operation to format
 * @return	the formatted name of the operation
 */
String asOperation(MOperation this) : name.toFirstLower();

/**
 * formats an operation name as a constructor
 * only for php4, not called for php5 and higher
 * 
 * @context	the operation to format
 * @return	the formatted name of the operation
 */
String asConstructor(MOperation this) : name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	parameters
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an operation name
 * @context	the operation to format
 * @return	the formatted name of the operation
 */
String asParameter(MParameter this) : name.toFirstLower();

/**
 * formats an operation name
 * @context	the operation to format
 * @return	the formatted name of the operation
 */
String asParameter(MElement this) : name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	state machine elements
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats an event name
 * @return	the formatted name of the element
 */
String asEvent(MElement this) : name.toFirstLower();

/**
 * formats a state name
 * @return	the formatted name of the element
 */
String asState(MElement this) : name.toFirstLower();

/**
 * formats a history state name for use as field name
 * @return	the formatted name of the element
 */
String asHistoryField(MElement this) : "historyOf" + name.replaceAll("_", "").toFirstUpper();

/**
 * formats an action name
 * @return	the formatted name of the element
 */
String asAction(MElement this) : name.toFirstLower();

/**
 * formats an action name
 * @return	the formatted name of the element
 */
String asEndDo(MElement this) : "end" + name.toFirstUpper();

/**
 * formats an action name
 * @return	the formatted name of the element
 */
String asStartDo(MElement this) : "start" + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	type compatibility functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats a property as an attribute
 * just there for error-free templates (polymorphism)
 * @see	asAttribute(MAttribute)
 * @see asAttribtue(MAssociationRole)
 */
String asAttribute(MProperty this) : name.toFirstLower();
