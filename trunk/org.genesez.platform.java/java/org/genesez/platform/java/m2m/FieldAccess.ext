/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides support for property access instead of field access.
 * 
 * @todo	cleanup for field access / property access handling needed
 * 			remove workflow parameter + impl. it using xtend/xpand + maybe aop
 * 			ensure if generation of access operations needs to be changed (from xpand to xtend/xpand impl)
 * 			moving of tagged values may cause side effects
 * 
 * @author	andre pflueger
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::Conversion;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::Helper;
extension org::genesez::metamodel::core::util::profile::AccessorStereotype;
extension org::genesez::metamodel::core::util::profile::GeneSEZProfile;
extension org::genesez::platform::java::m2m::AccessOperation;
extension org::genesez::platform::java::util::ExtensionMechanism;
extension org::genesez::util::logging::Logging;


/**
 * Delegates execution to containment objects.
 * @return	the context object itself
 */
MPackage doFieldAccess(MPackage this) :
	do( true );

/**
 * Delegates execution to containment objects.
 * @return	the context object itself
 */
MPackage doPropertyAccess(MPackage this) :
	do( false );

/**
 * Delegates execution to containment objects.
 * @return	the context object itself
 */
private MPackage do(MPackage this, boolean doFieldAccess) :
	classifier.do( doFieldAccess ) ->
	nestedPackage.do( doFieldAccess ) ->
	this;

/**
 * Delegates execution to containment objects.
 * @return	the context object itself
 */
private MClassifier do(MClassifier this, boolean doFieldAccess) :
	doFieldAccess
		? property.doFieldAccess()
		: property.doPropertyAccess() ->
	classifier.do( doFieldAccess ) ->
	this;

/**
 * Prepares the specified property for field access by assigning stereotypes and tagged values 
 * from the property access operations to the property.
 * 
 * @TODO	ported old implementation, in which emGetAccessOperation() was assumed to always return a non null value
 * 			but it may returns a null value if not available
 */
MProperty doFieldAccess(MProperty this) :
	emGetAccessOperation() != null
		? emGetAccessOperation().emMoveExtensionsTo( this )
		: logError("Field access for property but no get access operation available! " + fqmn() ) ->
	emSetAccessOperation() != null
		? emSetAccessOperation().emMoveExtensionsTo( this )
		: logError("Field access for property but no set access operation available! " + fqmn() ) ->
	this;

/**
 * Prepares the specified property for property access by assigning stereotypes and tagged values
 * from the property to both property access operations if available. If no property access operation
 * is available, the stereotypes and tagged values are left at the property for further use.
 * 
 * If there is no automatic generated getter/setter nor existing getter/setter the automatic 
 * generation of the getter method will be activated.
 * 
 * @TODO	ported old implementation, in which emGetAccessOperation() was assumed to always return a non null value
 * 			but it may returns a null value if not available
 */
MProperty doPropertyAccess(MProperty this) :
	// ensure there is eventually at least a get access method generated
	!emGenerateGetAccess() && !emGenerateSetAccess() && emGetAccessOperation() == null && emSetAccessOperation() == null
		? (
			logInfo("Property access is enabled but no get and set access methods are present. A get access method will be generated for " + fqmn()) ->
			// create a get access operation
			ensureTaggedValueExistence( navModel().emEnsureGeneSezAccessorStereotype().emGetTag( prAccessorGetter() ), "true" ) ->
			emProcessGetAccessOperation()
		) : this ->
	(
	let get = emGetAccessOperation() :
	let set = emSetAccessOperation() :
		emGenerateGetAccess() || emGenerateSetAccess()
			? (
				// move metadata to property access operations
				get != null
					? emMoveExtensionsTo( get )
					: this ->
				set != null
					? emMoveExtensionsTo( set )
					: this
			) : (
				// move metadata to modeled get property access operation, use set property access as fallback if not get exists
				get != null
					? (
						emMoveExtensionsTo( get ) ->
						set != null
							? emMoveExtensionsTo( set, get )
							: this
					) : (
						set != null
							? emMoveExtensionsTo( set )
							: logError("No access operation for property access found for property " + fqmn())
					)
			)
	) ->
	this;
/*	old implementation
			!this.generateGetter() && !this.generateSetter() && getGetter() == null && getSetter() == null
				? (
					this.taggedValue.selectFirst(e|e.tag.stereotype.name == "accessor" && e.tag.name == "getter").setValue("true") ->
					logInfo("property access type is selected but attribute "+this.name+" in class "+this.classifier.name+" has no getter/setter method. A getter method will be generated automatically.")
				)
				: "" ->
			this.generateGetter() || this.generateSetter()
				? (
					getGetter().copyStereotypesToProperty(this) ->
					getSetter().copyStereotypesToProperty(this)
				)
				: (
					let o = getGetter() :
						o != null
							? (
								copyStereotypesToOperation(this, o) ->
								(
								let q = getSetter() :
									q != null
										? copyStereotypesToOperation(q, o)
										: ""
								)
							)
							: (
								let p = getSetter() :
									p != null
										? (
											copyStereotypesToOperation(this, p)
										)
										: logError("no method for attribute +"+this.name+" in class "+this.classifier.name+" for annotation with property access found")
							)
				)
			
		);
*/