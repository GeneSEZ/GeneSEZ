/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides support to deal with access operations based on the stereotype «accessor».
 * It creates get and set access operations if desired.
 * 
 * @author	andre pflueger
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
extension org::genesez::metamodel::core::util::AccessHelper;
extension org::genesez::metamodel::core::util::Conversion;
extension org::genesez::metamodel::core::util::ExtensionMechanism;
extension org::genesez::metamodel::core::util::ModelNavigation;
extension org::genesez::metamodel::core::util::m2m::CloneElement;
extension org::genesez::metamodel::core::util::m2m::CreateElement;
extension org::genesez::metamodel::core::util::m2t::Helper;
extension org::genesez::metamodel::core::util::profile::GeneSEZProfile;
extension org::genesez::metamodel::core::util::profile::AccessorStereotype;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::util::logging::Logging;

/**
 * Checks the stereotype accessor on static final attributes.
 * If the stereotype is assigned and the generation of a set access operation is enabled,
 * a warning is issued.
 * If the stereotype is not assigned, the generation of a set access operation is suppressed
 * by setting the appropriate tagged value to false.
 * 
 * @TODO	the warning log message should be put into a model validation script
 * @TODO	[toh] i was unable to grasp the whole semantical meaning, maybe a refactoring is appropriate
 * 			(non static attributes, if gen setter is true, it is not set to false)
 */
MAttribute emAccessorForStaticFinalAttribute(MAttribute this) :
	final && static
		? (
			emHasStereotype( prAccessor() )
				? (
					emHasTaggedValue( prAccessor(), prAccessorSetter(), "true" )
						? logWarn("Generation of a set access operation for a static final attribute makes no sense!" + fqmn())
						: this
				) : prAssignGeneSezAccessorStereotype( emGenerateGetAccess(), false, false, false )
		) : this ->
	this;

/**
 * Ensures the existence of a get access operation for the specified property if
 * the appropriate tagged value of the stereotype accessor is present.
 * 
 * In case a get access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 * 
 * Note: using of generateGetter methods secures generateGetterSetter logic
 * this method must be executed before createGetterSetterOperations for MClass (not yet
 * implemented; accessor sereotypes on MClass instances will be considered but not removed)
 */
MProperty emEnsureGetAccessOperation(MProperty this) :
	emGenerateGetAccess() && !emHasGetAccessOperation()
		? (
			classifier.createOperation( xmiGuid + "_get", asGetter() )
				.processOperation( "public", false, false, false )
				.ensureReturnParameterExistence( xmiGuid + "_getReturn", asAttribute() )
				.processParameter( null, "return", multiplicity.cloneMultiplicity() )
				.wireType( type )
				.operation
				.assignGetAccessOperationComment( this )
				.ensureStereotypeAssignment(
					navModel().ensureStereotypeExistence( emGetAccessOperationIdentifier(), emGetAccessOperationIdentifier() )
				)
		) : this ->
	this;

/**
 * Ensures the existence of a set access operation for the specified property if
 * the appropriate tagged value of the stereotype accessor is present.
 * 
 * In case a set access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 * 
 * Note: using of generateSetter methods secures generateGetterSetter logic
 * this method must be executed before createGetterSetterOperations for MClass (not yet
 * implemented; accessor sereotypes on MClass instances will be considered but not removed)
 * 
 * @TODO	check if in case of a multi-valued property, instead of a set...(collection type) operation and add/remove operation would be more appropriate
 */
MProperty emEnsureSetAccessOperation(MProperty this) : 
	emGenerateSetAccess() && !emHasSetAccessOperation()
		? (
			classifier.createOperation( xmiGuid + "_set", asSetter() )
				.processOperation( "public", false, false, false )
				.ensureParameterExistence( xmiGuid + "_setParam", asAttribute() )
				.processParameter( null, "in", multiplicity.cloneMultiplicity() )
				.wireType( type )
				.assignSetAccessOperationParameterComment( this )
				.operation
				.assignSetAccessOperationComment( this )
				.ensureStereotypeAssignment(
					navModel().ensureStereotypeExistence( emSetAccessOperationIdentifier(), emSetAccessOperationIdentifier() )
				)
		) : this ->
	this;

/**
 * Ensures the existence of an add access operation for the specified property if
 * the appropriate tagged value of the stereotype accessor is present.
 * 
 * In case an add access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 */
MProperty emEnsureAddAccessOperation(MProperty this) :
	multiplicity.isMultiValued() && emGenerateAddAccess() && !emHasAddAccessOperation()
		? (
			classifier.createOperation( xmiGuid + "_add", asAddPropertyAccessOperation() )
				.processOperation( "public", false, false, false )
				.ensureParameterExistence( xmiGuid + "_addParam", asAttribute() )
				.processParameter( null, "in", createMultiplicity( 0, 1 ) )
				.wireType( type )
				.assignAddAccessOperationParameterComment( this )
				.operation
				.assignAddAccessOperationComment( this )
				.ensureStereotypeAssignment(
					navModel().ensureStereotypeExistence( emAddAccessOperationIdentifier(), emAddAccessOperationIdentifier() )
				)
		) : this ->
	this;

/**
 * Ensures the existence of a remove access operation for the specified property if
 * the appropriate tagged value of the stereotype accessor is present.
 * 
 * In case a remove access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 */
MProperty emEnsureRemoveAccessOperation(MProperty this) :
	multiplicity.isMultiValued() && emGenerateRemoveAccess() && !emHasRemoveAccessOperation()
		? (
			classifier.createOperation( xmiGuid + "_remove", asRemovePropertyAccessOperation() )
				.processOperation( "public", false, false, false )
				.ensureParameterExistence( xmiGuid + "_removeParam", asAttribute() )
				.processParameter( null, "in", createMultiplicity( 0, 1 ) )
				.wireType( type )
				.assignRemoveAccessOperationParameterComment( this )
				.operation
				.assignRemoveAccessOperationComment( this )
				.ensureStereotypeAssignment(
					navModel().ensureStereotypeExistence( emRemoveAccessOperationIdentifier(), emRemoveAccessOperationIdentifier() )
				)
		) : this ->
	this;


/**
 * Returns true if a get access operation for the specified property already exists, otherwise false.
 */
boolean emHasGetAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.name == asGetter() && o.parameter.isEmpty && o.hasReturn() && o.return.type == type );

/**
 * Returns true if a set access operation for the specified property already exists, otherwise false.
 */
boolean emHasSetAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.name == asSetter() && !o.hasReturn() && o.parameter.size == 1 && o.parameter.first().type == type );

/**
 * Returns true if an add access operation for the specified property already exists, otherwise false.
 */
boolean emHasAddAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.name == asAddPropertyAccessOperation() && !o.hasReturn() && o.parameter.size == 1 && o.parameter.first().type == type );

/**
 * Returns true if a remove access operation for the specified property already exists, otherwise false.
 */
boolean emHasRemoveAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.name == asRemovePropertyAccessOperation() && !o.hasReturn() && o.parameter.size == 1 && o.parameter.first().type == type );


/**
 * Returns the get access operation for the specified property.
 */
MOperation emGetAccessOperation(MProperty this) :
	classifier.operation.select( o|o.isGetter() && o.parameter.isEmpty );

/**
 * Returns the set access operation for the specified property.
 */
MOperation emSetAccessOperation(MProperty this) :
	classifier.operation.select( o|o.isSetter() && o.parameter.size == 1 );

/**
 * Returns the identifier to generate get access operations.
 */
String emGetAccessOperationIdentifier() :
	"http://www.genesez.org/access/GetOperation";

/**
 * Returns the identifier to generate set access operations.
 */
String emSetAccessOperationIdentifier() :
	"http://www.genesez.org/access/SetOperation";

/**
 * Returns the identifier to generate add access operations.
 */
String emAddAccessOperationIdentifier() :
	"http://www.genesez.org/access/AddOperation";

/**
 * Returns the identifier to generate remove access operations.
 */
String emRemoveAccessOperationIdentifier() :
	"http://www.genesez.org/access/RemoveOperation";

/**
 * Assigns a comment to the get access operation.
 * If the property has comments, they are cloned to the get access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignGetAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultGetAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for get access operations of the specified property.
 */
String defaultGetAccessOperationComment(MProperty this) :
	"Returns the value of attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a comment to the set access operation.
 * If the property has comments, they are cloned to the set access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignSetAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultSetAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for set access operations of the specified property.
 */
String defaultSetAccessOperationComment(MProperty this) :
	"Sets the value of attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a default comment to the parameter of the set access operation.
 */
MParameter assignSetAccessOperationParameterComment(MParameter this, MProperty source) :
	createComment( xmiGuid + "_comment", "the value to set.").owningElement;

/**
 * Assigns a comment to the add access operation.
 * If the property has comments, they are cloned to the add access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignAddAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultAddAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for add access operations of the specified property.
 */
String defaultAddAccessOperationComment(MProperty this) :
	"Adds the specified value to the attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a default comment to the parameter of the add access operation.
 */
MParameter assignAddAccessOperationParameterComment(MParameter this, MProperty source) :
	createComment( xmiGuid + "_comment", "the value to add.").owningElement;

/**
 * Assigns a comment to the remove access operation.
 * If the property has comments, they are cloned to the remove access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignRemoveAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultRemoveAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for remove access operations of the specified property.
 */
String defaultRemoveAccessOperationComment(MProperty this) :
	"Removes the specified value from the attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a default comment to the parameter of the remove access operation.
 */
MParameter assignRemoveAccessOperationParameterComment(MParameter this, MProperty source) :
	createComment( xmiGuid + "_comment", "the value to remove.").owningElement;
