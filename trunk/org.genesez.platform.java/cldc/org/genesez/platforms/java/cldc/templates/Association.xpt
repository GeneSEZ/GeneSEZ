«IMPORT gcore»

«REM» useful metamodel extensions «ENDREM»

«EXTENSION org::genesez::platform::common::AccessHelper»
«EXTENSION org::genesez::platform::common::Conversion»
«EXTENSION org::genesez::platform::common::typemapping::TypeMapping»

«EXTENSION org::genesez::platforms::java::scripts::Type»
«EXTENSION org::genesez::platforms::java::scripts::Naming»
«EXTENSION org::genesez::platforms::java::scripts::Conversion»

«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»


«REM» 
	generate a insert in implementation method
«ENDREM»
«DEFINE InsertInImpl FOR MAssociationRole-»
	«EXPAND _CommentAccessor-»
	«IF isPlainAssociation()-»
		public void «asInsertIn()»(«type.mapName()» _in) {
			«IF multiplicity == 1-»
				if («asAttribute()» == _in) {
					return;
				}
				«IF opposite != null-»
					if («asAttribute()» != null) {
						«asAttribute()».«opposite.asRemoveFrom()»(this);
					}
				«ENDIF-»
				«asAttribute()» = _in;
			«ELSE-»
				if («asAttribute()».contains(_in)) {
					return;
				}
				«asAttribute()».addElement(_in);
			«ENDIF-»
			«IF opposite != null-»
				_in.«opposite.asInsertIn()»(this);
			«ENDIF-»
		}
	«ELSE-»
		/**
		  * insert into association, generate linked association class object
		  * @param _other partner object
		  * @return newly generated linked association class object
		  */
		public «assocClass().mapName()» «asInsertIn()»(«type.mapName()» _other) {
			«IF association.end.first() != this-»
				«assocClass().mapName()» _assoc = new «assocClass().mapName()»(this, _other);
			«ELSE-»
				«assocClass().mapName()» _assoc = new «assocClass().mapName()»(_other, this);
			«ENDIF-»
			«asAttribute()».addElement(_assoc);
		«IF opposite != null-»
			_other.«opposite.asInsertIn()»(_assoc); 
		«ENDIF-»
			return _assoc;
		}
		
		/**
		  * insert linked association class object into association
		  * @param _other partner object
		  * @return newly generated linked association class object
		  */
		public void «asInsertIn()»(«assocClass().mapName()» _assoc) {
			if («asAttribute()».contains(_assoc)) {
					return;
			}
			if(_assoc.«opposite.asGetter()»() != this) {
				throw new RuntimeException("inconsistent association object");
			}
			«asAttribute()».addElement(_assoc);
		}
	«ENDIF-»
«ENDDEFINE»

«REM» 
	generate a remove from implementation method
«ENDREM»
«DEFINE RemoveFromImpl FOR MAssociationRole-»
	«EXPAND _CommentAccessor-»
	«IF isPlainAssociation()-»
		public void «asRemoveFrom()»(«type.mapName()» _ex) {
			«IF multiplicity == 1-»
				if («asAttribute()» != _ex) {
					return;
				}
				«asAttribute()» = null;
			«ELSE-»
				if (!«asAttribute()».contains(_ex)) {
					return;
				}
				«asAttribute()».removeElement(_ex);
			«ENDIF-»
			«IF opposite != null-»
				_ex.«opposite.asRemoveFrom()»(this);
			«ENDIF-»
	}
«ELSE-»
		/**
		  * remove entry from association indexed by its association class object
		  */
		public void «asRemoveFrom()»(«assocClass().mapName()» _assoc) {
			if (!«asAttribute()».contains(_assoc)) {
				return;
			}
			«asAttribute()».removeElement(_assoc);
			«IF opposite != null-»
				_assoc.«asGetter()»().«opposite.asRemoveFrom()»(_assoc);
			«ENDIF-»
		}
	«ENDIF-»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»


«DEFINE _CommentAssociation FOR MAssociationRole-»
	/**
	 * variable for association to «name»
	«IF hasComment()-»
	 * @see {@link «asGetter()»}
	«ENDIF-»
	 */
«ENDDEFINE»


«DEFINE _CommentGetter FOR MAssociationRole-»
	/**
	 * accessor for association to «name»
	«IF hasComment()-»
	 * «ownedComment.getCommentText()»
	«ENDIF-»
	 */
«ENDDEFINE»


«DEFINE _CommentAccessor FOR MAssociationRole-»
	/**
	 * accessor for association to «name»
	«IF hasComment()-»
	 * @see {@link «asGetter()»}
	«ENDIF-»
	 */
«ENDDEFINE»

«REM»
	generate modifiers for mclassifier
«ENDREM»
«DEFINE _Modifier FOR MAssociationRole-»
	«visibility»
«ENDDEFINE»

«DEFINE _AssocClassReferences FOR MAssociation-»
	«FOREACH end AS aend-»
		/** reference attribute to the managed association end */
		private «aend.type.mapName()» «aend.asAttribute()»;
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE _AssocClassReferenceGetters FOR MAssociation-»
	«FOREACH end AS aend-»
		/** getter of reference attribute to the managed association end  «aend.asAttribute()»*/
		public «aend.type.mapName()» «aend.asGetter()»() {
			return «aend.asAttribute()»;
		}
	«ENDFOREACH-»
«ENDDEFINE»
