/**
 * Functions for creating and removing java5 specific stereotypes.
 * 
 * @author	andre pflueger
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
import gcore;

extension org::genesez::platform::common::AccessHelper;
extension org::genesez::platform::common::m2m::CreateTemplate;
extension org::genesez::util::logging::Logging;
extension org::genesez::platform::java::java5::scripts::Helper;


/**
 *	function to add an internal used stereotype
 *	this stereotype does not contain tags
 *
 *	@param	this	instance of MElement
 *	@param	name	name of the stereotype
 */
Void addInternalStereotype(MElement this, String name) :
	this.stereotype.add(createStereotype(this.model(), name, name));
	

/**
 *  function to add the java target stereotype
 *
 *  @param  this    instance of MElement
 *  @param  name    name of the stereotype
 */
Void makeTargetStereotype(MElement this, boolean annotationType, boolean type, boolean constructor
	, boolean method, boolean field, boolean localVariable
	, boolean parameter, boolean package) :	
    let s = createAnnotationStereotype(this) : 
    // merge value for the tagged value from the meta association roles and the tagged value of the existing stereotyp
    	createTargetTaggedValue(this, s.property.selectFirst( t | t.name == "target"), annotationType, type, constructor, method, field, localVariable, parameter, package);// :
        //this.taggedValue.selectFirst(e|e.tag.name == "target" && e.tag.stereotype.name == s.name).setValue(target);


/**
 * Returns the stereotype for the annotation @Target, @Retention and @Documented.
 * The assingment ot the specified model element is ensured.
 */
MStereotype createAnnotationStereotype(MElement this) :
	ensureStereotypeAssignment( model().annotationStereotype() );

/**
 * Returns the java5 annotation stereotype.
 * The specified model is checked if it already exists and if it is returned.
 * Else it is created and returned.
 */
cached MStereotype annotationStereotype(MModel this) :
	ensureStereotype( java5AnnotationStereotype(), java5AnnotationStereotype() )
	// ensure that all tags are present
	.targetTag().stereotype
	.retentionTag().stereotype
	.documentedTag().stereotype;

/**
 * Returns the 'target' tag of the java5 annotation stereotype.
 * It checks existence of the stereotype and the tag within the model and creates them as needed.
 */
cached MTag targetTag(MElement this) : model().annotationStereotype().targetTag();
private MTag targetTag(MStereotype this) : ensureTag( "target", "String" );

/**
 * Returns the 'retention' tag of the java5 annotation stereotype.
 * It checks existence of the stereotype and the tag within the model and creates them as needed.
 */
cached MTag retentionTag(MElement this) : model().annotationStereotype().retentionTag();
private MTag retentionTag(MStereotype this) : ensureTag( "retention", "String" );

/**
 * Returns the 'documented' tag of the java5 annotation stereotype.
 * It checks existence of the stereotype and the tag within the model and creates them as needed.
 */
cached MTag documentedTag(MElement this) : model().annotationStereotype().documentedTag();
private MTag documentedTag(MStereotype this) : ensureTag( "documented", "Boolean" );


/**
 * Creates the specified value for the tag 'documented' of the java5 annotation stereotype.
 * The assignment of the stereotype to the model element is ensured.
 */
MElement createDocumentedTaggedValue(MElement this, boolean documented) :
	documented
		? ensureTaggedValue( model().documentedTag(), "true" )
		: this ->
	this;

/**
 * Creates the specified value for the tag 'retention' of the java5 annotation stereotype.
 * Possible values are: "source", "class", "runtime", default is "class".
 * The assignment of the stereotype to the model element is ensured.
 */
MElement createRetentionTaggedValue(MElement this, String retentionPolicy) :
	ensureTaggedValue(
		model().retentionTag(),
		switch {
			case retentionPolicy.toUpperCase() == "SOURCE" : "SOURCE"
			case retentionPolicy.toUpperCase() == "RUNTIME" : "RUNTIME"
			default : "CLASS"
		}
	) -> this;

/**
 * Creates the specified value for the tag 'target' of the java5 annotation stereotype.
 * The assignment of the stereotype to the model element is ensured.
 */
MElement createTargetTaggedValue(MElement this, boolean setAnnotationType, boolean setType, boolean setConstructor, 
		boolean setMethod, boolean setField, boolean setLocalVariable, boolean setParameter, boolean setPackage) :
		
	createTargetTaggedValue(
		model().targetTag(), 
		setAnnotationType, setType, setConstructor, setMethod, setField, setLocalVariable, setParameter, setPackage ) ->
	this;

/**
 *  Method to create the values of the tagged value for the "@Target" annotation 
 *
 *  @param  this    instance of MElement
 *  @param  setAnnotationType    name of the stereotype
 *  @param  setType
 *  @param  setConstructor
 *  @param  setMethod
 *  @param  setField
 *  @param  setLocalVariable
 *  @param  setParameter
 *  @param  setPackage
 */
Void createTargetTaggedValue(MElement this, MTag t, boolean setAnnotationType, boolean setType, boolean setConstructor
        , boolean setMethod, boolean setField, boolean setLocalVariable
        , boolean setParameter, boolean setPackage) :
       	setAnnotationType && !hasTaggedValue(t.stereotype.name, t.name, "ANNOTATION_TYPE")	? this.createTaggedValue(t, "ANNOTATION_TYPE") : Void -> 
       	setType           && !hasTaggedValue(t.stereotype.name, t.name, "TYPE") 			? this.createTaggedValue(t, "TYPE") : Void ->
        setConstructor    && !hasTaggedValue(t.stereotype.name, t.name, "CONSTRUCTOR") 		? this.createTaggedValue(t, "CONSTRUCTOR") : Void ->
        setMethod         && !hasTaggedValue(t.stereotype.name, t.name, "METHOD") 			? this.createTaggedValue(t, "METHOD") : Void ->
        setField          && !hasTaggedValue(t.stereotype.name, t.name, "FIELD") 			? this.createTaggedValue(t, "FIELD") : Void ->
        setLocalVariable  && !hasTaggedValue(t.stereotype.name, t.name, "LOCAL_VARIABLE")	? this.createTaggedValue(t, "LOCAL_VARIABLE") : Void ->
        setParameter      && !hasTaggedValue(t.stereotype.name, t.name, "PARAMETER")		? this.createTaggedValue(t, "PARAMETER") : Void ->
        setPackage        && !hasTaggedValue(t.stereotype.name, t.name, "PACKAGE")			? this.createTaggedValue(t, "PACKAGE") : Void;

/**
 * Adds new values to a tagged value separated by comma
 *
 * @param taggedValue String value that contains the tagged values or "" if none are set
 * @param this The element which contains the tagged values
 * @param setValue Only if setValue == true, the value will be added
 * @param vlaue The new value that is added to the tagged value string
 */
String addTargetTaggedValue(String taggedValue, MElement this, boolean setValue, String value) :
    /* if type is set and not yet incuded in tagged value string ...  */ 
    (setValue == true && this.getTaggedValue(java5AnnotationStereotype(), "target").contains(value) == false)
    ? ( /*... add value to taggedValue string (add comma if needed) */
	    let taggedValue = (taggedValue == "" ? value : taggedValue + ", " + value) : taggedValue
       )
       /*else return unchanged taggedValue string*/
    : taggedValue;


/**
 *  function to add the java retention stereotype with the default value
 *
 *  @param  this    instance of MElement
 */
Void makeDefaultRetentionStereotype(MElement this) : 
    let s = createAnnotationStereotype(this): 
        this.taggedValue.selectFirst(e|e.tag.name == "retention" && e.tag.stereotype.name == s.name).setValue(javaDefaultRetention());
	
/**
 *	removes the accessor stereotype with his tagged values if existing
 */
Void removeAccessorStereotype(MElement this) :
	this.hasStereotype("accessor")
		? (
			//remove tagged values
			this.taggedValue.remove(this.taggedValue.selectFirst(e|e.tag.name == "getter")) ->
			this.taggedValue.remove(this.taggedValue.selectFirst(e|e.tag.name == "setter")) ->
			//remove tags
			this.taggedValue.tag.remove(this.taggedValue.tag.selectFirst(e|e.name == "getter")) ->
			this.taggedValue.tag.remove(this.taggedValue.tag.selectFirst(e|e.name == "setter")) ->
			//remove stereotype
			this.stereotype.remove(this.stereotype.selectFirst(e|e.name == "accessor"))
		)
		: "";
