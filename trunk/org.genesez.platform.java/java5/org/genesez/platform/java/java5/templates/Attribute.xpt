
«IMPORT gcore»

«REM»
	Handles everything about attriutes.
	- supports the stereotype '<<primitive>>' for multi-valued attributes
	
	@author	nico herbig
	@author	tobias haubold <toh@fh-zwickau.de>
	@author andre pflueger (last)
«ENDREM»

«EXTENSION org::genesez::platform::common::AccessHelper»
«EXTENSION org::genesez::util::logging::Logging»
«EXTENSION org::genesez::platform::common::Conversion»
«EXTENSION org::genesez::platform::common::m2t::Helper»
«EXTENSION org::genesez::platform::common::typemapping::TypeMapping»

«EXTENSION org::genesez::platform::java::scripts::Type»
«EXTENSION org::genesez::platform::java::scripts::Naming»
«EXTENSION org::genesez::platform::java::scripts::Helper»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	processes all attributes
	
	for interfaces, all attributes are treated as 'public', 'static' and 'final'
	for classifiers the attributes are ordered: static final, static, non static
«ENDREM»
«DEFINE Declaration FOR MClassifier -»
	«EXPAND _Declaration FOREACH property.typeSelect(MAttribute).select( e| e.static && e.final && !e.derived ) -»
	«EXPAND _Declaration FOREACH property.typeSelect(MAttribute).select( e| e.static && !e.final && !e.derived ) -»
	«EXPAND _Declaration FOREACH property.typeSelect(MAttribute).select( e| !e.static && e.final && !e.derived ) -»
	«EXPAND _Declaration FOREACH property.typeSelect(MAttribute).select( e| !e.static && !e.final && !e.derived ) -»
«ENDDEFINE»

«REM»
	Generates an initialization block to initialize all multi-valued attributes with default values if any.
«ENDREM»
«DEFINE InitializationBlock FOR MClassifier -»
«IF property.typeSelect(MAttribute).exists( p | !p.static && !p.derived && p.isMultiValuedType() && p.hasDefaultValue() ) -»
	// initialize all multi valued fields with their default values
	{
	«EXPAND _MultiValuedInitialization FOREACH property.typeSelect(MAttribute).select( p | !p.static && !p.derived && p.isMultiValuedType() && p.hasDefaultValue() ) -»
	«EXPAND _InitializationBlock -»
	}
«ENDIF -»
«ENDDEFINE»

«DEFINE _MultiValuedInitialization FOR MAttribute -»
	«FOREACH defaultvalue.toList() AS v -»
		«asAttribute()».add(«v»);
	«ENDFOREACH -»
«ENDDEFINE»

«DEFINE _InitializationBlock FOR MClassifier -»
«ENDDEFINE»

«REM»
	processes the derived attributes of an interface
	only the attributes with visibility 'public' are processed, because the fact that all interface methods must be 'public'
«ENDREM»
«DEFINE Derived FOR MInterface -»
	«EXPAND _DerivedDeclaration FOREACH property.typeSelect(MAttribute).select( e| e.derived && e.visibility == "public" ) -»
«ENDDEFINE»

«REM»
	processes the derived attributes of a classifier
	order: static, non static
«ENDREM»
«DEFINE Derived FOR MClassifier -»
	«EXPAND _DerivedImplementation FOREACH property.typeSelect(MAttribute).select( e| e.static && e.derived ) -»
	«EXPAND _DerivedImplementation FOREACH property.typeSelect(MAttribute).select( e| !e.static && e.derived ) -»
«ENDDEFINE»

«REM»
	processes the accessors methods for attributes
	
	distincts the features 'disableAccessors' + 'useAccessorStereotype' using the m2t-helper functions
	for 'final' attributes, the generation of setter's is suppressed
«ENDREM»
«DEFINE Accessors FOR MClass -»
«EXPAND _Getter FOREACH property.typeSelect(MAttribute).select( e| e.generateGetter() && e.final && !e.derived ) -»
«FOREACH property.typeSelect(MAttribute).select( e| !e.final && !e.derived ) AS a -»
	«IF a.generateGetter() -»«EXPAND _Getter FOR a -»«ENDIF -»
	«IF a.generateSetter() -»«EXPAND _Setter FOR a -»«ENDIF -»
	«IF a.isMultiValuedType() && a.generateAdd() -»«EXPAND _Add FOR a -»«ENDIF -»
	«IF a.isMultiValuedType() && a.generateRemove() -»«EXPAND _Remove FOR a -»«ENDIF -»
«ENDFOREACH -»
«ENDDEFINE»

«REM»
	processes the accessor methods for attributes
	
	for data types, only getters are generated
«ENDREM»
«DEFINE Accessors FOR MDataType -»
«EXPAND _Getter FOREACH property.typeSelect(MAttribute).select( e| !e.derived ) -»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	generates an attribute declaration
	for attributes, the implicit modifiers 'public', 'static' + 'final' are generated
«ENDREM»
«DEFINE _Declaration FOR MAttribute -»
	«EXPAND Comment::Attribute-»
	«IF fieldAccess()-»
		«EXPAND _Annotation-»
	«ENDIF-»
	«IF isSingleValuedType()-»
		«EXPAND _Modifier -» «type.mapName().asTypeName()»«EXPAND Type::Generics» «asAttribute()» «EXPAND _DefaultValue -»;
	«ELSE»
		«EXPAND _Modifier -» «EXPAND Type::MultiValuedType -» «asAttribute()» «EXPAND _DefaultValue -»;
	«ENDIF»
«ENDDEFINE»

«REM»
	generates the accessor method declaration of an derived attribute of an interface
	visibility is set to 'public' because it must be 'public'
«ENDREM»
«DEFINE _DerivedDeclaration FOR MAttribute -»
	«EXPAND Comment::Getter -»
	«IF isSingleValuedType() -»
	public «type.mapName().asTypeName()» «asGetter()»();
	«ELSE -»
	public «EXPAND Type::MultiValuedType -» «asGetter()»();
	«ENDIF -»
«ENDDEFINE»

«REM»
	generates the accessor method of an derived attribute
«ENDREM»
«DEFINE _DerivedImplementation FOR MAttribute -»
	«EXPAND Comment::Getter -»
	«IF isSingleValuedType() -»
	«EXPAND _Modifier» «type.mapName().asTypeName()» «asGetter()»() {
	«ELSE -»
	«EXPAND _Modifier» «EXPAND Type::MultiValuedType -» «asGetter()»() {
	«ENDIF -»
		«EXPAND _DerivedImplementationBody -»
	}
«ENDDEFINE»

«REM»
	processes the modifiers for the declaration of an attribute
	
	visibility of attributes depends on:
	* if the attribute belongs to an interface
	* the feature 'usePropertyModifiersForAccessors'
	* if the attribute is 'derived'
«ENDREM»
«DEFINE _Modifier FOR MAttribute -»
«IF classifier.metaType == MInterface -»
	public static final
«ELSEIF usePropertyVisibilityForAccessors() && !derived -»
	private «IF static -»static«ENDIF -» «IF final -»final «ENDIF -» «EXPAND _Volatile -»
«ELSE -»
	«modifier()» «IF static -»static«ENDIF -» «IF final -»final«ENDIF -» «EXPAND _Volatile -»
«ENDIF -»
«ENDDEFINE»

«REM»
	evaluates the stereotype "volatile" of the GeneSEZ UML profile
«ENDREM»
«DEFINE _Volatile FOR MAttribute -»
	«IF hasStereotype("volatile")-»volatile«ENDIF-»
«ENDDEFINE»

«REM»
	Processes the default value of an attribute.
	For non-final multi-valued attributes, a default is always generated (for type safety).
	Final multi-valued attributes should be initialized within the constructor.
	
	Note: this is not valid java code: ' = new ArrayList<String>[3];'
«ENDREM»
«DEFINE _DefaultValue FOR MAttribute -»
«IF isSingleValuedType() && hasDefaultValue() -»
	«IF type.isEnumeration() -»
	 = «type.mapName().asTypeName()».«defaultvalue.asEnumLiteral() -»
	«ELSE -»
	 = «defaultvalue -»
	«ENDIF -»
«ELSEIF isMultiValuedType() && !final -»
	«IF usePrimitiveType() && !hasFixedMultiplicity() -»
	 = null
	«ELSEIF usePrimitiveType() && hasFixedMultiplicity() -»
	 = new «type.mapName().asTypeName()»[«upperBoundMultiplicity»]
	«ELSEIF type.isPrimitiveType() -»
	 = new «mapType("Implementation") -»<«type.mapName("Wrapper").asTypeName() -»«EXPAND Type::Generics FOR type»>()
	«ELSE -»
	 = new «mapType("Implementation") -»<«type.mapName().asTypeName() -»«EXPAND Type::Generics FOR type»>()
	«ENDIF -»
«ENDIF -»
«ENDDEFINE»

«REM»
	generates the body for the implementation of derived attributes
«ENDREM»
«DEFINE _DerivedImplementationBody FOR MAttribute -»
		«PROTECT CSTART "/* " CEND " */" ID ("java.derived.attribute.implementation." + xmiGuid)»
		// TODO: implementation of derived (calculated) attribute '«asAttribute()»'
		throw new UnsupportedOperationException(
				"The implementation of the derived attribute '«asAttribute()»' is missing!");
		«ENDPROTECT»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	generates the getter method for an attribute
	the attribute is simply returned
«ENDREM»
«DEFINE _Getter FOR MAttribute -»
	«EXPAND Comment::Getter -»
	«IF !fieldAccess()-»
		«EXPAND _Annotation-»
	«ENDIF-»
	«IF isSingleValuedType() -»		
		«EXPAND _ModifierAccessor» «type.mapName().asTypeName()» «asGetter()»() {
			«IF this.type().mapName().asTypeName().matches("Date") -»
				return new Date(«asAttribute() -».getTime());
			«ELSE -»
				return «asAttribute()»;
			«ENDIF -»
		}
	«ELSE -»
		«EXPAND _ModifierAccessor» «EXPAND Type::MultiValuedType -» «asGetter()»() {
			return «asAttribute()»;
		}
	«ENDIF -»
«ENDDEFINE»

«REM»
	generates the setter method for an attribute
«ENDREM»
«DEFINE _Setter FOR MAttribute -»
	«EXPAND Comment::Setter -»
	«IF !fieldAccess() && !this.generateGetter()-»
		«EXPAND _Annotation-»
	«ENDIF-»
	«IF isSingleValuedType() -»
		«EXPAND _ModifierAccessor» void «asSetter()»(«type.mapName().asTypeName()» «IF static-»_«ENDIF-»«asAttribute()») {
			«IF !static-»this.«ENDIF-»«asAttribute()» = «IF static-»_«ENDIF-»«asAttribute()»;
		}
	«ELSE -»
		«EXPAND _ModifierAccessor» void «asSetter()»(«EXPAND Type::MultiValuedType -» «IF static-»_«ENDIF-»«asAttribute()») {
			«IF hasStereotype("primitive") -»
				«IF !static-»this.«ENDIF-»«asAttribute()» = new «type().mapName().asTypeName() -»[«IF static-»_«ENDIF-»«asAttribute()».length];
				for (int counter = 0; counter < «IF static-»_«ENDIF-»«asAttribute()».length; counter++) {
					«IF !static-»this.«ENDIF-»«asAttribute()»[counter] = «IF static-»_«ENDIF-»«asAttribute()»[counter];
				}
			«ELSE -»
				«IF !static-»this.«ENDIF-»«asAttribute()» = «IF static-»_«ENDIF-»«asAttribute()»;
			«ENDIF-»
		}
	«ENDIF -»
«ENDDEFINE»

«REM»
	Generates the add property access method for an multi valued attribute
«ENDREM»
«DEFINE _Add FOR MAttribute -»
	«EXPAND Comment::Add -»
	«EXPAND _ModifierAccessor» void «asAddPropertyAccessOperation()»(«type.mapName().asTypeName()» «IF static-»_«ENDIF-»«asAttribute()») {
		«IF hasStereotype("primitive") -»
			«PROTECT CSTART "/* " CEND " */" ID ("add.property.access_" + xmiGuid)»
			// TODO: sorry the template for add operations on arrays is missing, please file a feature request at forge.genesez.org
			throw new UnsupportedOperationException(
					"The implementation of the property access operation add for multi valued attribute '«asAttribute()»' is missing!");
			«ENDPROTECT»
		«ELSE -»
			«IF !static-»this.«ENDIF-»«asAttribute()».add(«IF static-»_«ENDIF-»«asAttribute()»);
		«ENDIF -»
	}
«ENDDEFINE»

«REM»
	Generates the remove property access method for an multi valued attribute
«ENDREM»
«DEFINE _Remove FOR MAttribute -»
	«EXPAND Comment::Remove -»
	«EXPAND _ModifierAccessor» void «asRemovePropertyAccessOperation()»(«type.mapName().asTypeName()» «IF static-»_«ENDIF-»«asAttribute()») {
		«IF hasStereotype("primitive") -»
			«PROTECT CSTART "/* " CEND " */" ID ("remove.property.access_" + xmiGuid)»
			// TODO: sorry the template for remove operations on arrays is missing, please file a feature request at forge.genesez.org
			throw new UnsupportedOperationException(
					"The implementation of the property access operation remove for multi valued attribute '«asAttribute()»' is missing!");
			«ENDPROTECT»
		«ELSE -»
			«IF !static-»this.«ENDIF-»«asAttribute()».remove(«IF static-»_«ENDIF-»«asAttribute()»);
		«ENDIF -»
	}
«ENDDEFINE»

«REM»
	processes the modifiers of an attribute accessor method
	
	distincts if the visibility of the property should be used or simply 'public'
«ENDREM»
«DEFINE _ModifierAccessor FOR MAttribute -»
	«IF usePropertyVisibilityForAccessors() -»
	«modifier()» «IF static»static«ENDIF -» «IF final»final«ENDIF -»
	«ELSE -»
	public «IF static»static«ENDIF -» «IF final»final«ENDIF -»
	«ENDIF -»
«ENDDEFINE»

«REM»
	will be overriden by other cartridges to generate annotations by using aspects
«ENDREM»
«DEFINE _Annotation FOR MAttribute-»
	«EXPAND Element::JavaAnnotation -»
«ENDDEFINE»
