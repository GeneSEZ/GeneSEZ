/**
 * 	functions for changing or adding associations
 *  
 * @author	andre pflueger
 * @date	2010-01-13
 */

// based on genesez meta model
import gcore;

extension org::genesez::platform::java::scripts::Naming;
extension org::genesez::metamodel::core::util::m2t::Helper;
extension org::genesez::util::logging::Logging;
extension org::genesez::metamodel::core::util::AccessHelper;

/**
 *	this method creates a setter operation with an internal stereotype 
 *	for the generation of setter operations according to the stereotype
 *	"accessor" of the genesez profile
 *
 *	this operation will be generated by the normal operation template but there
 *	will be implemented code instead of protected regions (template identifies these
 *	operations by the internal stereotype)
 *
 *	using of generateSetter methods secures generateGetterSetter logic
 *	this method must be executed before createGetterSetterOperations for MClass (not yet
 *	implemented; accessor sereotypes on MClass instances will be considered but not removed)
 *
 *	@param	this		instance of MAttribute
 *	@param	container	container for the setter operation
 */	
 Void createSetterOperation(MAssociationRole this, MClassifier container) :
	this.generateSetter()
		? (
			""/*let o = createOperation(this.classifier, this.xmiGuid+"_"+this.name.asTypeName()+"_setter_operation", this.asSetter()) :
				o.processOperation("public", false, false, false, 1, this.unique, this.ordered) ->
				o.setReturnType(createExternal(this.model(), "void")) ->
				(let p = o.createParameter(this.xmiGuid+"_"+this.name.asTypeName()+"_setter_operation_parameter", this.name.asTypeName()) :
					p.setType(createExternal(this.model(), this.type.asTypeName())) ->
					p.setMultiplicity(this.multiplicity) ->
					p.setOrdered(this.ordered) ->
					p.setUnique(this.unique)
				) ->
				o.addInternalStereotype("http://www.genesez.de/SetterOperation") ->
			this.setTaggedValue("accessor", "setter", "false")
			this.hasTaggedValue("accessor", "getter", "false") && this.hasTaggedValue("accessor", "setter", "false")
				? this.removeAccessorStereotype()
				: "" */
		)
		: "";