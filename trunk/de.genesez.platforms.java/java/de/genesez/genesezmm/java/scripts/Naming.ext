//	based on genesez meta model
import genesezMM;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public extend functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats a name of a package according naming convention
 * @param	s	name of a package
 * @return	name of a package
 */
String asPackageName(String s) :
	s.toLowerCase();

/**
 * formats a name of a classifier according naming convention
 * @param	s	name of a classifier
 * @return	name of a classifier
 */
String asClassifierName(String s) :
	s.toFirstUpper();

/**
 * formats a name of an attribute according naming convention
 * @param	s	name of an attribute
 * @return	name of the attribute
 */
String asAttributeName(MAttribute a) :
	a.final
		? asConstantName(a.name)
		: asVariableName(a.name);

/**
 * formats a name of a variable according naming convention
 * @param	s	name of a variable
 * @return	name of a variable
 */
String asVariableName(String s) :
	s.toFirstLower();

/**
 * formats a name of a constant according naming convention
 * @param	s	name of a constant
 * @return	name of a constant
 */
String asConstantName(String s) :
	s.toUpperCase();

/**
 * formats a name of an operation according naming convention
 * @param	s	name of a operation
 * @return	name of a operation
 */
String asOperationName(String s) :
	s.toFirstLower();

/**
 * formats a name of a parameter according naming convention
 * @param	s	name of a parameter
 * @return	name of a parameter
 */
String asParameterName(String s) : 
	s.toFirstLower();

/**
 * formats a name as a getter method according naming convention
 * @param	s	name of an attribute/method
 * @return	name as getter method
 */
String asGetter(String s) :
	"get" + s.toFirstUpper();

/**
 * formats a name as a setter method according naming convention
 * @param	s	name of an attribute/method
 * @return	name as setter method
 */
String asSetter(String s) :
	"set" + s.toFirstUpper();

/**
 * formats a name of a getter method which returns an iterator according naming convention
 * @param	s	name of an attribute/method
 * @return	name of a getter method which returns an iterator
 */
String asIterator(String s) :
	asGetter(s) + "Iterator";

/**
 * formats a name of a method used to insert something in a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the insert-in method
 */
String asInsertIn(String s) :
	"insertIn" + s.toFirstUpper();

/**
 * formats a name of a method used to add something to a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the add-to method
 */
String asAddTo(String s) :
	"addTo" + s.toFirstUpper();

/**
 * formats a name of a method used to remove something from a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the remove-from method
 */
String asRemoveFrom(String s) :
	"removeFrom" + s.toFirstUpper();

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public java functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private extend functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private java functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
