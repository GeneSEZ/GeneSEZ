
«REM»
	handles associations
«ENDREM»

«REM» import code gen meta model «ENDREM»
«IMPORT codegenMm»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION util»
«EXTENSION naming»


«REM» -- - - - - - - - - - - - - - - - - - - - - - - - - - - - -- «ENDREM»

«REM»
	generate association attribute declarations, and
	accessor methods for class association attributes
«ENDREM»
«DEFINE Root FOR MClass»
	// -- declare association attributes ----------------------------
	«EXPAND AssAttrDecl FOREACH associationEnd»
	// -- adding to and removing from association -------------------
	«EXPAND AssAttrGetSetImpl FOREACH associationEnd»
	// -- various ways to access the association --------------------
	«EXPAND AssAttrAccessImpl FOREACH associationEnd»
«ENDDEFINE»


«REM» -- - - - - - - - - - - - - - - - - - - - - - - - - - - - -- «ENDREM»

«REM»
	generate attribute declarations for each association
«ENDREM»
«DEFINE AssAttrDecl FOR MAssociationEnd»
«IF multiplicity == 1-»
	private «this.type» «asAttribName(name)-»;
	«ELSE»
	private java.util.Set<«type»> «asAttribName(name)-»
 = new java.util.HashSet<«type»>();
«ENDIF-»
«ENDDEFINE»

«REM»
	generate accessores for association attributes
	accessors are generated as public
		insertInXxx
		removeFromXxx
		getXxxs
		setXxxs
«ENDREM»
«DEFINE AssAttrGetSetImpl FOR MAssociationEnd»
	«REM» generate insertInXxx method «ENDREM»
	public void insertIn«name.toFirstUpper()-»(«type» _in) {
	«IF multiplicity == 1-»
		«REM» check if attribute is already set to param «ENDREM»
		if («asAttribName(name)» == _in) {
			return;
		}
		«REM» if exist, break inverse association «ENDREM»
		«IF opposite != null-»
			if («asAttribName(name)» != null) {
				«asAttribName(name)».removeFrom«opposite.name.toFirstUpper()»(this);
			}
		«ENDIF-»
		«REM» set association attribute to param «ENDREM»
		«asAttribName(name)» = _in;
	«ELSE»
		«REM» check if attribute already contains param «ENDREM»
		if («asAttribName(name)».contains(_in)) {
			return;
		}
		«REM» add param to association attribute «ENDREM»
		«asAttribName(name)».add(_in);
	«ENDIF»
	«REM» synchronize inverse association «ENDREM»
	«IF opposite != null»
		_in.insertIn«opposite.name.toFirstUpper()»(this);
	«ENDIF»
	}
	
	«REM» generate removeFromXxx method «ENDREM»
	public void removeFrom«name.toFirstUpper()-»
	(«type» _ex) {
	«IF multiplicity == 1»
		«REM» check if attribute is set to param «ENDREM»
		if («asAttribName(name)» != _ex) {
			return;
		}
		«REM» remove param from association attribute «ENDREM»
		«asAttribName(name)» = null;
	«ELSE»
		«REM» check if attribute contains param «ENDREM»
		if (! «asAttribName(name)».contains(_ex)) {
			return;
		}
		«REM» remove param from association attribute «ENDREM»
		«asAttribName(name)».remove(_ex);
	«ENDIF»
	«REM» synchronize inverse association «ENDREM»
	«IF opposite!= null»
		_ex.removeFrom«opposite.name.toFirstUpper()»(this);
	«ENDIF»
	}
«ENDDEFINE»
	
	«REM» generate getter for association attributes «ENDREM»
	
«DEFINE AssAttrAccessImpl FOR MAssociationEnd»
	«IF multiplicity == 1»
	public «type» «asGetter(name)»() {
		return «asAttribName(name)»;
	}
	«ELSE»
	public java.util.Set<«type»> «asGetter(name)»() {
		return java.util.Collections.unmodifiableSet(«asAttribName(name)»);
	}
	public «type»[] «asGetter(name)»Array() {
		return «asAttribName(name)».toArray(new «type»[0]);
	}
	public java.util.Iterator<«type»> «asGetter(name)»Iterator() {
		return «asAttribName(name)».iterator();
	}
	public int «asGetter(name)»Count() {
		return «asAttribName(name)».size();
	}
	«ENDIF»
«ENDDEFINE»
