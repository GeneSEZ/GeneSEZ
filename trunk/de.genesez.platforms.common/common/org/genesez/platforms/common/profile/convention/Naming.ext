/**
 * Naming conventions for Profile generation.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-07-20
 */

// based on genesez meta model
import gcore;

extension org::genesez::platforms::common::profile::workflow::GlobalVar;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GLOBAL script name conventions for classifiers
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

private String asScriptName(MClass this) :
	name.replaceFirst(globalVarStereotypeNamePrefix(), "").toFirstUpper();
	

private String asScriptName(MEnumeration this) :
	name.replaceFirst(globalVarEnumerationNamePrefix(), "").toFirstUpper();


private String asScriptName(MClassifier this) :
	name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GLOBAL script name conventions for attributes and literals
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/**
 * Formats an attribute name as a normal attribute.
 * 
 * @return	the formatted attribute name
 */
private String asScriptName(MAttribute this) : 
	name.toFirstUpper();


/**
 * Formats an literal name as a normal literal.
 * 
 * @return	the formatted literal name
 */
private String asScriptName(MLiteral this) :
	name.toLowerCase().split("_").collect( e | e.toFirstUpper() ).toString("");
	

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	script name conventions for profile
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asProfileScriptName(MClassifier this) :
	"pr" + asScriptName();


String asProfileScriptName(MAttribute this) :
	classifier.asProfileScriptName() + asScriptName(); 


String asProfileScriptName(MLiteral this) :
	owningEnumeration.asProfileScriptName() + asScriptName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	script name conventions for access helper
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asAccessHelperHasStereotype(MClassifier this) :
	"has" + asScriptName() + "Stereotype";


String asAccessHelperHasTaggedValue(MClassifier this) :
	"has" + asScriptName() + "TaggedValue";


String asAccessHelperHasTaggedValue(MAttribute this) :
	"has" + classifier.asScriptName() + asScriptName();
	

String asAccessHelperHasUtilizableTaggedValue(MAttribute this) :
	"has" + classifier.asScriptName() + "Utilizable" + asScriptName();


String asAccessHelperGetTaggedValue(MAttribute this) :
	"get" + classifier.asScriptName() + asScriptName();


String asAccessHelperSetTaggedValue(MAttribute this) :
	"set" + classifier.asScriptName() + asScriptName();
	
	
String asAccessHelperIsTaggedValue(MAttribute this, MLiteral l) :
	"is" + classifier.asScriptName() + asScriptName() + l.asScriptName();
