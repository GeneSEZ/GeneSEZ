«IMPORT gcore»
«REM»
	Performs the generation of a access helper file.
	
	@author	Nico Herbig <nico.herbig@fh-zwickau.de>
	@date	2011-07-20
«ENDREM»

«EXTENSION org::genesez::platforms::common::AccessHelper»
«EXTENSION org::genesez::platforms::common::m2t::Helper»

«EXTENSION org::genesez::platforms::common::profile::convention::Naming»
«EXTENSION org::genesez::platforms::common::profile::workflow::GlobalVar»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«DEFINE Root FOR MModel -»
«FILE globalVarAccessHelperFileName() -»
«EXPAND Comment::AccessHelperFile -»

// based on genesez meta model
import gcore;

// use common access helper scripts
extension org::genesez::platforms::common::AccessHelper;

// use profile scripts
extension «globalVarXtendFilePath() -»::«globalVarProfileFileName().replaceFirst(".ext", "") -»;

«EXPAND StereotypeElement FOREACH allClassifiers().typeSelect(MClass).sortBy(e | e.name) -»
«ENDFILE -»
«ENDDEFINE»


«DEFINE StereotypeElement FOR MClass -»
«EXPAND Comment::StereotypeSection -»

«EXPAND HasStereotype -»
«EXPAND HasTaggedValue -»
«FOREACH property.typeSelect(MAttribute).sortBy(e | e.name) AS a -»
	«EXPAND Comment::TaggedValueSection FOR a -»
	
	«EXPAND HasTaggedValue FOR a -»
	«EXPAND HasUtilizableTaggedValue FOR a -»
	«EXPAND GetTaggedValue FOR a -»
	«EXPAND SetTaggedValue FOR a -»
	«REM»«EXPAND IsTaggedValue  FOR a -»«ENDREM»«"" -»
«ENDFOREACH -»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«DEFINE HasStereotype FOR MClass -»
«EXPAND Comment::HasStereotype -»
boolean «asAccessHelperHasStereotype() -»(MElement this) :
	hasStereotype( «asProfileScriptName() -»() );

«ENDDEFINE»


«DEFINE HasTaggedValue FOR MClass -»
«IF hasAttributes() -»
«EXPAND Comment::HasTaggedValue -»
boolean «asAccessHelperHasTaggedValue() -»(MElement this, String tag, String value) :
	hasTaggedValue( «asProfileScriptName() -»(), tag, value );
	
«ENDIF -»
«ENDDEFINE»


«DEFINE HasTaggedValue FOR MAttribute -»
«EXPAND Comment::HasTaggedValue -»
boolean «asAccessHelperHasTaggedValue() -»(MElement this, String value) :
	hasTaggedValue( «classifier.asProfileScriptName() -»(), «asProfileScriptName() -»(), value );

«ENDDEFINE»


«DEFINE HasUtilizableTaggedValue FOR MAttribute -»
«EXPAND Comment::HasUtilizableTaggedValue -»
boolean «asAccessHelperHasUtilizableTaggedValue() -»(MElement this) :
	hasUtilizableValue( «classifier.asProfileScriptName() -»(), «asProfileScriptName() -»() );
«ENDDEFINE»


«DEFINE GetTaggedValue FOR MAttribute -»
«EXPAND Comment::GetTaggedValue -»
«IF isSingleValuedType() -»
String «asAccessHelperGetTaggedValue() -»(MElement this) :
	getTaggedValue( «classifier.asProfileScriptName() -»(), «asProfileScriptName() -»() );
«ELSE -»
List[String] «asAccessHelperGetTaggedValue() -»(MElement this) : 
	getTaggedListValue( «classifier.asProfileScriptName() -»(), «asProfileScriptName() -»() );
«ENDIF -»

«ENDDEFINE»


«DEFINE SetTaggedValue FOR MAttribute -»
«EXPAND Comment::SetTaggedValue -»
Void «asAccessHelperSetTaggedValue() -»(MElement this, String value) :
	setTaggedValue( «classifier.asProfileScriptName() -»(), «asProfileScriptName() -»(), value );

«ENDDEFINE»


«DEFINE IsTaggedValue FOR MAttribute -»
«IF type.isEnumeration() -»
«FOREACH ((MEnumeration)type).literal AS l -»
«EXPAND Comment::IsTaggedValue(l) -»
boolean «asAccessHelperIsTaggedValue(l) -»(MElement this) :
	hasTaggedValue( «classifier.asProfileScriptName() -»(), «asProfileScriptName() -»(), «l.asProfileScriptName() -»() );

«ENDFOREACH -»
«ENDIF -»
«ENDDEFINE»