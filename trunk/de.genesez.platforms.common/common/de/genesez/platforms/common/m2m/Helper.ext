/*
	some useful functions for M2M transformations
*/

import gcore;
extension de::genesez::platforms::common::log::Log;
extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::m2m::CreateTemplate;


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//	returns the full qualified name of the given class
String getFullQualifiedName(MClass c) :
	c.owningPackage.getFullQualifiedName() + "." + c.name;
	
//	returns the full qualified name of the given package
String getFullQualifiedName(MPackage p) :
	p.nestingPackage == null ?
		p.name :
		p.nestingPackage.getFullQualifiedName() + "." + p.name;
	
	
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
//	clones the given package structure from orig to model
//	preserves the xmiguid
MPackage clonePackageStructure(MModel model, MModel orig, String fullQualifiedPackage) :
	//	obtain package specified with package path and clone it
	getPackage(orig, fullQualifiedPackage).clonePlainPackage(model) ->
	true;
	
//	recursive helper function for 'clonePackageStructure'
private MPackage clonePlainPackage(MPackage orig, MPackage container) :
	container.metaType == MModel
		//	root package
		? createMPackage(container, orig.xmiGuid, orig.name)
		//	nested package
		: createMPackage(orig.nestingPackage.clonePlainPackage(container), orig.xmiGuid, orig.name)
	;
	
/*
	creates all packages in the given package path
	- links the packages
	- links the root package to the model element
	- sets the package name as xmiGuid
*/
boolean createPackageStructure(MModel model, String fullQualifiedPackage) :
	fullQualifiedPackage.splitIntoPackages().createPlainPackage(
		model,
		fullQualifiedPackage
	);
	
//	recursive helper function for 'createPackageStructure'
private MPackage createPlainPackage(String package, MModel model, String packagePath) :
	getParentPackage(package, packagePath, model) == model ?
		//	root package
		createMPackage(model, package, package) :
		//	nested package
		createMPackage(
			//	create parent package
			createPlainPackage(
				//	parent package name exists because it's a nested package
				(String)getParentPackage(package, packagePath, model), 
				model, 
				packagePath),
			package,
			package
		)
	;
	
	
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
/*
	returns the name of the parent package in a package path as String
	- if the given package is not contained, the given default return is returned
	- if no parent package exists, the given default return is returned
*/
Object getParentPackage(String packageName, String fullQualifiedPackage, Object defaultReturn) :
	switch (fullQualifiedPackage.splitIntoPackages().indexOf(packageName)) {
		case -1 : defaultReturn
		case 0 : defaultReturn
		default : 
			fullQualifiedPackage.splitIntoPackages().get(
				fullQualifiedPackage.splitIntoPackages().indexOf(packageName) -1)
	}
	;
	
	
//	returns the packages in the package path as a list
cached List[String] splitIntoPackages(String fullQualifiedPackage) :
	JAVA de.genesez.platforms.common.m2m.TransUtils.splitIntoPackages(java.lang.String);
	
	