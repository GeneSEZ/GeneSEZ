/**
 * Helper functions for conversions for easier code generation
 * 
 * @author	nico herbig
 * @author	tobias haubold (last)
 * @date	2008-04-18
 */

// based on genesez meta model
import gcore;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for a comma separated string of element names
 * @param	l	list of model elements of type MElement
 * @return	comma blank (', ') separated list of element names or an empty string
 */
String getNameList(List[MElement] l) :
	l.size > 1 
		? ((MElement) l.first()).name + ", " + getNameList(l.withoutFirst())
		: (l.size > 0
			? ((MElement) l.first()).name
			: "");

/**
 * getter for a comma separated string of generic specifications
 * @param	l	list of model elements of type MGeneric
 * @return	comma blank (', ') separated list of generic specifications
 */
String getGenericList(List[MGeneric] l) :
	l.size > 1 
		? ((MGeneric) l.first()).specification + ", " + getGenericList(l.withoutFirst())
		: (l.size > 0
			? ((MGeneric) l.first()).specification
			: "");

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	file names, file paths + directory paths
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for the filename of a classifier and only the filename without path
 * @param	prefix			the prefix to add to the name of the classifier
 * @param	suffix			the suffix to add to the name of the classifier
 * @param	fileExtension	the file extension including the beginning dot
 * @return	the file name of the classifier
 */
String fileName(MClassifier this, String prefix, String suffix, String fileExtension) :
	prefix + name.toFirstUpper() + suffix + fileExtension;

/**
 * getter for the filename of a classifier based on it's basename
 * @param	basename		the name of a classifier, e.g. name after typemapping
 * @param	prefix			the prefix to add to the name of the classifier
 * @param	suffix			the suffix to add to the name of the classifier
 * @param	fileExtension	the file extension including the beginning dot
 * @return	the file name of the classifier
 */
String fileName(String basename, String prefix, String suffix, String fileExtension) :
	prefix + basename.toFirstUpper() + suffix + fileExtension;

/**
 * getter for the path of a classifier based on it's namespace
 * @return	the path of the classifier
 */
String dirName(MClassifier this) :
	fullQualifiedName(owningPackage, fileSeparator());

/**
 * getter for the path of a classifier based on it's namespace
 * @param	base	the base path of the classifier
 * @return	the path of the classifier
 */
String dirName(MClassifier this, String base) :
	base + fileSeparator() + fullQualifiedName(owningPackage, fileSeparator());

/**
 * getter for the full filename of a classifier based on it's name, including path
 * @param	prefix			the prefix to add to the name of the classifier
 * @param	suffix			the suffix to add to the name of the classifier
 * @param	fileExtension	the file extension including the beginning dot
 * @return	the full file name of the classifier including the path
 * @see		dirName(MClassifier)
 * @see		fileName(MClassifier, String, String, String)
 */
String filePath(MClassifier this, String prefix, String suffix, String fileExtension) :
	dirName() + fileSeparator() + fileName(prefix, suffix, fileExtension);

/**
 * getter for the full filename of a classifier based on the given basename, including path
 * @param	basename		the name of the classifier, e.g. name after typemapping
 * @param	prefix			the prefix to add to the name of the classifier
 * @param	suffix			the suffix to add to the name of the classifier
 * @param	fileExtension	the file extension including the beginning dot
 * @return	the full file name of the classifier including the path
 * @see		dirName(MClassifier)
 * @see		fileName(String, String, String, String)
 */
String filePath(MClassifier this, String basename, String prefix, String suffix, String fileExtension) :
	dirName() + fileSeparator() + fileName(basename, prefix, suffix, fileExtension);

/**
 * getter for the full filename of a classifier based on it's name, including path
 * @param	basePath		the base path which is prepended on the namespace
 * @param	prefix			the prefix to add to the name of the classifier
 * @param	suffix			the suffix to add to the name of the classifier
 * @param	fileExtension	the file extension including the beginning dot
 * @return	the full file name of the classifier including the path
 * @see		dirName(MClassifier, String)
 * @see		fileName(MClassifier, String, String, String)
 */
String filePath(MClassifier this, String basePath, String prefix, String suffix, String fileExtension) :
	dirName(basePath) + fileSeparator() + fileName(prefix, suffix, fileExtension);

/**
 * getter for the full filename of a classifier based on the given basename, including path
 * @param	basename		the name of the classifier, e.g. name after typemapping
 * @param	basePath		the base path which is prepended on the namespace
 * @param	prefix			the prefix to add to the name of the classifier
 * @param	suffix			the suffix to add to the name of the classifier
 * @param	fileExtension	the file extension including the beginning dot
 * @return	the full file name of the classifier including the path
 * @see		dirName(MClassifier, String)
 * @see		fileName(String, String, String, String)
 */
String filePath(MClassifier this, String basename, String basePath, String prefix, String suffix, String fileExtension) :
	dirName(basePath) + fileSeparator() + fileName(basename, prefix, suffix, fileExtension);

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for the full qualified name of a classifier
 * @param	base		the base package to prepend
 * @param	spearator	the separator to use between the names
 * @return	string representation of the full qualified name
 */
String fullQualifiedName(MClassifier this, String base, String separator) : 
	base + separator + owningPackage.fullQualifiedName(separator) + separator + name;

/**
 * getter for the full qualified name of a classifier based on the given name
 * @param	name		the name of the classifier to use, e.g. after typemapping
 * @param	base		the base package to prepend
 * @param	spearator	the separator to use between the names
 * @return	string representation of the full qualified name
 */
String fullQualifiedName(MClassifier this, String name, String base, String separator) : 
	base + separator + owningPackage.fullQualifiedName(separator) + separator + name;

/**
 * getter for the separator within a file name
 * @return	the separator for directories in file names
 */
String fileSeparator() : "/";

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	java function
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for the package path of a classifier
 * @param	pkg			a package
 * @param	separator	a separator used to build the package path
 * @return	string representation of the package path
 */
String fullQualifiedName(MPackage pkg, String separator) : 
	JAVA de.genesez.platforms.common.Conversion.getFullQualifiedName(de.genesez.metamodel.gcore.MPackage, java.lang.String);

