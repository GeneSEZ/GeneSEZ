«REM»
	Template for ejb3-Association
	
	@author		tobias haubold (old association handling)
	@author		andre pflueger
	@date		2008/09/04

«ENDREM»

«REM» based on genesez meta model «ENDREM»
«IMPORT gcore»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::platforms::common::log::Log»

«EXTENSION de::genesez::platforms::common::AccessHelper»
«EXTENSION de::genesez::platforms::common::Conversion»
«EXTENSION de::genesez::platforms::common::GeneralHelper»
«EXTENSION de::genesez::platforms::common::typemapping::TypeMapping»

«EXTENSION de::genesez::platforms::java::scripts::Type»
«EXTENSION de::genesez::platforms::java::scripts::Naming»
«EXTENSION de::genesez::platforms::java::scripts::Conversion»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::Conversion»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::Naming»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::Stereotypes»


«REM»
	public functions
«ENDREM»


«REM»
	generate attributes for a class
«ENDREM»
«DEFINE AssociationDecl FOR MClass-»
	«REM»«EXPAND _AssocClassReferences FOR ownedAssociation-»«ENDREM»
	«EXPAND AssociationDecl FOREACH property.typeSelect(MAssociationRole)-»
«ENDDEFINE»

«REM»
	generate attributes for a classifier
«ENDREM»
«DEFINE AssociationDecl FOR MClassifier-»
	«EXPAND AssociationDecl FOREACH property.typeSelect(MAssociationRole)-»
«ENDDEFINE»

«REM»
	generate a declaration for an attribute
«ENDREM»
«DEFINE AssociationDecl FOR MAssociationRole-»
	«EXPAND _CommentAssociation-»
	«IF isPlainAssociation()-»
		«EXPAND _Annotation-»
		«IF multiplicity == 1-»
			«EXPAND _Modifier» «type.asTypeName()-» «asAttribute()-»;
		«ELSE-»
			«REM»//Stereotypen: «this.stereotype»«ENDREM»
			«IF !hasStereotype("ejb3Association")-»
				@org.hibernate.annotations.CollectionOfElements
			«ENDIF-»
			«EXPAND _Modifier» «mapType()»<«type.asTypeName()-»> «asAttribute()» = new «mapType("Implementation")»<«type.asTypeName()-»>();
		«ENDIF-»
	«ELSE-»
		«REM»«EXPAND _Modifier» «mapType()»<«type.asTypeName()-»> «asAttribute()» = new «mapType("Implementation")»<«type.asTypeName()-»>();«ENDREM»
	«ENDIF»
«ENDDEFINE»


«REM»
	private functions
«ENDREM»


«REM» 
	evaluates the associations
«ENDREM»
«DEFINE _Annotation FOR MAssociationRole-»
	«IF hasStereotype("ejb3Association")-»
		«EXPAND _AssociationStereotypeExists-»
	«ELSE-»
		«EXPAND _AssociationStereotypeNotExists-»
	«ENDIF»
	«EXPAND _JoinColumn-»
«ENDDEFINE»

«REM»
	evaluates association stereotype
«ENDREM»
«DEFINE _AssociationStereotypeExists FOR MAssociationRole-»
	«IF !hasTaggedValue("ejb3Association", "associationType", "AutoDetect") && !hasTaggedValue("ejb3Association", "associationType", "")-»
		«REM»
			evaluation is easy if stereotype "ejb3Association" and 
			tagged value "associationType" are set 
		«ENDREM»		
		«IF hasTaggedValue("ejb3Association", "associationType", "OneToOne")»
			@OneToOne«EXPAND _EvaluateAssociationTaggedValues-»
		«ENDIF»
		
		«IF hasTaggedValue("ejb3Association", "associationType", "OneToMany")»
			@OneToMany«EXPAND _EvaluateAssociationTaggedValues-»
			«EXPAND _JoinTable»
		«ENDIF»
		
		«IF hasTaggedValue("ejb3Association", "associationType", "ManyToOne")»
			@ManyToOne«EXPAND _EvaluateAssociationTaggedValues-»
			«EXPAND _JoinTable»
		«ENDIF»
		
		«IF hasTaggedValue("ejb3Association", "associationType", "ManyToMany")»
			@ManyToMany«EXPAND _EvaluateAssociationTaggedValues-»
			«EXPAND _JoinTable»
		«ENDIF»			
	«ELSEIF opposite != null-»
		«REM» 
			even with existing stereotype "ejb3Association" the tagged value
			"associationType" does not have to be set if association is bidirectional.
			check if opposite has an association stereotype
		«ENDREM»
		«IF !opposite.hasStereotype("ejb3Association")-»
			«REM»
				opposite has no stereotype "ejb3Association"
				set necessary annotation and add value to tagged value "associationType" for easy
				evaluation of the opposite association later in the generation process. 
			«ENDREM»
			«IF multiplicity == 1-»
				«IF opposite.multiplicity == 1-»
					«setTaggedValue(this, "associationType", "OneToOne") ->""-»
				«ELSE-»
					«setTaggedValue(this, "associationType", "ManyToOne") ->""-»					
				«ENDIF-»
			«ELSE-»
				«IF opposite.multiplicity == 1-»
					«setTaggedValue(this, "associationType", "OneToMany") ->""-»
				«ELSE-»
					«setTaggedValue(this, "associationType", "ManyToMany") ->""-»	
				«ENDIF-»				
			«ENDIF-»
			@«taggedValue.selectFirst(e|e.tag.name == "associationType").value-»«EXPAND _EvaluateAssociationTaggedValues-»
			«IF !hasTaggedValue("ejb3Association", "associationType", "OneToOne")-»
				«EXPAND _JoinTable»
			«ENDIF-»
		«ELSE-»
			«REM»
				only one side of the association (the opposite) have been provided with an stereotype
				by the user, so let's find out what has to be annotated on this side of the association
			«ENDREM»
			«EXPAND _EvaluateOppositeStereotype-»
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«REM»
	evaluates association to generate annotations automatically
«ENDREM»
«DEFINE _AssociationStereotypeNotExists FOR MAssociationRole-»
	«REM»
		MAssociationRole has no association stereotype 
		automatic annotation, not possible for unidirectional association because 
		opposite attribute is not available and can not be evaluated
	«ENDREM»
	«IF opposite != null-»
		«REM»
			bidirectional
			check if opposite has an association stereotype
		«ENDREM»
		«IF !opposite.hasStereotype("ejb3Association")-»
			«REM»
				opposite has no stereotype "ejb3Association"
				set necessary annotation and add stereotype to the opposite for easy
				evaluation of the opposite association later in the generation process. 
				Generation can not have been there because in this case this association 
				site would have had a stereotype. Tagged value "mappedBy" is set on this 
				site thus no "mappedBy" is set to the new stereotype (exception: @ManyToOne)
			«ENDREM»
			«IF multiplicity == 1-»
				«IF opposite.multiplicity == 1-»
					«addAssociationStereotype(this, "OneToOne", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
					@OneToOne«EXPAND _EvaluateAssociationTaggedValues-»
					«addAssociationStereotype(opposite, "OneToOne", "null", "[]", "DEFAULT", "true", "null") ->""-»
					«EXPAND _JoinTable»
				«ELSE-»
					«addAssociationStereotype(this, "OneToMany", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
					@OneToMany«EXPAND _EvaluateAssociationTaggedValues-»
					«addAssociationStereotype(opposite, "ManyToOne", "null", "[]", "DEFAULT", "true", "null") ->""-»
					«EXPAND _JoinTable»
				«ENDIF-»
			«ELSE-»
				«IF opposite.multiplicity == 1-»
					«addAssociationStereotype(this, "ManyToOne", "null", "[]", "DEFAULT", "true", "null") ->""-»
					@ManyToOne«EXPAND _EvaluateAssociationTaggedValues-»
					«addAssociationStereotype(opposite, "OneToMany", "null", "[]", "DEFAULT", "true", asAttribute()) ->""-»
					«EXPAND _JoinTable»			
				«ELSE-»
					«addAssociationStereotype(this, "ManyToMany", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
					@ManyToMany«EXPAND _EvaluateAssociationTaggedValues-»
					«addAssociationStereotype(opposite, "ManyToMany", "null", "[]", "DEFAULT", "true", "null") ->""-»
					«EXPAND _JoinTable»
				«ENDIF-»				
			«ENDIF-»
		«ELSE-»
			«REM»
				only the opposite of the association have been provided with an stereotype by the
				user, so let's find out what has to be annotated on this side of the association
			«ENDREM»
			«EXPAND _EvaluateOppositeStereotype-»
		«ENDIF-»		
	«ENDIF»
«ENDDEFINE»

«REM»
	evaluates stereotype "ejb3Association", tagged value "associationType" and "mappedBy"
«ENDREM»
«DEFINE _EvaluateOppositeStereotype FOR MAssociationRole-»
	«IF 	opposite.hasTaggedValue("ejb3Association", "associationType", "AutoDetect") || 
			opposite.hasTaggedValue("ejb3ASsociation", "associationType", "")-»
		«IF multiplicity == 1-»
			«IF opposite.multiplicity == 1-»
				«IF (opposite.hasTaggedValue("ejb3Association", "mappedBy", "null") || opposite.hasTaggedValue("ejb3Association", "mappedBy", ""))-»	
					«IF hasStereotype("ejb3Association")-»
						«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
					«ELSE-»
						«addAssociationStereotype(this, "OneToOne", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
					«ENDIF-»	
				«ENDIF-»	
				«setTaggedValue(opposite, "associationType", "OneToOne") ->""-»
				@OneToOne«EXPAND _EvaluateAssociationTaggedValues-»
			«ELSE-»
				«IF !hasStereotype("ejb3Association")-»
					«addAssociationStereotype(this, "ManyToOne", "null", "[]", "DEFAULT", "true", "null") ->""-»
				«ENDIF-»	
				«setTaggedValue(opposite, "associationType", "OneToMany") ->""-»
				«setTaggedValue(opposite, "mappedBy", asAttribute()) ->""-»
				@ManyToOne«EXPAND _EvaluateAssociationTaggedValues-»
				«EXPAND _JoinTable»
			«ENDIF-»
		«ELSE-»
			«IF opposite.multiplicity == 1-»
				«IF (opposite.hasTaggedValue("ejb3Association", "mappedBy", "null") || opposite.hasTaggedValue("ejb3Association", "mappedBy", ""))-»	
					«IF hasStereotype("ejb3Association")-»
						«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
					«ELSE-»
						«addAssociationStereotype(this, "OneToMany", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
					«ENDIF-»
				«ENDIF-»
				«setTaggedValue(opposite, "associationType", "ManyToOne") ->""-»
				@OneToMany«EXPAND _EvaluateAssociationTaggedValues-»		
				«EXPAND _JoinTable»
			«ELSE-»
				«IF (opposite.hasTaggedValue("ejb3Association", "mappedBy", "null") || opposite.hasTaggedValue("ejb3Association", "mappedBy", ""))-»	
					«IF hasStereotype("ejb3Association")-»
						«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
					«ELSE-»
						«addAssociationStereotype(this, "ManyToMany", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
					«ENDIF-»
				«ENDIF-»
				«setTaggedValue(opposite, "associationType", "ManyToMany") ->""-»
				@ManyToMany«EXPAND _EvaluateAssociationTaggedValues-»
				«EXPAND _JoinTable»
			«ENDIF-»				
		«ENDIF-»	
	«ELSE-»
		«IF opposite.hasTaggedValue("ejb3Association", "associationyType", "OneToOne")-»
			«IF (opposite.hasTaggedValue("ejb3Association", "mappedBy", "null") || opposite.hasTaggedValue("ejb3Association", "mappedBy", ""))-»
				«IF hasStereotype("ejb3Association")-»
					«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
				«ELSE-»
					«addAssociationStereotype(this, "OneToOne", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
				«ENDIF-»
			«ELSE-»
				«addAssociationStereotype(this, "OneToOne", "null", "[]", "DEFAULT", "true", "null") ->""-»
			«ENDIF-»		
			@OneToOne«EXPAND _EvaluateAssociationTaggedValues-»
		«ELSEIF opposite.hasTaggedValue("ejb3Association", "associationType", "OneToMany")-»
			«IF !hasStereotype("ejb3Association")-»
				«addAssociationStereotype(this, "ManyToOne", "null", "[]", "DEFAULT", "true", "null") ->""-»
			«ENDIF-»	
			@ManyToOne«EXPAND _EvaluateAssociationTaggedValues-»			
			«EXPAND _JoinTable»
		«ELSEIF opposite.hasTaggedValue("ejb3Association", "associationType", "ManyToOne")-»
			«IF (opposite.hasTaggedValue("ejb3Association", "mappedBy", "null") || opposite.hasTaggedValue("ejb3Association", "mappedBy", ""))-»
				«IF hasStereotype("ejb3Association")-»
					«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
				«ELSE-»
					«addAssociationStereotype(this, "OneToMany", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
				«ENDIF-»	
			«ELSE-»
				«addAssociationStereotype(this, "OneToMany", "null", "[]", "DEFAULT", "true", "null") ->""-»
			«ENDIF-»		
			@OneToMany«EXPAND _EvaluateAssociationTaggedValues-»
			«EXPAND _JoinTable»
		«ELSEIF opposite.hasTaggedValue("ejb3Association", "associationType", "ManyToMany")-»
			«IF (opposite.hasTaggedValue("ejb3Association", "mappedBy", "null") || opposite.hasTaggedValue("ejb3Association", "mappedBy", ""))-»
				«IF hasStereotype("ejb3Association")-»
					«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
				«ELSE-»
					«addAssociationStereotype(this, "ManyToMany", "null", "[]", "DEFAULT", "true", opposite.asAttribute()) ->""-»
				«ENDIF-»
			«ELSE-»
				«addAssociationStereotype(this, "ManyToMany", "null", "[]", "DEFAULT", "true", "null") ->""-»
			«ENDIF-»		
			@ManyToMany«EXPAND _EvaluateAssociationTaggedValues-»
			«EXPAND _JoinTable»			
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM»
	evaluates the taggedValues of the stereotype ejb3Association
«ENDREM»
«DEFINE _EvaluateAssociationTaggedValues FOR MAssociationRole-»
	(cascade={
	«IF (taggedValue.selectFirst(e|e.tag.name == "cascade").value != "[]" && taggedValue.selectFirst(e|e.tag.name == "cascade").value != "null")-»
		«FOREACH taggedValue.selectFirst(e|e.tag.name == "cascade").value.getElements() AS cascades SEPARATOR ", "-»
			CascadeType.«cascades-»
		«ENDFOREACH-»
	«ENDIF-»}
	«IF !hasTaggedValue("ejb3Association", "targetEntity", "null") && !hasTaggedValue("ejb3Association", "targetEntity", "null")-»
		, targetEntity="«taggedValue.selectFirst(e|e.tag.name == "targetEntity").value-»"
	«ENDIF-»
	«IF !hasTaggedValue("ejb3Association", "fetch", "DEFAULT") && !hasTaggedValue("ejb3Association", "fetch", "null")-»
		, fetch=FetchType.«taggedValue.selectFirst(e|e.tag.name == "fetch").value-»
	«ENDIF-»
	«IF (	hasTaggedValue("ejb3Association", "associationType", "OneToOne") && hasTaggedValue("ejb3Association", "optional", "false") )-»
		, optional=false
	«ENDIF-»
	«IF !hasTaggedValue("ejb3Association", "associationType", "ManyToOne")-»
		«IF !hasTaggedValue("ejb3Association", "mappedBy", "null") && 
			!hasTaggedValue("ejb3Association", "mappedBy", "")-»
			, mappedBy="«taggedValue.selectFirst(e|e.tag.name == "mappedBy").value-»"
		«ELSEIF opposite != null-»
			«IF opposite.hasStereotype("ejb3Association")-»
				«IF	opposite.hasTaggedValue("ejb3Association", "mappedBy", "null") || opposite.hasTaggedValue("ejb3Association", "mappedBy", "")-»
					«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
					, mappedBy="«taggedValue.selectFirst(e|e.tag.name == "mappedBy").value-»"			
				«ENDIF-»
			«ELSEIF hasStereotype("ejb3Association") && 
					(hasTaggedValue("ejb3Association", "mappedBy", "null") || 
					hasTaggedValue("ejb3Association", "mappedBy", "") )-»
				«setTaggedValue(this, "mappedBy", opposite.asAttribute()) ->""-»
				, mappedBy="«taggedValue.selectFirst(e|e.tag.name == "mappedBy").value-»"	
			«ENDIF-»	
		«ENDIF-»
	«ENDIF-»)
«ENDDEFINE»

«REM» 
	evaluates the stereotype ejb3JoinColumn 
«ENDREM»
«DEFINE _JoinColumn FOR MAssociationRole-»
	«IF hasStereotype("ejb3JoinColumn")»
		«IF !hasTaggedValue("ejb3JoinColumn", "name", "null")»
			@JoinColumn(name="«taggedValue.selectFirst(e|e.tag.name == "name").value-»"
			«IF !hasTaggedValue("ejb3JoinColumn", "referencedColumnName", "null")-»
				, referencedColumnName="«taggedValue.selectFirst(e|e.tag.name == "referencedColumnName").value-»"
			«ENDIF-»
			)
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«REM» 
	evaluates the stereotype ejb3JoinTable 
«ENDREM»
«DEFINE _JoinTable FOR MAssociationRole-»
	«IF hasStereotype("ejb3JoinTable")»
		«IF !hasTaggedValue("ejb3JoinTable", "name", "null")-»
			@JoinTable(name="«taggedValue.selectFirst(e|e.tag.name == "name").value-»"
			«IF !hasTaggedValue("ejb3JoinTable", "joinColumnsName", "null")-»
				, joinColumns=
				@JoinColumn(name="«taggedValue.selectFirst(e|e.tag.name == "joinColumnsName").value-»"
				«IF !hasTaggedValue("ejb3JoinTable", "joinColumnsReferencedColumnName", "null")-»
					, referencedColumnName="«taggedValue.selectFirst(e|e.tag.name == "joinColumnsReferencedColumnName").value-»"
				«ENDIF-»
				)
			«ENDIF-»
			«IF !hasTaggedValue("ejb3JoinTable", "inverseJoinColumnsName", "null")-»
				, inverseJoinColumns=
				@JoinColumn(name="«taggedValue.selectFirst(e|e.tag.name == "inverseJoinColumnsName").value-»"
				«IF !hasTaggedValue("ejb3JoinTable", "inverseJoinColumnsReferencedColumnName", "null")-»
					, referencedColumnName="«taggedValue.selectFirst(e|e.tag.name == "inverseJoinColumnsReferencedColumnName").value-»"
				«ENDIF-»
				)
			«ENDIF-»
			)
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«REM»
	functions from old association handling ( < GeneSEZ 1.5 )
	there are needed for the ejb3 cartridge 
«ENDREM»
«REM»
«DEFINE _AssocClassReferences FOR MAssociation-»
	«FOREACH end AS aend-»
		/** reference attribute to the managed association end */
		private «aend.type.asTypeName()-» «aend.asAttribute()-»;
	«ENDFOREACH-»
«ENDDEFINE»
«ENDREM»

«DEFINE _CommentAssociation FOR MAssociationRole-»
	/**
	 * variable for association to «this.type.asTypeName()»
	 */
«ENDDEFINE»

«REM»
	 generate modifiers for mclassifier
«ENDREM»
«DEFINE _Modifier FOR MAssociationRole-»
	«visibility-»
«ENDDEFINE»


«DEFINE AccessorDecl FOR MInterface-»
	«FOREACH property.typeSelect(MAssociationRole) AS a-»
		«EXPAND GetterDecl FOR a-»
		«EXPAND InsertInDecl FOR a-»
		«EXPAND RemoveFromDecl FOR a-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE AccessorImpl FOR MClass-»
	«REM»«EXPAND _AssocClassReferenceGetters FOR ownedAssociation-»«ENDREM»
	«FOREACH property.typeSelect(MAssociationRole) AS a-»
		«EXPAND GetterImpl FOR a-»
		«EXPAND InsertInImpl FOR a-»
		«EXPAND RemoveFromImpl FOR a-»
	«ENDFOREACH-»
«ENDDEFINE»

«REM»
	generate a getter declaration method for a MAssociationRole
«ENDREM»
«DEFINE GetterDecl FOR MAssociationRole-»
	«EXPAND _CommentGetter-»
	«IF isPlainAssociation()-»
		«IF multiplicity != 1-»
			public «mapType()»<«type.asTypeName()»> «asGetter()»();
		«ENDIF-»
	«ELSE-»
		public «mapType()»<«type.asTypeName()»> «asGetter()»();
		public «mapType()»<«type.asTypeName()»> «asGetter()»«type.asTypeName()»();
	«ENDIF-»
«ENDDEFINE»


// generate a getter implementation method for a MAssociationRole
«DEFINE GetterImpl FOR MAssociationRole-»
	«IF isPlainAssociation()-»
		«IF multiplicity == 1-»
			public «type.asTypeName()» «asGetter()»() {
				return «asAttribute()»;
			}
		«ELSE-»
			public «mapType()»<«type.asTypeName()»> «asGetter()»() {
				«IF unique == true-»
					return java.util.Collections.unmodifiableSet(«asAttribute()»);
				«ELSE-»
					return java.util.Collections.unmodifiableSet(«asAttribute()»);
				«ENDIF-»
			}
		«ENDIF-»
	«ELSE-»
		«REM»public «mapType()»<«type.asTypeName()»> «asGetter()»() {
			«mapType("Implementation")»<«type.asTypeName()»> _result = new «mapType("Implementation")»<«type.asTypeName()»>();
			for(«type.asTypeName()» _assoc : «asAttribute()») {
				_result.add(_assoc.«asGetter()»());
			}
			return _result;
		}
		
		/** 
		  * accessor to the association class objects
		  */
		public «mapType()»<«type.asTypeName()»> «asGetter()»«type.asTypeName()»() {
			«IF unique == true-»
				return java.util.Collections.unmodifiableSet(«asAttribute()»);
			«ELSE-»
				return java.util.Collections.unmodifiableSet(«asAttribute()»);
			«ENDIF-»
		}«ENDREM»
	«ENDIF-»
«ENDDEFINE»

// generate a insert in declaration method
«DEFINE InsertInDecl FOR MAssociationRole-»
	«EXPAND _CommentAccessor-»
	«IF isPlainAssociation()-»
		«IF multiplicity != 1-»
			public void «asInsertIn()-»(«type.asTypeName()» «asAttribute()-»);
		«ELSEIF multiplicity == 1»
			public void «asSetter()-»(«type.asTypeName()» «asAttribute()-»);
		«ENDIF»
	«ELSE-»
		«REM»public void «asInsertIn()»(«type.asTypeName()» _in, «type.asTypeName()» _at);«ENDREM»
	«ENDIF-»
«ENDDEFINE»


// generate a insert in implementation method
«DEFINE InsertInImpl FOR MAssociationRole-»
	«EXPAND _CommentAccessor-»
	«IF isPlainAssociation()-»
		«IF multiplicity != 1-»
			public void «asInsertIn()-»(«type.asTypeName()-» «asAttribute()-») {
				«IF multiplicity == 1-»
					if (this.«asAttribute()-» == «asAttribute()-») {
						return;
					}
					«IF opposite != null && opposite.multiplicity != 1-»
						if (this.«asAttribute()-» != null) {
							this.«asAttribute()-».«opposite.asRemoveFrom()-»(this);
						}
					«ENDIF-»
					this.«asAttribute()-» = «asAttribute()-»;
				«ELSE-»
					if (this.«asAttribute()-».contains(«asAttribute()-»)) {
						return;
					}
					this.«asAttribute()-».add(«asAttribute()-»);
				«ENDIF-»
				«IF opposite != null && opposite.multiplicity != 1 
					&& (opposite.hasTaggedValue("accessor", "setter", "true")
						|| !opposite.hasStereotype("accessor"))-»
					«asAttribute()-».«opposite.asInsertIn()-»(this);
				«ELSEIF opposite != null && opposite.multiplicity == 1 
						&& (opposite.hasTaggedValue("accessor", "setter", "true") 
							|| !opposite.hasStereotype("accessor"))-»
					«asAttribute()-».«opposite.asSetter()-»(this);
				«ENDIF-»
			}
		«ELSEIF multiplicity == 1»
			«EXPAND _CommentAccessor-»
			public void «asSetter()-»(«type.asTypeName()-» «asAttribute()-»){
				this.«asAttribute()-» = «asAttribute()-»; 
			}
		«ENDIF»
	«ELSE-»
		«REM»/**
		  * insert into association, generate linked association class object
		  * @param _other partner object
		  * @return newly generated linked association class object
		  */
		public «type.asTypeName()» «asInsertIn()»(«type.asTypeName()» _other) {
			«IF association.end.first() != this-»
				«type.asTypeName()» _assoc = new «type.asTypeName()»(this, _other);
			«ELSE-»
				«assocClass().mapName()» _assoc = new «type.asTypeName()»(_other, this);
			«ENDIF-»
			this.«asVariable()».add(_assoc);
		«IF opposite != null-»
			_other.«opposite.asInsertIn()»(_assoc); 
		«ENDIF-»
			return _assoc;
		}
		
		/**
		  * insert linked association class object into association
		  * @param _other partner object
		  * @return newly generated linked association class object
		  */
		public void «asInsertIn()»(«type.asTypeName()» _assoc) {
			if (this.«asAttribute()».contains(_assoc)) {
					return;
			}
			if(_assoc.«opposite.asGetter()»() != this) {
				throw new RuntimeException("inconsistent association object");
			}
			this.«asAttribute()».add(_assoc);
		}«ENDREM»
	«ENDIF-»
«ENDDEFINE»


// generate a remove from declaration method
«DEFINE RemoveFromDecl FOR MAssociationRole-»
	«EXPAND _CommentAccessor-»
	«IF multiplicity != 1-»
		public void «asRemoveFrom()-»(«type.asTypeName()-» «asAttribute()-»);
	«ENDIF»
«ENDDEFINE»


// generate a remove from implementation method
«DEFINE RemoveFromImpl FOR MAssociationRole-»
	«EXPAND _CommentAccessor-»
	«IF isPlainAssociation()-»
		«IF multiplicity != 1-»
			public void «asRemoveFrom()-»(«type.asTypeName()-» «asAttribute()-») {
				«IF multiplicity == 1-»
					if (this.«asAttribute()-» != «asAttribute()-») {
						return;
					}
					this.«asAttribute()-» = null;
				«ELSE-»
					if (!this.«asAttribute()-».contains(«asAttribute()-»)) {
						return;
					}
					this.«asAttribute()-».remove(«asAttribute()-»);
				«ENDIF-»
				«IF opposite != null && opposite.multiplicity != 1-»
					«asAttribute()-».«opposite.asRemoveFrom()-»(this);
				«ENDIF-»
			}
		«ENDIF»
	«ELSE-»
		«REM»/**
		  * remove entry from association indexed by its association class object
		  */
		public void «asRemoveFrom()»(«type.asTypeName()» _assoc) {
			if (!«asAttribute()».contains(_assoc)) {
				return;
			}
			«asAttribute()».remove(_assoc);
			«IF opposite != null-»
				_assoc.«asGetter()»().«opposite.asRemoveFrom()»(_assoc);
			«ENDIF-»
		}«ENDREM»
	«ENDIF-»
«ENDDEFINE»

«DEFINE _CommentGetter FOR MAssociationRole-»
	/**
	 * accessor for association to «name»
	«IF hasComment()-»
		 * «ownedComment.getCommentText()»
	«ENDIF-»
	 */
«ENDDEFINE»

«DEFINE _CommentAccessor FOR MAssociationRole-»
	/**
	 * accessor for association to «name»
	«IF hasComment()-»
	 	* @see {@link «asGetter()»}
	«ENDIF-»
	 */
«ENDDEFINE»

«REM»
«DEFINE _AssocClassReferenceGetters FOR MAssociation-»
	«FOREACH end AS aend-»
		/** getter of reference attribute to the managed association end  «aend.asVariable()»*/
		public «aend.type.asTypeName()» «aend.asGetter()»() {
			return «aend.asVariable()»;
		}
	«ENDFOREACH-»
«ENDDEFINE»
«ENDREM»