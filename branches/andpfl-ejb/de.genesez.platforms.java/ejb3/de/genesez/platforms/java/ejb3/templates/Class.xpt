«REM»
	template for ejb3 class
	
	@author		andre pflueger
	@date		2008/09/08	
	@version	1.0
«ENDREM»

«REM» import code gen meta model «ENDREM»
«IMPORT gcore»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::platforms::common::log::Log»

«EXTENSION de::genesez::platforms::common::AccessHelper»
«EXTENSION de::genesez::platforms::common::GeneralHelper»
«EXTENSION de::genesez::platforms::common::Conversion»
«EXTENSION de::genesez::platforms::common::typemapping::TypeMapping»
«EXTENSION de::genesez::platforms::common::m2t::Helper»

«EXTENSION de::genesez::platforms::java::scripts::Type»
«EXTENSION de::genesez::platforms::java::scripts::Naming»
«EXTENSION de::genesez::platforms::java::scripts::Conversion»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::Conversion»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::StandardConstructor»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::AccessHelper»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::Stereotypes»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::Attribute»



«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM» generates a class «ENDREM»
«DEFINE Root FOR MClass-»
	«addStandardConstructor()-> ""-»
	«IF generalization.isEmpty && hasStereotype("ejb3PersistentEntity") && property.notExists(e|e.hasStereotype("ejb3PrimaryKey")) && property.notExists(e|e.name == "id" && e.type.name() == "int")-»
		«addDefaultPrimaryKey(this, "id", "int", "private") -> ""-»
	«ENDIF»
	«EXPAND _Package-»
	«EXPAND _Import-»
	«EXPAND de::genesez::platforms::java::java5::templates::Comment::Type-»
	«EXPAND _Annotation-»	
	«REM» generates the rest of the class «ENDREM»
	«EXPAND Class-»
«ENDDEFINE»


«DEFINE Class FOR MClass-»
	«EXPAND de::genesez::platforms::java::java5::templates::Type::Modifier-» class «asTypeName()-»
	«EXPAND de::genesez::platforms::java::java5::templates::Type::Generics-» 
	«EXPAND de::genesez::platforms::java::java5::templates::Type::Generalization-» 
	«EXPAND Realization::Realization-» {
		
		/**
		  * generated variable, constant and association declarations
		  *
		  */		
		«EXPAND Attribute::AttributeDecl-»
		«EXPAND Association::AssociationDecl-»
		
		/**
		  * generated constructor implementations
		  *
		  */		
		«EXPAND de::genesez::platforms::java::java5::templates::Operation::Constructor-»
		
		/**
		  * generated derived attribute method implementations
		  *
		  */		
		«EXPAND de::genesez::platforms::java::java5::templates::Attribute::Derived-»
		
		/**
		  * generated association method implementations
		  *
		  */		
		«EXPAND Association::AccessorImpl-»
		
		/**
		  * generated abstract method declaration
		  *
		  */		
		«EXPAND de::genesez::platforms::java::java5::templates::Operation::Declaration-»
		
		/**
		  * generated normal method implementations
		  *
		  */	
		
		«EXPAND Operation::OperationImpl(this)-»
		
		/**
		  * generated getter and setter method implementations
		  *
		  */		
		«EXPAND de::genesez::platforms::java::java5::templates::Attribute::Accessors-»
		
		/**
		  * generated methods from the implementing interface(s)
		  * «FOREACH realization.typeSelect(MInterface).asTypeName() AS name SEPARATOR ", "-»«IF !((name == "I"+asTypeName()+"Local") || (name == "I"+asTypeName()+"Remote"))-»«name-»«ENDIF-»«ENDFOREACH»
		  */
		«REM»do not add the operations of the generated interface because these are already implemented in this class«ENDREM»
		«FOREACH realization.typeSelect(MInterface) AS interface»
		  	«IF !((interface.asTypeName() == "I"+asTypeName()+"Local") || (interface.asTypeName() == "I"+asTypeName()+"Remote"))»
		  		«EXPAND de::genesez::platforms::java::java5::templates::Operation::Implementation FOR interface -»
		  	«ENDIF»
		«ENDFOREACH»
		
		/**
		  * own implementations
		  *
		  */		
		«EXPAND de::genesez::platforms::java::java5::templates::Type::OwnCodeImpl("java.mclassifier.implementation.owncode.code." + xmiGuid)-»
	}
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3DiscriminatorValue" for classes, 
	operations and properties
«ENDREM»
«DEFINE DiscriminatorValue FOR MElement-»	
	«IF hasStereotype("ejb3DiscriminatorValue")-»
		«IF !hasTaggedValue("ejb3DiscriminatorValue", "value", "null")-»
			@DiscriminatorValue("«taggedValue.selectFirst(e|e.tag.name == "value").value-»")
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»  «ENDREM»
«DEFINE _Annotation FOR MClass-»
	«REM» PersistentEntity «ENDREM»
	«EXPAND _PersistentEntity-»
	
	«REM» SessionBean «ENDREM»
	«EXPAND _SessionBean-»
	
	«REM» MessageDriven «ENDREM»
	«EXPAND _MessageDriven-»
	
	«REM» container-managed transaction demarcation «ENDREM»	
	«EXPAND Operation::CMTransactionality»
	
	«REM» primary key «ENDREM»
	«EXPAND _PrimaryKey-»
	
	«REM» stereotype "ejb3EJB" «ENDREM»
	«EXPAND Attribute::EJB-»
«ENDDEFINE»

«REM» evaluates the stereotype "ejb3PersistentEntity"«ENDREM»
«DEFINE _PersistentEntity FOR MClass-»
	«IF hasStereotype("ejb3PersistentEntity")»
		@Entity
		«IF	hasUtilizableValue("ejb3PersistentEntity", "name")-»
			(name="«getTaggedValue("ejb3PersistentEntity", "name")-»")
		«ENDIF»
		«REM»@Table is not allowed with SINGLE_TABLE inheritance strategy«ENDREM»
		«IF generalization.isEmpty-»
			«EXPAND _Table-»
		«ENDIF»
		«REM»
			Causes Warnings in Hibernate configuration, no @Table in derived class
			annotation will be ignored, no fatal error occurs
			«ELSE-»
				«FOREACH generalization.typeSelect(MClass) AS classes-»
					«IF !classes.hasStereotype("ejb3Inheritance") && !hasTaggedValue("ejb3Inheritance", "discriminatorType", "SINGLE_TABLE")-»
						«EXPAND _Table-»
					«ENDIF»
				«ENDFOREACH-»
			«ENDIF»
		«ENDREM»
		«REM» entity listener «ENDREM»
		«EXPAND _EntityListener»
		«REM» inheritance «ENDREM»
		«EXPAND _Inheritance-»
	«ENDIF»
«ENDDEFINE»


«REM»
	evaluates tagged values of @Table in "ejb3PersistentEntity"
«ENDREM»
«DEFINE _Table FOR MClass-»
	@Table(
	«IF hasUtilizableValue("ejb3PersistentEntity", "tableName")-»
		name="tbl_«getTaggedValue("ejb3PersistentEntity", "tableName")-»"
	«ELSE-»
		name="tbl_«asTypeName()-»"
	«ENDIF-»
	«IF hasUtilizableValue("ejb3PersistentEntity", "tableCatalog")-»
		, catalog = "«getTaggedValue("ejb3PersistentEntity", "tableCatalog")-»"
	«ENDIF-»
	«IF hasUtilizableValue("ejb3PersistentEntity", "tableSchema")-»
		, schema = "«getTaggedValue("ejb3PersistentEntity", "tableSchema")-»"
	«ENDIF-»)
«ENDDEFINE»

«REM»
	evaluates the stereotypes "ejb3Remote" and "ejb3Local"
«ENDREM»
«DEFINE _RemoteLocal FOR MClassifier-»
	«IF hasStereotype("ejb3SessionBean")-»
		«IF hasStereotype("ejb3Remote")»
			«IF hasUtilizableValue("ejb3Remote", "name")-»
				«REM»erzeuge remote interface mit angegebenem namen«ENDREM»
				@Remote(I«getTaggedValue("ejb3Remote", "name")-».class)
				«EXPAND _Interface(getTaggedValue("ejb3Remote", "name"), "")-»
			«ELSE»
				«REM»erzeuge remote interface mit standardnamen«ENDREM»
				«EXPAND _Interface(asTypeName(), "Remote")-»
			«ENDIF»
		«ENDIF»
		«IF hasStereotype("ejb3Local")-»
			«IF hasUtilizableValue("ejb3Local", "name")-»
				«REM»erzeuge local interface mit angegebenem namen«ENDREM»
				@Local(I«getTaggedValue("ejb3Local", "name")-».class)
				«EXPAND _Interface(getTaggedValue("ejb3Local", "name"), "")-»
			«ELSE»
				«REM»erzeuge local interface mit standardnamen«ENDREM»
				«EXPAND _Interface(asTypeName(), "Local")-»
			«ENDIF»
		«ENDIF»
	«ELSEIF hasStereotype("ejb3Remote")»
		@Remote
	«ELSEIF hasStereotype("ejb3Local")»
		@Local	
	«ENDIF»
«ENDDEFINE»
		
		

«REM» evaluates the stereotype "ejb3SessionBean"«ENDREM»
«DEFINE _SessionBean FOR MClass-»
	«IF hasStereotype("ejb3SessionBean")-»
		«EXPAND _RemoteLocal-»	
		«IF hasTaggedValue("ejb3SessionBean", "stateful", "true")»
			@Stateful(
		«ELSEIF hasTaggedValue("ejb3SessionBean", "stateful", "false")-»
			@Stateless(
		«ENDIF-»
		«IF hasUtilizableValue("ejb3SessionBean", "name")-»
			name = "«getTaggedValue("ejb3SessionBean", "name")-»"
		«ELSE-»
			name = "«asTypeName()-»"
		«ENDIF-» 
 		«IF hasUtilizableValue("ejb3SessionBean", "mappedName")-»
 			, mappedName = "«getTaggedValue("ejb3SessionBean", "mappedName")-»"
 		«ENDIF-»
 		«IF hasUtilizableValue("ejb3SessionBean", "description")-»
 			, description = "«getTaggedValue("ejb3SessionBean", "description")-»"
 		«ENDIF-»)
		«REM» interceptors «ENDREM»
		«EXPAND _Interceptor»
		«IF hasTaggedValue("ejb3SessionBean", "stateful", "false")»
			«EXPAND _JWS»
		«ENDIF»
	«ENDIF-»
«ENDDEFINE»

«REM» evaluates the stereotype "ejb3MessageDriven"«ENDREM»
«DEFINE _MessageDriven FOR MClass-»
	«IF hasStereotype("ejb3MessageDrivenBean")»
		@MessageDriven(
		«IF hasUtilizableValue("ejb3MessageDrivenBean", "name")-»
			name = "«getTaggedValue("ejb3MessageDrivenBean", "name")-»"
		«ELSE-»
			name = "«asTypeName()-»"
		«ENDIF-» 
 		«IF hasUtilizableValue("ejb3MessageDrivenBean", "mappedName")-»
 			, mappedName = "«getTaggedValue("ejb3MessageDrivenBean", "mappedName")-»"
 		«ENDIF-»
 		«IF hasUtilizableValue("ejb3MessageDrivenBean", "description")-»
 			, description = "«getTaggedValue("ejb3MessageDrivenBean", "description")-»"
 		«ENDIF-»
 		«IF hasStereotype("ejb3ActivationConfigProperty")-»
 			«IF hasUtilizableValue("ejb3ActivationConfigProperty", "name") && 
 				hasUtilizableValue("ejb3ActivationConfigProperty", "value")-»
 				, activationConfig = {
 				«FOREACH getTaggedValue("ejb3ActivationConfigProperty", "name").getElements() AS name SEPARATOR ","»
 					@ActivationConfigProperty(
 						propertyName = "«name-»",  						
 						«LET getTaggedValue("ejb3ActivationConfigProperty", "name").getElements().indexOf(name) AS index-»
 							propertyValue = "«getTaggedValue("ejb3ActivationConfigProperty", "value").getElements().get(index)-»")
 						«ENDLET»
 				«ENDFOREACH»
 				}
 			«ENDIF-»
 		«ENDIF»
 		)			
		«REM» interceptors «ENDREM»
		«EXPAND _Interceptor»
	«ENDIF»
«ENDDEFINE»

«REM» evaluates the stereotype "ejb3WebService" «ENDREM»
«DEFINE _JWS FOR MClass-»
	«IF hasTaggedValue("ejb3SessionBean", "stateful", "false")-»
		«IF hasStereotype("jwsWebService")-»
			@WebService(name=
			«IF hasUtilizableValue("jwsWebService", "name")-»
				"«getTaggedValue("jwsWebService", "name")-»"
			«ELSE»
				"«asTypeName()-»"
			«ENDIF-»
			«IF hasUtilizableValue("jwsWebService", "targetNamespace")-»
				, targetNamespace="«getTaggedValue("jwsWebService", "targetNamespace")-»"
			«ENDIF-»
			«IF hasUtilizableValue("jwsWebService", "serviceName")-»
				, serviceName="«getTaggedValue("jwsWebService", "serviceName")-»"
			«ENDIF-»
			«IF hasUtilizableValue("jwsWebService", "portName")-»
				, portName="«getTaggedValue("jwsWebService", "portName")-»"
			«ENDIF-»
			«IF hasUtilizableValue("jwsWebService", "endpointInterface")-»
				, endpointInterface="«getTaggedValue("jwsWebService", "endpointInterface")-»"
			«ENDIF-»
			«IF hasUtilizableValue("jwsWebService", "wsdlLocation")-»
				, wsdlLocation="«getTaggedValue("jwsWebService", "wsdlLocation")-»"
			«ENDIF-»)
		«ENDIF»
		«IF hasUtilizableValue("jwsHandlerChain", "file")-»
			@HandlerChain(file="«getTaggedValue("jwsHandlerChain", "file")-»")
		«ENDIF-»
		«IF hasStereotype("jwsSOAPBinding")-»
			@SOAPBinding(use=SOAPBinding.Use.LITERAL
			«IF hasTaggedValue("jwsSOAPBinding", "style", "RPC")-»
				, style=SOAPBinding.Style.RPC
			«ENDIF-»
			«IF hasTaggedValue("jwsSOAPBinding", "parameterStyle", "BARE") && !hasTaggedValue("jwsSOAPBinding", "style", "RPC")-»
				, parameterStyle=SOAPBinding.ParameterStyle.BARE
			«ENDIF-»)			
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3Inheritance", "ejb3PrimaryKeyJoinColumn",
	"ejb3DiscriminatorColumn" and "ejb3DiscriminatorValue" 
«ENDREM»
«DEFINE _Inheritance FOR MClass-»
	«IF hasStereotype("ejb3Inheritance")-»
		«REM» Klasse ist selbst die vererbende Klasse «ENDREM»
		@Inheritance(strategy=InheritanceType.«taggedValue.selectFirst(e|e.tag.name == "strategy").value-»)
		«IF hasStereotype("ejb3DiscriminatorColumn")-»
			@DiscriminatorColumn(discriminatorType=DiscriminatorType.«getTaggedValue("ejb3DiscriminatorColumn", "discriminatorType")-»
			«IF hasUtilizableValue("ejb3DiscriminatorColumn", "name") && !hasTaggedValue("ejb3DiscriminatorColumn", "name", "DTYPE")-»
				, name="«getTaggedValue("ejb3DiscriminatorColumn", "name")-»", 
			«ENDIF-»
			«IF hasUtilizableValue("ejb3DiscriminatorColumn", "columnDefinition")-»
				, columnDefinition="«getTaggedValue("ejb3DiscriminatorColumn", "columnDefinition")-»"
			«ENDIF-»
			«IF !hasTaggedValue("ejb3DiscriminatorColumn", "length", "31") && hasTaggedValue("ejb3DiscriminatorColumn", "discriminatorType", "STRING")-»
				, length=«getTaggedValue("ejb3DiscriminatorColumn", "length")-»
			«ENDIF-»)
		«ENDIF-»
		«EXPAND DiscriminatorValue-»		
	«ELSEIF hasStereotype("ejb3DiscriminatorValue") || hasStereotype("ejb3PrimaryKeyJoinColumn")-»
		«REM» class is a derived class «ENDREM»
		«EXPAND DiscriminatorValue-»
		«IF hasStereotype("ejb3PrimaryKeyJoinColumn")-»
			@PrimaryKeyJoinColumns(
			«FOREACH getTaggedValue("ejb3PrimaryKeyJoinColumn", "name").getElements() AS value-»
				@PrimaryKeyJoinColumn(
					name="«value-»"
					«LET getTaggedValue("ejb3PrimaryKeyJoinColumn", "name").getElements().indexOf(value) AS index-»		
						«IF hasUtilizableValue("ejb3PrimaryKeyJoinColumn", "referencedName")-»
 							, referencedColumnName="«getTaggedValue("ejb3PrimaryKeyJoinColumn", "referencedName").getElements().get(index)-»"
	 					«ENDIF-»
						«IF hasUtilizableValue("ejb3PrimaryKeyJoinColumn", "columnDefinition")-»
 							, columnDefinition="«getTaggedValue("ejb3PrimaryKeyJoinColumn", "columnDefinition").getElements().get(index)-»"
 						«ENDIF-»
 					«ENDLET-») 					
			«ENDFOREACH»)
		«ENDIF-»
	«ELSE-»
		«REM» automatic annotation of inheritance «ENDREM»
		«IF !generalization.isEmpty-»
			«FOREACH generalization.typeSelect(MClass) AS class-»
				«REM» only inheritance of depth one «ENDREM»
				«IF (hasStereotype(class, "ejb3Inheritance") || hasStereotype(class, "ejb3DiscriminatorColumn")) &&
					class.generalization.isEmpty-»
					«REM»a«ENDREM»
					«IF hasStereotype("ejb3Inheritance")-»
						«REM»
							logically there is no discriminator column stereotype in super class
							it cannot be annotated to class if @Inheritance is not available
						«ENDREM»
						«IF getTaggedValue(class, "ejb3Inheritance", "strategy") == "SINGLE_TABLE"-»
							«IF getTaggedValue(class, "ejb3Inheritance", "discriminatorType") == "STRING"-»
								«addDiscriminatorColumnStereotype(class, "", "STRING", "31", "DTYPE") ->""-»
								«REM»
									ejb3DiscriminatorValue is not needed here because class name
									is choosen by default as identifier of the discriminator column
									if "@DiscriminatorValue" is missing
								«ENDREM»
							«ELSEIF getTaggedValue(class, "ejb3Inheritance", "discriminatorType") == "INT"-»
								«addDiscriminatorColumnStereotype(class, "", "INT", "31", "DTYPE") ->""-»
								«addDiscriminatorValueStereotype(class, class.name.asTypeName().length.toString()) ->""-»
								«addDiscriminatorValueStereotype(this, asTypeName().length.toString()) ->""-»
							«ELSEIF getTaggedValue(class, "ejb3Inheritance", "discriminatorType") == "CHAR"-»
								«addDiscriminatorColumnStereotype(class, "", "CHAR", "31", "DTYPE") ->""-»
								«addDiscriminatorValueStereotype(class, class.name.asTypeName().subString(0, 1)) ->""-»
								«addDiscriminatorValueStereotype(this, asTypeName().subString(0, 1).toString()) ->""-»
							«ENDIF»
						«ENDIF»
					«ENDIF»
				«ELSE-»
					«REM» there is no "@Inheritance" and "@DiscriminatorColumn" at super class «ENDREM»
					«IF this.generalization.isEmpty-»
						«REM»these two annotations are only needed if this is not a derived class«ENDREM»
						«addInheritanceStereotype(class, "SINGLE_TABLE") ->""-»
						«addDiscriminatorColumnStereotype(class, "", "STRING", "31", "DTYPE") ->""-»
					«ENDIF-»
					«REM»
						equal named primary keys in super and derived class are 
						detected by primary key annotation in Attribute.xpt
						--> nothing to do here 
					«ENDREM»
					«REM»
						ejb3DiscriminatorValue is not needed here because class name
						is choosen by default as identifier of the discriminator column
						if "@DiscriminatorValue" is missing
					«ENDREM»
				«ENDIF-»
			«ENDFOREACH»
		«ELSE-»
			«REM» look for this class in generalizations of other classes «ENDREM»
			«FOREACH this.owningPackage.classifier.typeSelect(MClass) AS classes-»
				«IF !hasStereotype("ejb3Inheritance") && !classes.generalization.isEmpty && 
					classes.generalization.typeSelect(MClass).name.exists(e|e == this.name)-»
					«addInheritanceStereotype(this, "SINGLE_TABLE") ->""-»
					«addDiscriminatorColumnStereotype(this, "", "STRING", "31", "DTYPE") ->""-»
					«REM»
						ejb3DiscriminatorValue is not needed here because class name
						is choosen by default as identifier of the discriminator column
						if "@DiscriminatorValue" is missing
					«ENDREM»					
					«EXPAND _Inheritance-»
				«ENDIF»			
			«ENDFOREACH»
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«REM» evaluates the stereotype "ejb3PrimaryKey"«ENDREM»
«DEFINE _PrimaryKey FOR MClass-»
	«IF hasStereotype("ejb3PrimaryKeyClass") && hasTaggedValue("ejb3PrimaryKeyClass", "embeddable", "false")-»
		«REM» primary key with extern primary key class «ENDREM»
		«IF hasUtilizableValue("ejb3PrimaryKeyClass", "name")-»
			@IdClass(«getTaggedValue("ejb3PrimaryKeyClass", "name")-».class)
			«EXPAND _PrimaryKeyClass(getTaggedValue("ejb3PrimaryKeyClass", "name"))-»
		«ELSE-»
			@IdClass(«asTypeName()-»PK.class)
			«EXPAND _PrimaryKeyClass(asTypeName()+"PK")-»
		«ENDIF»
	«ELSEIF hasStereotype("ejb3PrimaryKeyClass") && hasTaggedValue("ejb3PrimaryKeyClass", "embeddable", "true")-»
		«REM» primary key with embedded primary key class «ENDREM»
		@Embeddable
		«REM»«IF hasUtilizableValue("ejb3PrimaryKeyClass", "name")-»
			«EXPAND _PrimaryKeyClass(getTaggedValue("ejb3PrimaryKeyClass", "name"))-»
		«ELSE-»
			«EXPAND _PrimaryKeyClass(asTypeName()+"PK")-»
		«ENDIF»
		«FOREACH property AS id-»
			«IF id.hasStereotype("ejb3PrimaryKey")-»
				«property.remove(id)-»
			«ENDIF-»
		«ENDFOREACH-»
		«IF hasUtilizableValue("ejb3PrimaryKeyClass", "name")-»
			«property.add(makeAttribute(getTaggedValue("ejb3PrimaryKeyClass", "name").toFirstLower(), getTaggedValue("ejb3PrimaryKeyClass", "name"), 1, false, false, false))->""-»
			«property.selectFirst(e|e.name == getTaggedValue("ejb3PrimaryKeyClass", "name").toFirstLower()).addPrimaryKeyStereotype("true", "null", "false", "AUTO")->""-»
		«ELSE-»
			«property.add(makeAttribute(asTypeName().toLowerCase()+"Pk", asTypeName()+"PK", 1, false, false, false))->""-»
			«property.selectFirst(e|e.name == asTypeName().toLowerCase()+"Pk").addPrimaryKeyStereotype("true", "null", "false", "AUTO")->""-»
		«ENDIF-»
		//properties: «property.name»
		//Stereotype: «property.stereotype.name»
		//taggedValue namen: «property.taggedValue.tag.name»
		//taggedvalue werte: «property.taggedValue.value»«ENDREM»
	«ENDIF»	
«ENDDEFINE»

«REM» 
	creates a remote or local interface for a session bean 
«ENDREM»
«DEFINE _Interface(String filename, String type) FOR MClassifier-»
	«FILE filePath( "I" + filename + type + ".java", basePath() )-»
		/**
		  *	generated interface of the ejb3 cartridge
		  *
		  * @author		andre pflueger
		  * @date	 	2008 Aug 28
		  * @version	1.0
		  *
		  */	
		«EXPAND _Package-»
		
		«FOREACH this.getModel().nestedPackage AS p-»
			import «IF this.basePackage() != ""-»«this.basePackage()-».«ENDIF-»«p.name-».*;
		«ENDFOREACH»
		import java.util.*;
		«IF type == "Remote"-»
			import javax.ejb.Remote;
		«ENDIF-»
		«IF type == "Local"-»
			import javax.ejb.Local;
		«ENDIF-»
		«IF hasTaggedValue("ejb3SessionBean", "stateful", "false") && 
			(operation.exists(e|e.hasStereotype("ejb3Timer")) || operation.parameter.type.mapName().asTypeName().exists(e|e == "Timer"))-»
			import javax.ejb.Timer;
		«ENDIF»
		«IF operation.exists(e|e.hasStereotype("ejb3OperationInterceptor")) || operation.parameter.type.mapName().asTypeName().exists(e|e == "InvocationContext")-»
			import javax.interceptor.InvocationContext;
		«ENDIF-»
				
		/**
		  * generated interface for "«asTypeName()-»"
		  *
		  */
		«IF type == "Remote"-»
			@Remote
		«ENDIF-»
		«IF type == "Local"-»
			@Local
		«ENDIF-»
		public interface I«filename + type-» {
		
		/**
		  * generated method declaration
		  * 
		  */	
		 «FOREACH operation.typeSelect(MOperation) AS op»
		 	«IF ((op.visibility == 'public') && (op.name != asTypeName()))»
		 		«EXPAND de::genesez::platforms::java::java5::templates::Operation::_Declaration FOR op-»
		 	«ENDIF»
		 «ENDFOREACH»
		
		«IF hasStereotype("seam2Component")-»
			/**
			  * generated getter and setter method declaration
			  *
			  */
			«FOREACH property.typeSelect(MAttribute) AS attribute-»
				«IF !attribute.hasTaggedValue("accessor", "getter", "false")-»
					public «attribute.type.mapName().asTypeName()-» «attribute.asGetter()-»();
				«ENDIF»
				«IF !attribute.hasTaggedValue("accessor", "setter", "false")-»
					public void «attribute.asSetter()-»(«attribute.type.mapName().asTypeName()-» «attribute.name-»);
				«ENDIF»
			«ENDFOREACH-»
		«ENDIF»		
		}
	«ENDFILE»	
«ENDDEFINE»

«REM» creates a primary key class for stereotype "idClass" «ENDREM»
«DEFINE _PrimaryKeyClass(String filename) FOR MClass-»
	«FILE filePath( filename + ".java", basePath() )-»
		/**
		  *	generated primary key class of the ejb3 cartridge
		  *
		  * @author		andre pflueger
		  *	@date		2008 May 18
		  * @version	1.0
		  *
		  */	
		«EXPAND _Package-»
		
		/**
		  * generated primary key class for "«asTypeName()-»"
		  *
		  */
		public class «filename-» implements java.io.Serializable {
			«FOREACH property.select(e|e.hasStereotype("ejb3PrimaryKey")) AS ids»
				private «ids.type.mapName()» «ids.name»;
			«ENDFOREACH»
			public «filename-»() {}
			public «filename-»(
			«FOREACH property.select(e|e.hasStereotype("ejb3PrimaryKey")) AS ids SEPARATOR ", "-»
				«ids.type.asTypeName()» «ids.name»
			«ENDFOREACH-») {
				«FOREACH property.select(e|e.hasStereotype("ejb3PrimaryKey")) AS ids SEPARATOR ";"-»
					this.«ids.name» = «ids.name»
				«ENDFOREACH-»;
			}
			
			«FOREACH property.typeSelect(MAttribute).select(e|e.hasStereotype("ejb3PrimaryKey")) AS ids»
				public «ids.type.asTypeName()» «ids.asGetter()»() {
					return «ids.name»;
				}
			«ENDFOREACH»
			«FOREACH property.typeSelect(MAttribute).select(e|e.hasStereotype("ejb3PrimaryKey")) AS ids»
				public  void «ids.asSetter()»(«ids.type.asTypeName()» «ids.name») {
					this.«ids.name» = «ids.name»;
				}	
			«ENDFOREACH»
			public boolean equals(Object obj){
				if (obj == this) return true;
				if (!(obj instanceof «filename-»)) return false;
				«filename-» pk = («filename-») obj;
				return ( 
				«FOREACH property.select(e|e.hasStereotype("ejb3PrimaryKey")) AS ids SEPARATOR "&&"-»
					this.«ids.name»
					«IF ids.type.isPrimitiveType()-»
						 == pk.«ids.name»
					«ELSE-»
						.equals(pk.«ids.name-»)
					«ENDIF-»
				«ENDFOREACH-»
				);
			}
			
			public int hashCode() {
				return (int) 
				«FOREACH property.select(e|e.hasStereotype("ejb3PrimaryKey")) AS ids SEPARATOR " + "-»
					this.«ids.name-»
					«IF !isPrimitiveType(ids.type)-»
						.hashCode()
					«ELSEIF ids.type.mapName() == "String"-»
						.hashCode()
					«ENDIF-»	
				«ENDFOREACH-»
				;				
			}
		}
	«ENDFILE»
«ENDDEFINE»

«REM»
	evaluates the stereotype "ejb3EntityListener"
«ENDREM»
«DEFINE _EntityListener FOR MClass-»
	«IF hasStereotype("ejb3EntityListener")»
		«IF hasUtilizableValue("ejb3EntityListener", "listeners")-»
			@EntityListeners(«FOREACH getTaggedValue("ejb3EntityListener", "listeners").getElements() AS listeners SEPARATOR ", "»
				«listeners-».class
			«ENDFOREACH-»
			«IF hasTaggedValue("ejb3EntityListener", "generateDefault", "true") && 
				operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true"))-»
				, «asTypeName()+"Listener.class"-»
				«EXPAND _EntityListenerClass(asTypeName()+"Listener")-»
			«ENDIF-»)
		«ELSEIF hasTaggedValue("ejb3EntityListener", "generateDefault", "true") && 
				operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true"))-»
			@EntityListeners(«asTypeName()-»Listener.class)
			«EXPAND _EntityListenerClass(asTypeName()+"Listener")-»
		«ENDIF»
		«IF hasTaggedValue("ejb3EntityListener", "excludeDefaultListeners", "true")»
			@ExcludeDefaultListeners
		«ENDIF»
		«IF hasTaggedValue("ejb3EntityListener", "excludeSuperclassListeners", "true")»
			@ExcludeSuperclassListeners
		«ENDIF»				
	«ENDIF»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3EntityListener"
«ENDREM»
«DEFINE _EntityListenerClass(String filename) FOR MClass-»
	«FILE filePath( filename + ".java", basePath() )-»
		/**
		  *	generated entity listener class by the ejb3 cartridge
		  *
		  * @author		andre pflueger
		  * @date		2008 Jun 13
		  * @Version	1.0
		  *
		  */
		«EXPAND _Package-»
		
		/* generated imports */
		«EXPAND _CallbackImport»
		
		/* your own imports */
		«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + asTypeName() + "_Imports")-»
		
		/**
		  * generated entity listener class for "«asTypeName()»"
		  *
		  */
		public class «filename-» {
			«EXPAND _CallbackMethods-»
			
			«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + "_restOf" + asTypeName() + "EntityListenerClass")-»
		}
	«ENDFILE»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3Interceptor"
«ENDREM»
«DEFINE _Interceptor FOR MClass-»
	«IF hasStereotype("ejb3ClassInterceptor")-»
		«IF hasUtilizableValue("ejb3ClassInterceptor", "interceptors")-»
			@Interceptors(
			«FOREACH getTaggedValue("ejb3ClassInterceptor", "interceptors").getElements() AS interceptor SEPARATOR ", "-»
				«interceptor-».class
			«ENDFOREACH-»
			«IF hasTaggedValue("ejb3ClassInterceptor", "generateDefault", "true") &&
				( operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true")) ||
				hasUtilizableValue("ejb3ClassInterceptor", "methods") )-»
				«EXPAND _InterceptorClass(asTypeName()+"Interceptor")-»
				, «asTypeName()-»Interceptor.class
			«ENDIF-»)
		«ELSEIF hasTaggedValue("ejb3ClassInterceptor", "generateDefault", "true") &&
				( operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true")) ||
				hasUtilizableValue("ejb3ClassInterceptor", "methods") )-»
			@Interceptors(«asTypeName()»Interceptor.class)
			«EXPAND _InterceptorClass(asTypeName()+"Interceptor")-»
		«ENDIF-»
		«IF hasTaggedValue("ejb3ClassInterceptor", "excludeDefaultInterceptors", "true")-»
			@ExcludeDefaultInterceptors
		«ENDIF»
	«ENDIF-»
«ENDDEFINE»


«REM» 
	generates an interceptor class
«ENDREM»
«DEFINE _InterceptorClass(String filename) FOR MClass-»
	«FILE filePath( filename + ".java", basePath() )-»
		/**
		  *	generated interceptor class of the ejb3 cartridge
		  *
		  *	@author		andre pflueger
		  * @date		2008 Jun 15
		  * @version 	1.0
		  *
		  */
		«EXPAND _Package-»
		
		/* generated imports */
		«EXPAND _CallbackImport»
		import javax.interceptor.AroundInvoke;
		import javax.interceptor.InvocationContext;
		
		/* your own imports */
		«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + asTypeName() + "_Imports")-»
		
		/**
		  * generated interceptor class for "«asTypeName()-»"
		  *
		  */
		public class «filename-» {
			«EXPAND _BusinessMethods-»
			
			«EXPAND _CallbackMethods-»
			
			«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + "_restOf" + asTypeName() + "InterzeptorClass")-»
		}
	«ENDFILE»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Callback for class import
	can be used by interceptor and entity listener class generation
	
	takes care of downwards compatibility from ejb3 to ejb2.x by
	not creating callback methods in an interceptor class for some
	special methods with coressponding callback annotations 
	(page 363 of ejb3 professionell of Oliver Ihns) 
«ENDREM»
«DEFINE _CallbackImport FOR MClass-»
	«FOREACH operation.select(e|e.hasTaggedValue("ejb3Callback", "external", "true")) AS methods»
		«IF methods.hasStereotype("ejb3OperationInterceptor")
			&& !(methods.name == "ejbCreate" 
				&& methods.hasTaggedValue("ejb3Callback", "postConstruct", "true"))
			|| !(methods.name == "ejbRemove" 
				&& methods.hasTaggedValue("ejb3Callback", "preDestroy", "true"))
			|| !(methods.name == "ejbActivate" 
				&& methods.hasTaggedValue("ejb3Callback", "postActivate", "true"))
			|| !(methods.name == "ejbPassivate" 
				&& methods.hasTaggedValue("ejb3Callback", "prePassivate", "true"))
		-»
			«IF methods.hasTaggedValue("ejb3Callback", "preConstruct", "true")»
				import javax.annotation.PostConstruct;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "preDestroy", "true")»
				import javax.annotation.PreDestroy;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postActivate", "true")»
				import javax.ejb.PostActivate;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "prePassivate", "true")»
				import javax.ejb.PrePassivate;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postPersist", "true")»
				import javax.persistence.PostPersist;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "prePersist", "true")»
				import javax.persistence.PrePersist;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postUpdate", "true")»
				import javax.persistence.PostUpdate;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "preUpdate", "true")»
				import javax.persistence.PreUpdate;
			«ENDIF»	
			«IF methods.hasTaggedValue("ejb3Callback", "postRemove", "true")»
				import javax.persistence.PostRemove;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "preRemove", "true")»
				import javax.persistence.PreRemove;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postLoad", "true")»
				import javax.persistence.PostLoad;
			«ENDIF»
		«ENDIF-»
	«ENDFOREACH»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Callback and generates source code for the associated methods
	can be used by interceptor and entity listener class generation
	
	takes care of downwards compatibility from ejb3 to ejb2.x by
	not creating callback methods in an interceptor class for some
	special methods with coressponding callback annotations 
	(page 363 of ejb3 professionell of Oliver Ihns) 
«ENDREM»
«DEFINE _CallbackMethods FOR MClass-»
	«FOREACH operation.select(e|e.hasTaggedValue("ejb3Callback", "external", "true")) AS methods»
		«IF hasStereotype("ejb3ClassInterceptor")
			&& !(methods.name == "ejbCreate" 
				&& methods.hasTaggedValue("ejb3Callback", "postConstruct", "true"))
			|| !(methods.name == "ejbRemove" 
				&& methods.hasTaggedValue("ejb3Callback", "preDestroy", "true"))
			|| !(methods.name == "ejbActivate" 
				&& methods.hasTaggedValue("ejb3Callback", "postActivate", "true"))
			|| !(methods.name == "ejbPassivate" 
				&& methods.hasTaggedValue("ejb3Callback", "prePassivate", "true"))
		-»
			/**
			  *	generated callback method for class "«asTypeName()»"
			  * method has been annotated in "«asTypeName()»"
			  *
			  */
			«IF methods.hasTaggedValue("ejb3Callback", "external", "true")-»
				«IF methods.classifier.hasStereotype("ejb3SessionBean") || methods.classifier.hasStereotype("ejb3MessageDrivenBean")-»
					«IF methods.hasTaggedValue("ejb3Callback", "postConstruct", "true")-»
						@PostConstruct
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "preDestroy", "true")-»
						@PreDestroy
					«ENDIF-»
				«ENDIF-»
				«IF methods.classifier.hasTaggedValue("ejb3SessionBean", "stateful", "true")-»
					«IF methods.hasTaggedValue("ejb3Callback", "postActivate", "true")-»
						@PostActivate
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "prePassivate", "true")-»
						@PrePassivate
					«ENDIF-»
				«ENDIF-»
				«IF methods.classifier.hasStereotype("ejb3PersistentEntity")-»
					«IF methods.hasTaggedValue("ejb3Callback", "postPersist", "true")-»
						@PostPersist
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "prePersist", "true")-»
						@PrePersist
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "postUpdate", "true")-»
						@PostUpdate
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "preUpdate", "true")-»
						@PreUpdate
					«ENDIF-»	
					«IF methods.hasTaggedValue("ejb3Callback", "postRemove", "true")-»
						@PostRemove
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "preRemove", "true")-»
						@PreRemove
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "postLoad", "true")-»
						@PostLoad
					«ENDIF-»
				«ENDIF-»
			«ENDIF-»
			public void «methods.name-»(«IF hasStereotype("ejb3EntityListener")-»
				Object obj){
					«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods.name + "Listener")-»
			«ELSEIF hasStereotype("ejb3ClassInterceptor")-»
				InvocationContext ctx){
					«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods.name + "Interceptor")-»
			«ENDIF-»
			}
		«ENDIF-»
	«ENDFOREACH»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Interceptor and generates source code for the 
	associated business methods
«ENDREM»
«DEFINE _BusinessMethods FOR MClass-»
	«IF hasUtilizableValue("ejb3ClassInterceptor", "methods")-»
		«FOREACH getTaggedValue("ejb3ClassInterceptor", "methods").getElements() AS methods-»
			/**
			  *	generated business method for class "«asTypeName()»"
			  * method has been mentioned in "ejb3Interceptor"-annotation 
			  * at class "«asTypeName()»"
			  *
			  */
			@AroundInvoke
			public Object «methods-»(InvocationContext ctx) throws Exception {
				/* throw an exception to avoid execution of the business method */
				«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods + "Interceptor")-»
				return ctx.proceed();
			}
		«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«REM» 
	generates import proReg and statements for ejb classes
«ENDREM»
«DEFINE _Import FOR MClass-»
	/* «PROTECT CSTART "" CEND "" ID ("java.moperation.implementation.operation.code." + xmiGuid + "OwnManualImports")» */
	/* TODO: put your own source code here */
	«EXPAND _ImportStatements-»
	
	/* «ENDPROTECT» */
«ENDDEFINE»

«REM» 
	generates import statements for ejb classes
«ENDREM»
«DEFINE _ImportStatements FOR MClass-»
	«EXPAND _CallbackImport»
	«IF hasStereotype("ejb3PersistentEntity")-»
		import javax.persistence.Entity;
		import javax.persistence.Table;
		import java.io.Serializable;
		import javax.persistence.Inheritance;
		import javax.persistence.InheritanceType;
	«ENDIF»
	«IF property.exists(e|e.hasStereotype("ejb3Persistence")) 
		|| property.exists(e|e.type.mapName().asTypeName() == "EntityManager")
		|| property.exists(e|e.type.mapName().asTypeName() == "EntityManagerFactory")-»
		import javax.persistence.EntityManager;
		import javax.persistence.PersistenceUnit;
		import javax.persistence.PersistenceContext;
	«ENDIF»	
	«IF operation.exists(e|e.hasStereotype("ejb3Association")) || property.exists(e|e.hasStereotype("ejb3Association"))-»
		import javax.persistence.OneToMany;
		import javax.persistence.ManyToOne;
		import javax.persistence.OneToOne;
		import javax.persistence.ManyToMany;
		import javax.persistence.CascadeType;
	«ENDIF»
	«IF operation.exists(e|e.hasStereotype("ejb3PrimaryKey")) || property.exists(e|e.hasStereotype("ejb3PrimaryKey"))-»
		import javax.persistence.Id;
		import javax.persistence.IdClass;
		import javax.persistence.EmbeddedId;
		import javax.persistence.GeneratedValue;
		import javax.persistence.GenerationType;
	«ENDIF»
	«IF operation.exists(e|e.hasStereotype("ejb3Timer"))-»
		import javax.ejb.Timer;
	«ENDIF»
	«IF hasStereotype("ejb3SessionBean")-»
		import javax.persistence.PersistenceContext;
		«IF hasTaggedValue("ejb3SessionBean", "stateful", "false")-»
			import javax.ejb.Stateless;
		«ELSEIF hasTaggedValue("ejb3SessionBean", "stateful", "true")»
			import javax.ejb.Stateful;
		«ENDIF-»
		«IF hasStereotype("ejb3Remote")-»
			import javax.ejb.Remote;
		«ENDIF-»
		«IF hasStereotype("ejb3Local")-»
			import javax.ejb.Local;
		«ENDIF-»
		«IF hasStereotype("ejb3WebService")-»
			import javax.jws.WebService;
			import javax.jws.soap.SOAPBinding;
			import javax.jws.WebMethod;
			import javax.jws.Oneway;
			import javax.jws.WebParam;
			import javax.jws.WebResult;
			import javax.jws.HandlerChain;
		«ENDIF-»
	«ENDIF»
	«IF hasStereotype("ejb3MessageDrivenBean")-»
		import javax.ejb.MessageDriven;	
		import javax.jms.MessageListener;
		import javax.ejb.ActivationConfigProperty;		
	«ENDIF»
	import javax.persistence.*;
	import javax.annotation.*;
	import javax.ejb.*;
	«FOREACH this.getModel().nestedPackage AS p-»
			import «IF this.basePackage() != ""-»«this.basePackage()-».«ENDIF-»«p.name-».*;
	«ENDFOREACH»	
«ENDDEFINE»



«REM» 
	generates the package of the class
«ENDREM»
«DEFINE _Package FOR MClassifier-»
	package «packageDeclaration( basePackage() ) -»;
«ENDDEFINE»

«REM» 
	generates a protected region for own implementations
«ENDREM»
«DEFINE _OwnCodeImpl(String proRegId) FOR MClass-»
	/* «PROTECT CSTART "" CEND "" ID (proRegId)» */
	/* TODO: put your own source code here */
	
	/* «ENDPROTECT» */
«ENDDEFINE»