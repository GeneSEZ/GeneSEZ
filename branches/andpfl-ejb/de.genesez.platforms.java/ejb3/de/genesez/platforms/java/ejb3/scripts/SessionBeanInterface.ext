import gcore;

extension de::genesez::platforms::common::AccessHelper;

MModel addSessionBeanInterface(MModel this) :
	nestedPackage.addSessionBeanInterface();
	
MPackage addSessionBeanInterface(MPackage this) :
	nestedPackage.addSessionBeanInterface() ->
	classifier.addSessionBeanInterface();
	
MClassifier addSessionBeanInterface(MClassifier this) :
	stereotype.name.exists(e|e == "ejb3SessionBean") 
	&& taggedValue.exists(e|e == "remote")
	&& ( taggedValue.notExists(e|e == "remoteInterface" && e.value == "null")
		|| taggedValue.notExists(e|e == "localInterface" && e.value == "null"))
		? this.selectInterfaceType()
		: "";

MClassifier selectInterfaceType(MClassifier this) :
	taggedValue.exists(e|e == "remote" && e.value == "true")
		? realization.add(makeSessionBeanInterface(this, "remote"))
		: realization.add(makeSessionBeanInterface(this, "local"));

create MExternal makeSessionBeanInterface(MClassifier container, String type) :
	setSpecification("I" + container.name + type) ->
	container.getModel().externalTypes.add(this);
	