«REM» import code gen meta model «ENDREM»
«IMPORT genesezMM»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::io::io»

«EXTENSION de::genesez::common::AccessHelper»
«EXTENSION de::genesez::common::Conversion»
«EXTENSION de::genesez::common::GeneralHelper»
«EXTENSION de::genesez::common::typemapping::TypeMapping»

«EXTENSION de::genesez::platforms::java::scripts::Type»
«EXTENSION de::genesez::platforms::java::scripts::Naming»
«EXTENSION de::genesez::platforms::java::scripts::Conversion»
«EXTENSION de::genesez::platforms::java::ejb3::scripts::Serializable»


// //////////////////////////////////////////////////////////////////////////////
// public functions
// //////////////////////////////////////////////////////////////////////////////


// generate realization for a class
«DEFINE Realization FOR MClassifier-»
	«addSerializable() -> ""-»
	«IF !realization.isEmpty-»
		implements «FOREACH realization AS c SEPARATOR ", "»«c.mapName()»«EXPAND _Generics FOR c»«ENDFOREACH»
	«ELSE-»
		«REM»«EXPAND de::genesez::platforms::java::ejb3::templates::Realization::Annotation-»«ENDREM»
	«ENDIF-»
«ENDDEFINE»

// //////////////////////////////////////////////////////////////////////////////
// private functions
// //////////////////////////////////////////////////////////////////////////////


// generate generics
«DEFINE _Generics FOR MClassifier-»
	«IF hasGenericParameter()-»
		<«getGenericList(genericParameter)»>
	«ELSE-»
	«ENDIF-»
«ENDDEFINE»

// generate generics
«DEFINE _Generics FOR MExternal-»
«IF hasGenericParameter()-»
	<«getGenericList(genericParameter)»>
«ELSE-»
«ENDIF-»
«ENDDEFINE»

// generate generics
«DEFINE _Generics FOR MType-»
«ENDDEFINE»