<?xml version="1.0" encoding="utf-8"?>

<workflow>
	
	<!-- 
			CONFIGURATION SECTION
			===================== 
	-->
	
	<!-- select between the values "makeGenesezModel.oaw" and "makeGenesezModelProfile.oaw" 
		 "makeGenesezModel.oaw"		   - transform the model from uml2 meta model to genesez meta model
		  								 without profile support
		 "makeGenesezModelProfile.oaw" - transform the model from uml2 meta model to genesez meta model
		  								 with profile support
	-->
	<property name="input.workflowCartridge" value="makeGenesezModel.oaw" />
	
	<!-- if the property "input.workflowCartridge" has the value "makeGenesezModelProfile.oaw" then 
		 set the name of the uml2 profile file else leave blank -->
	<property name="input.uml2ProfileFile" value="../de.genesez.BankEJB3/model-exp/profile.profile.uml" />
	
	<!-- name of the uml2 file -->
	<property name="input.uml2ModelFile" value="../de.genesez.BankEJB3/model-exp/BankEJB3.uml" />
	
	<!-- comma or comma blank [, ] separated list of package names to exclude from transformation -->
	<property name="input.excludePackages" value="UML Standard Profile" />
	
	<!-- comma or comma blank [, ] separated list of package names which are used as container
		 for external classes (therefor are not transformed to genesez packages) -->
	<property name="input.externalPackages" value="" />
	
	<!-- comma or comma blank [, ] separated list of names of stereotypes which are applied 
		 to packages or classes, indicating that the package is a container for external classes
		 or the classes are external classes -->
	<property name="input.externalStereotypes" value="external" />
	

	<!-- select between the values "performM2T.oaw" and "performM2TAOP.oaw"
		 "performM2T.oaw"    - performs a model-to-text transformation (code generation)
							   without the AOP of templates
		 "performM2TAOP.oaw" - performs a model-to-text transformation (code generation)
							   using AOP of templates
	 -->
	<property name="output.workflowCartridge" value="performM2TAOP.oaw" />
	
	<!-- if the property "output.workflowCartridge" has the value "performM2TAOP.oaw" then 
		 set the root xpt-file where the aspects are defined else leave blank -->
	<property name="output.aspectsTemplate" value="de::genesez::platforms::java::java5::templates::Aspects, de::genesez::platforms::java::ejb3::templates::Aspects" />
	
	<!-- name of the ouput xmi file -->
	<property name="output.xmiModelFile" value="../de.genesez.BankEJB3/model-gen/BankEJB3.xmi" />

	<!-- comma or semicola separated list (NO blanks) with packages to exclude from code generation -->	
	<property name="output.excludePackages" value="" />
	
	<!-- the path where the generated file are produced -->
	<property name="output.generatePath" value="../de.genesez.BankEJB3/src-gen" />
	
	<!-- the path where the generated test file are produced -->
	<property name="output.generateTestPath" value="../de.genesez.BankEJB3/test-gen" />	
	
	<!-- the pathes where the protected region resolver scans for protected regions to save and restore 
		 paths have to been comma or semicola seperated but with NO blank after it -->
	<property name="output.proRegResolvePaths" value="${output.generatePath},../de.genesez.BankEJB3/test-gen" />
	
	<!-- name of the type mapping xml file -->
	<property name="output.typeMappingFile" value="../de.genesez.platforms.java/java/de/genesez/platforms/java/typemapping/typeMapping4Java.xml" />
	
	
	<!-- 
			GENERATION SEQUENCE SECTION - DON'T MODIFY THIS
			=============================================== 
	-->
	
	<!-- Reading the example file. -->
	<cartridge
		file="de::genesez::workflows::${input.workflowCartridge}" 
		inputModelFile="${input.uml2ModelFile}"
		uml2ProfileFile="${input.uml2ProfileFile}"
		genesezModel="genesezModel"
		excludePackages="${input.excludePackages}"
		mapClassesInModelToExternal="false"
		externalPackages = "${input.externalPackages}"
		externalStereotypes = "${input.externalStereotypes}"
	/>
	
	<!-- Check constraints. /-->
	<cartridge
		file="de::genesez::workflows::constraintChecker.oaw"
		modelSlot="genesezModel"
		checkScript="de::genesez::platforms::java::constraints::Syntax"
		abortOnError="true"
	/>
	<cartridge
		file="de::genesez::workflows::constraintChecker.oaw"
		modelSlot="genesezModel"
		checkScript="de::genesez::platforms::java::constraints::Naming"
		abortOnError="true"
	/>
	
	<!-- Create ejb3 java code with or without AOP in xpand templates.  /-->
	<cartridge
		file="de::genesez::workflows::java::${output.workflowCartridge}"
		rootTemplate="de::genesez::platforms::java::ejb3::templates::Root::Root FOR genesezModel"
		excludePackages="${output.excludePackages}"
		configFile=""
		aspectsTemplate="${output.aspectsTemplate}"
		outputDir="${output.generatePath}"
		proRegDir="${output.proRegResolvePaths}"
		typeMappingFile="${output.typeMappingFile}"
	/>
	
	<!-- Create junit source code with or without AOP in xpand templates.  /-->
	<cartridge
		file="de::genesez::workflows::java::${output.workflowCartridge}"
		rootTemplate="de::genesez::platforms::java::junit::templates::Root::Root FOR genesezModel"
		excludePackages="${output.excludePackages}"
		configFile=""
		aspectsTemplate="${output.aspectsTemplate}"
		outputDir="${output.generateTestPath}"
		proRegDir="${output.proRegResolvePaths}"
		typeMappingFile="${output.typeMappingFile}"
	/>		
	
	<!-- Write the transformed model file.  /-->
	<cartridge
		file="de::genesez::workflows::xmiWriter.oaw"
		modelSlot="genesezModel"
		outputModelFile="${output.xmiModelFile}"
	/>

</workflow>
