package server;/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1207998935587_293390_704OwnManualImports) ENABLED START *//* TODO: put your own source code here */import javax.persistence.PersistenceContext;import javax.persistence.CascadeType;import javax.ejb.Stateful;import javax.persistence.EntityManager;import javax.persistence.OneToMany;import javax.ejb.Remote;/* PROTECTED REGION END *//** * The bankgroupBean provides methods for creating banks, customers and accounts with their statements. It is the implementation of the interface bankgroup and can be accessed from remote by the client application. For easier use the bankgroup stores the information of the last selected customer and bank. * @author	X */@Remote(IBankgroup.class)@Stateful(name = "BankgroupBean")public class BankgroupBean implements IBankgroup {		/**	 * generated variable, constant and association declarations	 *	 */	/**	 * @generated	attribute definition	 */		private int selectedCustomerNumber = -1;	/**	 * @generated	attribute definition	 */		private int selectedBankCode = -1;	/**	 * @generated	attribute definition	 */		@PersistenceContext	private EntityManager manager;	/**	 * variable for association to banks	 */		@OneToMany(cascade = {		CascadeType.ALL	})	private java.util.Set<Bank> banks = new java.util.HashSet<Bank>();		/**	 * generated constructor implementations	 *	 */	/**	 * @generated	constructor for class '<em><b>BankgroupBean</b></em>'	 */	public BankgroupBean() {		/* PROTECTED REGION ID(java.constructor.StandardConstructorBankgroupBean) ENABLED START */		// TODO: implementation of constructor for class 'BankgroupBean'		/* PROTECTED REGION END */	}		/**	 * generated derived attribute method implementations	 *	 */		/**	 * generated association method implementations	 *	 */	public java.util.Set<Bank> getBanks() {		return java.util.Collections.unmodifiableSet(banks);	}		/**	 * accessor for association to banks	 * @see {@link getBanks}	 */	public void insertInBanks(Bank banks) {		if (this.banks.contains(banks)) {			return;		}		this.banks.add(banks);	}		/**	 * accessor for association to banks	 * @see {@link getBanks}	 */	public void removeFromBanks(Bank banks) {		if (!this.banks.contains(banks)) {			return;		}		this.banks.remove(banks);	}		/**	 * generated abstract method declaration	 *	 */		/**	 * generated normal method implementations	 *	 */		/**	 * generated getter and setter method implementations	 *	 */	/**	 * @generated	getter for the attribute '<em><b>selectedCustomerNumber</b></em>'	 */	public int getSelectedCustomerNumber() {		return selectedCustomerNumber;	}		/**	 * documented here {@link getSelectedCustomerNumber()}	 * @generated	setter method for the attribute '<em><b>selectedCustomerNumber</b></em>'	 */	public void setSelectedCustomerNumber(int selectedCustomerNumber) {		this.selectedCustomerNumber = selectedCustomerNumber;	}		/**	 * @generated	getter for the attribute '<em><b>selectedBankCode</b></em>'	 */	public int getSelectedBankCode() {		return selectedBankCode;	}		/**	 * documented here {@link getSelectedBankCode()}	 * @generated	setter method for the attribute '<em><b>selectedBankCode</b></em>'	 */	public void setSelectedBankCode(int selectedBankCode) {		this.selectedBankCode = selectedBankCode;	}		/**	 * @generated	getter for the attribute '<em><b>manager</b></em>'	 */	public EntityManager getManager() {		return manager;	}		/**	 * documented here {@link getManager()}	 * @generated	setter method for the attribute '<em><b>manager</b></em>'	 */	public void setManager(EntityManager manager) {		this.manager = manager;	}		/**	 * generated methods from the implementing interface(s)	 * IBankgroup	 *	 */	/**	 * @generated	method stub for further implementation	 * @param	name		 * @return		 */	public int createBank(String name) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208002946134_562226_1163) ENABLED START */		// TODO: implementation of method 'IBankgroup.createBank(...)'		int returnValue = 0;		for (Bank bank : banks) {			if (bank.getName().equals(name)) {				selectedBankCode = bank.getBankcode();				return selectedBankCode;			}		}		Bank bank = new Bank(name);		try {			manager.persist(bank);			insertInBanks(bank);			selectedBankCode = bank.getBankcode();			returnValue = selectedBankCode;		} catch (NullPointerException npe) {			npe.printStackTrace();			returnValue = -1;		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	bankCode		 * @return		 */	public boolean selectBank(int bankCode) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208002956780_874740_1167) ENABLED START */		// TODO: implementation of method 'IBankgroup.selectBank(...)'		boolean returnValue = false;		Bank selectedBank = manager.find(Bank.class, bankCode);		try {			selectedBankCode = selectedBank.getBankcode();			returnValue = true;		} catch (NullPointerException npe) {			npe.printStackTrace();		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	bankcode		 * @return		 */	public boolean removeBank(int bankcode) {		/* PROTECTED REGION ID(java.implementation._14_0_1_590059_1215715465281_88815_1112) ENABLED START */		// TODO: implementation of method 'IBankgroup.removeBank(...)'		boolean returnValue = false;		Bank bank = manager.find(Bank.class, bankcode);		try {			removeFromBanks(bank);			manager.remove(bankcode);			returnValue = true;		} catch (NullPointerException npe) {			npe.printStackTrace();		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	firstname		 * @param	sirname		 * @param	address		 * @param	postalCode		 * @param	city		 * @return		 */	public int createCustomer(String firstname, String sirname, String address, String postalCode, String city) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003008644_132990_1171) ENABLED START */		// TODO: implementation of method 'IBankgroup.createCustomer(...)'		int returnValue = 0;		Bank selectedBank = manager.find(Bank.class, selectedBankCode);		for (Customer customer : selectedBank.getCustomers()) {			if (customer.getFirstname().equals(firstname) && customer.getSirname().equals(sirname) && customer.getAddress().equals(address) && customer.getPostalCode().equals(postalCode) && customer.getCity().equals(city)) {				selectedCustomerNumber = customer.getCustomerNumber();				return selectedCustomerNumber;			}		}		Customer customer = new Customer(firstname, sirname, address, postalCode, city); /*, birthday*/		try {			manager.persist(customer);			selectedBank.insertInCustomers(customer);			returnValue = customer.getCustomerNumber();		} catch (NullPointerException npe) {			System.out.println("bankgroupBean: " + npe.toString());			returnValue = -1;		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	customerNumber		 * @return		 */	public boolean selectCustomer(int customerNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003078014_355492_1182) ENABLED START */		// TODO: implementation of method 'IBankgroup.selectCustomer(...)'		boolean returnValue = false;		Bank selectedBank = manager.find(Bank.class, selectedBankCode);		Customer selectedCustomer = manager.find(Customer.class, customerNumber);		try {			if (selectedBank.existCustomer(customerNumber)) {				selectedCustomerNumber = selectedCustomer.getCustomerNumber();				returnValue = true;			} else {				System.out.println("Im BankgroupBean konnte der Kunde " + customerNumber + " in der Bank " + selectedBankCode + " nicht gefunden werden!");			}		} catch (NullPointerException npe) {			if (selectedCustomer == null) {				System.out.println("Customer-Objekt ist null.");			}			if (selectedBank == null) {				System.out.println("Bank-Objekt ist null.");			}			npe.printStackTrace();		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	customerNumber		 * @return		 */	public boolean removeCustomer(int customerNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_1_590059_1215715487015_177931_1116) ENABLED START */		// TODO: implementation of method 'IBankgroup.removeCustomer(...)'		boolean returnValue = false;		Customer customer = manager.find(Customer.class, customerNumber);		try {			for (Account account : customer.getAccounts()) {				manager.remove(account);			}			for (Bank bank : customer.getBanks()) {				bank.removeFromCustomers(customer);			}			manager.remove(customer);		} catch (NullPointerException npe) {			npe.printStackTrace();		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @return		 */	public int createAccount() {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003095078_520559_1186) ENABLED START */		// TODO: implementation of method 'IBankgroup.createAccount(...)'		int returnValue = 0;		Bank selectedBank = manager.find(Bank.class, selectedBankCode);		Customer selectedCustomer = manager.find(Customer.class, selectedCustomerNumber);		Account account = new Account();		try {			if (selectedBank.existCustomer(selectedCustomer.getCustomerNumber())) {				manager.persist(account);				selectedCustomer.insertInAccounts(account);				returnValue = account.getAccountNumber();			} else {				returnValue = -2;			}		} catch (NullPointerException npe) {			System.out.println(npe.toString());			returnValue = -1;		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	accountNumber		 * @return		 */	public boolean removeAccount(int accountNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_1_590059_1215715505703_882505_1120) ENABLED START */		// TODO: implementation of method 'IBankgroup.removeAccount(...)'		boolean returnValue = false;		Account account = manager.find(Account.class, accountNumber);		try {			Customer customer = manager.find(Customer.class, account.getOwner().getCustomerNumber());			customer.removeFromAccounts(account);			manager.remove(account);			returnValue = true;		} catch (NullPointerException npe) {			npe.printStackTrace();		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	accountNumber		 * @return		 */	public float getBalance(int accountNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003132192_569513_1194) ENABLED START */		// TODO: implementation of method 'IBankgroup.getBalance(...)'		float returnValue = 0f;		Customer selectedCustomer = manager.find(Customer.class, selectedCustomerNumber);		Account account = manager.find(Account.class, accountNumber);		try {			if (selectedCustomer.existAccount(account.getAccountNumber())) {				returnValue = account.getBalance();			} else {				returnValue = -1;			}		} catch (NullPointerException npe) {			//if (selectedCustomer == null) {			//	System.out.println("Kein CustomerObjekt über den Entity-Manager");			//}			//npe.printStackTrace();			returnValue = -1;		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	accountNumber		 * @param	amount		 */	public void withdraw(int accountNumber, float amount) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003175925_43986_1198) ENABLED START */		// TODO: implementation of method 'IBankgroup.withdraw(...)'		Customer selectedCustomer = manager.find(Customer.class, selectedCustomerNumber);		Account account = selectedCustomer.getAccount(accountNumber);		try {			if (selectedCustomer.existAccount(account.getAccountNumber())) {				account.withdraw(amount);			} else {				return;			}		} catch (NullPointerException npe) {			if (selectedCustomer == null) {				System.out.println("Kein CustomerObjekt über den Entity-Manager");			}			npe.printStackTrace();		}		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	accountNumber		 * @param	amount		 */	public void deposit(int accountNumber, float amount) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003203124_397555_1203) ENABLED START */		// TODO: implementation of method 'IBankgroup.deposit(...)'		Customer selectedCustomer = manager.find(Customer.class, selectedCustomerNumber);		Account account = manager.find(Account.class, accountNumber);		try {			if (selectedCustomer.existAccount(account.getAccountNumber())) {				account.deposit(amount);			} else {				return;			}		} catch (NullPointerException npe) {			if (selectedCustomer == null) {				System.out.println("Kein CustomerObjekt über den Entity-Manager");			}			if (account == null) {				System.out.println("Kein AccountObjekt beim Kunden " + selectedCustomer.getCustomerNumber() + " vorhanden.");			}			npe.printStackTrace();		}		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	sourceAccountNumber		 * @param	targetBankcode		 * @param	targetCustomerNumber		 * @param	targetAccountNumber		 * @param	amount		 * @return		 */	public boolean bankTransfer(int sourceAccountNumber, int targetBankcode, int targetCustomerNumber, int targetAccountNumber, float amount) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003225877_762067_1208) ENABLED START */		// TODO: implementation of method 'IBankgroup.bankTransfer(...)'		boolean returnValue = false;		Customer selectedCustomer = manager.find(Customer.class, selectedCustomerNumber);		Account sourceAccount = manager.find(Account.class, sourceAccountNumber);		try {			if (selectedCustomer.existAccount(sourceAccount.getAccountNumber())) {				if (sourceAccount.withdraw(amount) == amount) {					Bank targetBank = manager.find(Bank.class, targetBankcode);					Customer targetCustomer = manager.find(Customer.class, targetCustomerNumber);					Account targetAccount = manager.find(Account.class, targetAccountNumber);					if (targetBank.existCustomer(targetCustomer.getCustomerNumber()) && targetCustomer.existAccount(targetAccount.getAccountNumber())) {						targetAccount.deposit(amount);						manager.flush();						return true;					}					manager.refresh(sourceAccount);					manager.refresh(targetAccount);				} else {					System.out.println("Abbuchung der " + amount + "Euro vom Quellkonto (" + sourceAccount + ") nicht möglich.");					manager.refresh(sourceAccount);				}			} else {				System.out.println("Konto " + sourceAccountNumber + " gehört nicht zum ausgewählten Kunden " + selectedCustomerNumber + ".");			}		} catch (NullPointerException npe) {			npe.printStackTrace();		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	accountNumber		 * @return		 */	public String getStatement(int accountNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003321073_666668_1219) ENABLED START */		// TODO: implementation of method 'IBankgroup.getStatement(...)'		String returnValue = null;		Customer selectedCustomer = manager.find(Customer.class, selectedCustomerNumber);		Account account = manager.find(Account.class, accountNumber);		returnValue = "";		try {			if (selectedCustomer.existAccount(account.getAccountNumber())) {				returnValue = account.getStatement();			}		} catch (NullPointerException npe) {			if (selectedCustomer == null) {				System.out.println("Kein CustomerObjekt über den Entity-Manager");			}			npe.printStackTrace();		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	customerNumber		 */	public void printAccounts(int customerNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003362243_749289_1225) ENABLED START */		// TODO: implementation of method 'IBankgroup.printAccounts(...)'		Customer selectedCustomer = manager.find(Customer.class, customerNumber);		try {			selectedCustomer.printAccounts();		} catch (NullPointerException npe) {			System.out.println("Der Kunde mit der Nummer " + customerNumber + " ist nicht vorhanden!");		}		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	bankcode		 */	public void printCustomers(int bankcode) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003422609_199859_1231) ENABLED START */		// TODO: implementation of method 'IBankgroup.printCustomers(...)'		Bank selectedBank = manager.find(Bank.class, bankcode);		selectedBank.printCustomers();		/* PROTECTED REGION END */	}		/**	 * own implementations	 *	 */	/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._14_0_590059_1207998935587_293390_704) ENABLED START */	/* TODO put your own implementation code here */	/* PROTECTED REGION END */}