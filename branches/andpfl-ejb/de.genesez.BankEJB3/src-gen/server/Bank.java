package server;/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1207998531406_106008_477OwnManualImports) ENABLED START *//* TODO: put your own source code here */import javax.persistence.FetchType;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.CascadeType;import javax.persistence.Entity;import javax.persistence.Table;import java.io.Serializable;import javax.persistence.Id;import java.util.Random;import javax.persistence.OneToMany;import java.util.Iterator;/* PROTECTED REGION END *//** * @author X */@Entity@Table(name = "tbl_Bank")public class Bank implements Serializable {		/**	 * generated variable, constant and association declarations	 *	 */		@Id	@GeneratedValue(strategy = GenerationType.AUTO)	private int bankcode;		private String name;	/**	 * variable for association to customers	 */		@OneToMany(cascade = {		CascadeType.ALL	}, fetch = FetchType.EAGER, mappedBy = "bank")	private java.util.Set<Customer> customers = new java.util.HashSet<Customer>();		/**	 * generated constructor implementations	 *	 */	/**	 * @param  name  	 */	public Bank(String name) {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208003529884_972611_1245) ENABLED START */		/* TODO put your own implementation code here */		this.name = name;		/* PROTECTED REGION END */	}		/**	 * @return  	 */	public Bank() {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code.StandardConstructorBank) ENABLED START */		/* TODO put your own implementation code here */		this.name = "<kein Bankname vergeben>";		/* PROTECTED REGION END */	}		/**	 * generated derived attribute method implementations	 *	 */		/**	 * generated association method implementations	 *	 */		public java.util.Set<Customer> getCustomers() {		return java.util.Collections.unmodifiableSet(customers);	}		/**	 * accessor for association to customers	 */	public void insertInCustomers(Customer customers) {		if (this.customers.contains(customers)) {			return;		}		this.customers.add(customers);		customers.setBank(this);	}		/**	 * accessor for association to customers	 */	public void removeFromCustomers(Customer customers) {		if (!this.customers.contains(customers)) {			return;		}		this.customers.remove(customers);	}		/**	 * generated abstract method declaration	 *	 */		/**	 * generated normal method implementations	 *	 */		/**	 * @param  customerNumber  	 * @return  	 */	protected boolean existCustomer(int customerNumber) {				boolean returnValue = false;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208003656336_875743_1252_Bank) ENABLED START */		/* TODO put your own implementation code here */		Iterator<Customer> it = customers.iterator();		while (it.hasNext()) {			Customer temp = it.next();			if (temp.getCustomerNumber() == customerNumber) {				return true;			}		}		/* PROTECTED REGION END */		return returnValue;	}		/**	 */	protected void printCustomers() {				/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208003740366_294383_1261_Bank) ENABLED START */		/* TODO put your own implementation code here */		System.out.println(customers.toString());		/* PROTECTED REGION END */	}		/**	 * @param  other  	 * @return  	 */	public boolean equals(Object other) {				boolean returnValue = false;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208003793002_954880_1265_Bank) ENABLED START */		/* TODO put your own implementation code here */		if (!(other instanceof Bank)) {			returnValue = false;		} else {			Bank temp = (Bank) other;			returnValue = this.name.equals(temp.getName());		}		/* PROTECTED REGION END */		return returnValue;	}		/**	 * @param  customerNumber  	 * @return  	 */	protected Customer getCustomer(int customerNumber) {				Customer returnValue = null;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208213860269_352711_491_Bank) ENABLED START */		/* TODO put your own implementation code here */		try {			Iterator<Customer> it = customers.iterator();			while (it.hasNext()) {				Customer temp = it.next();				if (temp.getCustomerNumber() == customerNumber) {					return temp;				}			}		} catch (NullPointerException npe) {			System.out.println("Kunden heraussuchen: " + npe.toString());			return null;		}		/* PROTECTED REGION END */		return returnValue;	}		/**	 * generated getter and setter method implementations	 *	 */		public int getBankcode() {		return bankcode;	}		public String getName() {		return name;	}		/**	 * generated methods from the implementing interface(s)	 * Serializable	 *	 */		/**	 * own implementations	 *	 */	/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._14_0_590059_1207998531406_106008_477) ENABLED START */	/* TODO put your own implementation code here */	/**	 * @param  customerNumber  	 * @return  	 */	//	protected int createAccount(int customerNumber) {	//			//		int returnValue = 0;	//		Customer customer = getCustomer(customerNumber);	//		try {	//			Account account = new Account();	//			if (customer.addAccount(account)) {	//				return account.getAccountNumber();	//			} else {	//				returnValue = -2;	//			}	//		} catch (NullPointerException npe) {	//			System.out.println(npe.toString());	//			return -2;	//		}	//		return returnValue;	//	}	/**	 * @param  customer  	 * @return  	 */	//	protected boolean addCustomer(Customer customer) {	//			//		boolean returnValue = false;	//		if (!customers.contains(customer)) {	//			customers.add(customer);	//			returnValue = true;	//		} else {	//			returnValue = false;	//		}	//		return returnValue;	//	}	/**	 * @param  customerNumber  	 * @return  	 */	//	protected boolean removeCustomer(int customerNumber) {	//			//		boolean returnValue = false;	//		try {	//			Iterator<Customer> it = customers.iterator();	//			while (it.hasNext()) {	//				Customer temp = it.next();	//				if (temp.getCustomerNumber() == customerNumber) {	//					customers.remove(temp);	//					returnValue = true;	//					break;	//				}	//			}	//		} catch (NullPointerException npe) {	//			System.out.println(npe.toString());	//			return false;	//		}	//		return returnValue;	//	}	/* PROTECTED REGION END */}