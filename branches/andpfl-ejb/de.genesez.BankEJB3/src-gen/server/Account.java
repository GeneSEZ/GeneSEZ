package server;/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1207998892896_185347_634OwnManualImports) ENABLED START *//* TODO: put your own source code here */import javax.persistence.FetchType;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.ManyToOne;import javax.persistence.CascadeType;import javax.persistence.Entity;import javax.persistence.Table;import java.io.Serializable;import java.util.HashSet;import javax.persistence.Id;import javax.persistence.OneToMany;import java.util.Iterator;/* PROTECTED REGION END *//** * @author X */@Entity@Table(name = "tbl_Account")public class Account implements Serializable {		/**	 * generated variable, constant and association declarations	 *	 */	/** 	 * @see {@link getBalance} 	 */		private float balance = 0.0f;		@Id	@GeneratedValue(strategy = GenerationType.AUTO)	private int accountNumber;		private int statementNumber = 0;	/**	 * variable for association to statements	 */		@OneToMany(cascade = {		CascadeType.ALL	}, fetch = FetchType.EAGER)	private java.util.Set<Statement> statements = new java.util.HashSet<Statement>();	/**	 * variable for association to owner	 */		@ManyToOne(cascade = {		CascadeType.ALL	}, fetch = FetchType.EAGER)	private Customer owner;		/**	 * generated constructor implementations	 *	 */	/**	 * @return  	 */	public Account() {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code.StandardConstructorAccount) ENABLED START */		/* TODO put your own implementation code here */		/* PROTECTED REGION END */	}		/**	 * generated derived attribute method implementations	 *	 */		/**	 * generated association method implementations	 *	 */		public Customer getOwner() {		return owner;	}		/**	 * accessor for association to owner	 */		/**	 * accessor for association to owner	 */	public void setOwner(Customer owner) {		this.owner = owner;	}		/**	 * accessor for association to owner	 */		/**	 * generated abstract method declaration	 *	 */		/**	 * generated normal method implementations	 *	 */		/**	 * @param  amount  	 * @return  	 */	public float withdraw(float amount) {				float returnValue = 0;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208212563143_720079_470_Account) ENABLED START */		/* TODO put your own implementation code here */		if (balance >= amount) {			balance -= amount;			statements.add(new Statement("Withdraw of " + amount + " Euro\nNew balance is " + balance + ".\n\n", statementNumber));			statementNumber++;			returnValue = amount;		}		/* PROTECTED REGION END */		return returnValue;	}		/**	 * @param  amount  	 */	public void deposit(float amount) {				/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208212613626_554815_474_Account) ENABLED START */		/* TODO put your own implementation code here */		balance += amount;		statements.add(new Statement("Deposit of " + amount + " Euro\nNew balance is " + balance + ".\n\n", statementNumber));		statementNumber++;		/* PROTECTED REGION END */	}		/**	 * @return  	 */	public String getStatement() {				String returnValue = null;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1209547538185_661055_970_Account) ENABLED START */		/* TODO put your own implementation code here */		returnValue = "";		boolean printed = false;		try {			Iterator<Statement> it = statements.iterator();			while (it.hasNext()) {				Statement temp = it.next();				if (!temp.hasBeenPrinted()) {					printed = true;					returnValue += temp.getStatement();				}			}		} catch (NullPointerException npe) {			npe.printStackTrace();			returnValue = "-1";		}		if (!printed) {			returnValue = "There are currently no statements available!\n";		}		/* PROTECTED REGION END */		return returnValue;	}		/**	 * generated getter and setter method implementations	 *	 */		/**	 * 	 */	public float getBalance() {		return balance;	}		public int getAccountNumber() {		return accountNumber;	}		/**	 * generated methods from the implementing interface(s)	 * Serializable	 *	 */		/**	 * own implementations	 *	 */	/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._14_0_590059_1207998892896_185347_634) ENABLED START */	/* TODO put your own implementation code here */	/**	 */	//	private void init() {	//			//		//accountNumber = new Random().nextInt(999999);	//		statements = new HashSet<Statement>();	//		statementNumber = 0;	//		balance = 0;	//	//	}	/* PROTECTED REGION END */}