package server;/* PROTECTED REGION ID(java.mclassifier.other.import.code_14_0_590059_1207998892896_185347_634) ENABLED START *//* TODO put your imports here */import server.Statement;import javax.persistence.CascadeType;import javax.persistence.Entity;import javax.persistence.Table;import java.util.ArrayList;import java.io.Serializable;import javax.persistence.Id;import java.util.Random;import javax.persistence.OneToMany;import java.util.Iterator;/* PROTECTED REGION END *//** * @author X */@Entity@Table(name = "Account")public class Account implements Serializable {		// ////////////////////////////////////////////////////////////////////////	// generated variable, constant and association declarations	// ////////////////////////////////////////////////////////////////////////		/** 	 * @see {@link getBalance} 	 */		private float balance = 0.0f;		@Id	private int accountNumber;		private int statementNumber;	/**	 * variable for association to statements	 */		@OneToMany(cascade = {		CascadeType.ALL		})	private java.util.List<Statement> statements = new java.util.ArrayList<Statement>();		// ////////////////////////////////////////////////////////////////////////	// generated constructor implementations	// ////////////////////////////////////////////////////////////////////////		/**	 */	public Account() {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208531503387_106775_894) ENABLED START */		/* TODO put your own implementation code here */		init();		/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated derived attribute method implementations	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated association method implementations	// ////////////////////////////////////////////////////////////////////////		public java.util.List<Statement> getStatements() {		return java.util.Collections.unmodifiableList(statements);	}		/**	 * accessor for association to statements	 */	public void insertInStatements(Statement _in) {		if (statements.contains(_in)) {			return;		}		statements.add(_in);	}		/**	 * accessor for association to statements	 */	public void removeFromStatements(Statement _ex) {		if (!statements.contains(_ex)) {			return;		}		statements.remove(_ex);	}		// ////////////////////////////////////////////////////////////////////////	// generated abstract method declaration	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated normal method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @return  	 */	public String getStatement() {				String returnValue = null;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208002682615_193155_1127) ENABLED START */		/* TODO put your own implementation code here */		returnValue = "";		boolean printed = false;		try {			Iterator<Statement> it = statements.iterator();			while (it.hasNext()) {				Statement temp = it.next();				if (!temp.hasBeenPrinted()) {					printed = true;					returnValue += temp.getStatement();				}			}		} catch (NullPointerException npe) {			npe.printStackTrace();			return "-1";		}		if (!printed) {			return "There are currently no statements available!\n";		}		/* PROTECTED REGION END */		return returnValue;	}		/**	 * @param  amount  	 * @return  	 */	public float withdraw(float amount) {				float returnValue = 0;		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208212563143_720079_470) ENABLED START */		/* TODO put your own implementation code here */		if (balance >= amount) {			balance -= amount;			statements.add(new Statement("Withdraw of " + amount + " Euro\nNew balance is " + balance + ".\n\n", statementNumber));			statementNumber++;			returnValue = amount;		}		/* PROTECTED REGION END */		return returnValue;	}		/**	 * @param  amount  	 */	public void deposit(float amount) {				/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208212613626_554815_474) ENABLED START */		/* TODO put your own implementation code here */		balance += amount;		statements.add(new Statement("Deposit of " + amount + " Euro\nNew balance is " + balance + ".\n\n", statementNumber));		statementNumber++;		//zugang = false;		/* PROTECTED REGION END */	}		/**	 */	private void init() {				/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1208519977473_478852_730) ENABLED START */		/* TODO put your own implementation code here */		accountNumber = new Random().nextInt(999999);		statements = new ArrayList<Statement>();		statementNumber = 0;		balance = 0;		/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated getter and setter method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * 	 */	public float getBalance() {		return balance;	}		public int getAccountNumber() {		return accountNumber;	}		public void setAccountNumber(int _accountNumber) {		accountNumber = _accountNumber;	}		// ////////////////////////////////////////////////////////////////////////	// own implementations	// ////////////////////////////////////////////////////////////////////////		/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._14_0_590059_1207998892896_185347_634) ENABLED START */	/* TODO put your own implementation code here */	/* PROTECTED REGION END */}