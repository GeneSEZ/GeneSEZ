package server;/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_590059_1207998915198_123982_658OwnManualImports) ENABLED START *//* TODO: put your own source code here */import javax.persistence.JoinTable;import javax.persistence.GenerationType;import javax.persistence.GeneratedValue;import javax.persistence.CascadeType;import javax.persistence.Entity;import javax.persistence.Table;import javax.persistence.ManyToMany;import java.io.Serializable;import javax.persistence.Id;import javax.persistence.OneToMany;/* PROTECTED REGION END *//** * The customer class provides information of a bank customer like the first- and sirname and the whole address. The customer can be identified by a unique customerNumber. The class administrates the accounts of this customer. One customer can have accounts at several banks. * @author	X */@Entity@Table(name = "tbl_Customer")public final class Customer implements Serializable {		/**	 * generated variable, constant and association declarations	 *	 */	/**	 * @generated	attribute definition	 */		@Id	@GeneratedValue(strategy = GenerationType.AUTO)	private int customerNumber;	/**	 * @generated	attribute definition	 */		private String firstname;	/**	 * @generated	attribute definition	 */		private String sirname;	/**	 * @generated	attribute definition	 */		private String address;	/**	 * @generated	attribute definition	 */		private String postalCode;	/**	 * @generated	attribute definition	 */		private String city;	/**	 * variable for association to accounts	 */		@OneToMany(cascade = {		CascadeType.ALL	}, mappedBy = "owner")	private java.util.Set<Account> accounts = new java.util.HashSet<Account>();	/**	 * variable for association to banks	 */		@ManyToMany(cascade = {		CascadeType.ALL	})	@JoinTable(name = "Bank_Customer")	private java.util.Set<Bank> banks = new java.util.HashSet<Bank>();		/**	 * generated constructor implementations	 *	 */	/**	 * @generated	constructor for class '<em><b>Customer</b></em>'	 * @param	firstname		 * @param	sirname		 * @param	address		 * @param	postalCode		 * @param	city		 */	public Customer(String firstname, String sirname, String address, String postalCode, String city) {		/* PROTECTED REGION ID(java.constructor._14_0_590059_1208003925192_273415_1281) ENABLED START */		// TODO: implementation of constructor for class 'Customer'		this.firstname = firstname;		this.sirname = sirname;		this.postalCode = postalCode;		this.city = city;		this.address = address;		/* PROTECTED REGION END */	}		/**	 * @generated	constructor for class '<em><b>Customer</b></em>'	 */	public Customer() {		/* PROTECTED REGION ID(java.constructor.StandardConstructorCustomer) ENABLED START */		// TODO: implementation of constructor for class 'Customer'		this.firstname = "";		this.sirname = "";		this.postalCode = "";		this.city = "";		this.address = "";		/* PROTECTED REGION END */	}		/**	 * generated derived attribute method implementations	 *	 */		/**	 * generated association method implementations	 *	 */	public java.util.Set<Account> getAccounts() {		return java.util.Collections.unmodifiableSet(accounts);	}		/**	 * accessor for association to accounts	 */	public void insertInAccounts(Account accounts) {		if (this.accounts.contains(accounts)) {			return;		}		this.accounts.add(accounts);		accounts.setOwner(this);	}		/**	 * accessor for association to accounts	 */	public void removeFromAccounts(Account accounts) {		if (!this.accounts.contains(accounts)) {			return;		}		this.accounts.remove(accounts);	}		public java.util.Set<Bank> getBanks() {		return java.util.Collections.unmodifiableSet(banks);	}		/**	 * accessor for association to banks	 */	public void insertInBanks(Bank banks) {		if (this.banks.contains(banks)) {			return;		}		this.banks.add(banks);		banks.insertInCustomers(this);	}		/**	 * accessor for association to banks	 */	public void removeFromBanks(Bank banks) {		if (!this.banks.contains(banks)) {			return;		}		this.banks.remove(banks);		banks.removeFromCustomers(this);	}		/**	 * generated abstract method declaration	 *	 */		/**	 * generated normal method implementations	 *	 */		/**	 * @generated	method stub for further implementation	 * @param	accountNumber		 * @return		 */	protected boolean existAccount(int accountNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003945391_877977_1288) ENABLED START */		// TODO: implementation of method 'Customer.existAccount(...)'		for (Account account : accounts) {			if (account.getAccountNumber() == accountNumber) {				return true;			}		}		return false;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	other		 * @return		 */	public boolean equals(Object other) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208003970407_796163_1292) ENABLED START */		// TODO: implementation of method 'Customer.equals(...)'		if (other instanceof Customer) {			Customer temp = (Customer) other;			if (this.sirname.equals(temp.getSirname()) && this.firstname.equals(temp.getFirstname())) {				return true;			}		}		return false;		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 */	protected void printAccounts() {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208213007052_920060_483) ENABLED START */		// TODO: implementation of method 'Customer.printAccounts(...)'		System.out.println(accounts.toString());		/* PROTECTED REGION END */	}		/**	 * @generated	method stub for further implementation	 * @param	accountNumber		 * @return		 */	protected Account getAccount(int accountNumber) {		/* PROTECTED REGION ID(java.implementation._14_0_590059_1208213952221_534951_499) ENABLED START */		// TODO: implementation of method 'Customer.getAccount(...)'		Account returnValue = null;		for (Account account : accounts) {			if (account.getAccountNumber() == accountNumber) {				return account;			}		}		return returnValue;		/* PROTECTED REGION END */	}		/**	 * generated getter and setter method implementations	 *	 */	/**	 * @generated	getter for the attribute '<em><b>customerNumber</b></em>'	 */	public int getCustomerNumber() {		return customerNumber;	}		/**	 * documented here {@link getCustomerNumber()}	 * @generated	setter method for the attribute '<em><b>customerNumber</b></em>'	 */	public void setCustomerNumber(int customerNumber) {		this.customerNumber = customerNumber;	}		/**	 * @generated	getter for the attribute '<em><b>firstname</b></em>'	 */	public String getFirstname() {		return firstname;	}		/**	 * documented here {@link getFirstname()}	 * @generated	setter method for the attribute '<em><b>firstname</b></em>'	 */	public void setFirstname(String firstname) {		this.firstname = firstname;	}		/**	 * @generated	getter for the attribute '<em><b>sirname</b></em>'	 */	public String getSirname() {		return sirname;	}		/**	 * documented here {@link getSirname()}	 * @generated	setter method for the attribute '<em><b>sirname</b></em>'	 */	public void setSirname(String sirname) {		this.sirname = sirname;	}		/**	 * @generated	getter for the attribute '<em><b>address</b></em>'	 */	public String getAddress() {		return address;	}		/**	 * documented here {@link getAddress()}	 * @generated	setter method for the attribute '<em><b>address</b></em>'	 */	public void setAddress(String address) {		this.address = address;	}		/**	 * @generated	getter for the attribute '<em><b>postalCode</b></em>'	 */	public String getPostalCode() {		return postalCode;	}		/**	 * documented here {@link getPostalCode()}	 * @generated	setter method for the attribute '<em><b>postalCode</b></em>'	 */	public void setPostalCode(String postalCode) {		this.postalCode = postalCode;	}		/**	 * @generated	getter for the attribute '<em><b>city</b></em>'	 */	public String getCity() {		return city;	}		/**	 * documented here {@link getCity()}	 * @generated	setter method for the attribute '<em><b>city</b></em>'	 */	public void setCity(String city) {		this.city = city;	}		/**	 * generated methods from the implementing interface(s)	 * Serializable	 *	 */		/**	 * own implementations	 *	 */	/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._14_0_590059_1207998915198_123982_658) ENABLED START */	/* TODO put your own implementation code here */	/**	 * @param  account  	 * @return  	 */	//	protected boolean addAccount(Account account) {	//			//		boolean returnValue = false;	//		if (account != null && this.accounts.add(account)) {	//			returnValue = true;	//		}	//		return returnValue;	//	}	/**	 * @param  accountNumber  	 * @return  	 */	//	protected boolean removeAccount(int accountNumber) {	//			//		boolean returnValue = false;	//		Iterator<Account> it = accounts.iterator();	//		while (it.hasNext()) {	//			Account temp = it.next();	//			if (temp.getAccountNumber() == accountNumber) {	//				accounts.remove(temp);	//				returnValue = true;	//				break;	//			}	//		}	//		return returnValue;	//	}	/* PROTECTED REGION END */}