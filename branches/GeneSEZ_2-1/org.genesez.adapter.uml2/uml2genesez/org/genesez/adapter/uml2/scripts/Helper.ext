/**
 * Conversion functions to display full qualified names of model elements
 * 
 * @author	tobias haubold
 * @date	2008-07-17
 */
import uml;

/**
 * Checks if the operation is a constructor or not.
 * @return true if its a constructor, otherwise false
 */
Boolean isConstructor(Operation this) :
	getAppliedStereotypes().exists(e|e.name == "Create" || e.name == "create");

/**
 * Checks if the operation is a destructor or not.
 * @return true if its a destructor, otherwise false
 */
Boolean isDestructor(Operation this) :
	getAppliedStereotypes().exists(e|e.name == "Destroy" || e.name == "destroy");

/**
 * Checks if the parameter is a return parameter.
 * @return true if its a return parameter, otherwise false
 */
Boolean isReturnParameter(Parameter this) :
	direction.toString() == "return";

/**
 * calculates the full qualfied name of a model
 * @return	full qualified name
 */
String fqn(Model this) : name;

/**
 * calculates the full qualfied name of a package, i.e. all package names concatenated by :: without the name of the model element
 * @return	full qualified name
 */
String fqn(Package this) : nestingPackage != null && nestingPackage.metaType != Model ? nestingPackage.fqn() + "::" + name : name;

/**
 * calculates the full qualfied name of a classifier
 * @return	full qualified name
 */
String fqn(Classifier this) : owner.fqn() + "::" + name;

/**
 * calculates the full qualfied name of an operation
 * @return	full qualified name
 */
String fqn(Operation this) : owner.fqn() + "::" + name + "(...)";

/**
 * calculates the full qualfied name of a parameter
 * @return	full qualified name
 */
String fqn(Parameter this) : owner.fqn() + "::" + name;

/**
 * calculates the full qualfied name of a property
 * @return	full qualified name
 */
String fqn(Property this) : owner.fqn() + "::" + name;


/**
 * calculates the full qualfied name of a named element
 * @return	full qualified name
 */
String fqn(NamedElement this) : owner != null ? owner.fqn() + "::" + name : name;

/**
 * calculates the full qualfied name of a named element
 * @return	full qualified name
 */
String fqn(Element this) : owner != null ? owner.fqn() + "::" + toString() : toString();
