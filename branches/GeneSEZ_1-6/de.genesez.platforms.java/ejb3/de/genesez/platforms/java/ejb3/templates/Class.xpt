«REM»
	template for ejb3 class
	
	@author		andre pflueger
	@date		2009-02-22
	@version	1.1
«ENDREM»

«REM» import code gen meta model «ENDREM»
«IMPORT gcore»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::platforms::common::log::Log»

«EXTENSION de::genesez::platforms::common::AccessHelper»
«EXTENSION de::genesez::platforms::common::GeneralHelper»
«EXTENSION de::genesez::platforms::common::Conversion»
«EXTENSION de::genesez::platforms::common::m2t::Helper»

«EXTENSION de::genesez::platforms::java::scripts::Type»
«EXTENSION de::genesez::platforms::java::scripts::Naming»
«EXTENSION de::genesez::platforms::java::scripts::Conversion»



«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM» generates a class «ENDREM»
«DEFINE Root FOR MClass-»
	«REM»
		generates the rest of the class 
	«ENDREM»
	«EXPAND de::genesez::platforms::java::java5::templates::Class::Root-»
«ENDDEFINE»

«REM»
	evaluates the stereotypes "ejb3Remote" and "ejb3Local"
«ENDREM»
«DEFINE RemoteLocal FOR MClassifier-»
	«IF hasStereotype("ejb3SessionBean")-»
		«IF hasStereotype("ejb3Remote")»
			«IF hasUtilizableValue("ejb3Remote", "name")-»
				«REM»erzeuge remote interface mit angegebenem namen«ENDREM»
				@Remote(I«getTaggedValue("ejb3Remote", "name")-».class)
				«REM»«EXPAND _Interface(getTaggedValue("ejb3Remote", "name"), "")-»«ENDREM»
			«ELSE»
				«REM»erzeuge remote interface mit standardnamen«ENDREM»
				«REM»«EXPAND _Interface(asTypeName(), "Remote")-»«ENDREM»
			«ENDIF»
		«ENDIF»
		«IF hasStereotype("ejb3Local")-»
			«IF hasUtilizableValue("ejb3Local", "name")-»
				«REM»erzeuge local interface mit angegebenem namen«ENDREM»
				@Local(I«getTaggedValue("ejb3Local", "name")-».class)
				«REM»«EXPAND _Interface(getTaggedValue("ejb3Local", "name"), "")-»«ENDREM»
			«ELSE»
				«REM»erzeuge local interface mit standardnamen«ENDREM»
				«REM»«EXPAND _Interface(asTypeName(), "Local")-»«ENDREM»
			«ENDIF»
		«ENDIF»
	«ELSEIF hasStereotype("ejb3Remote")»
		@Remote
	«ELSEIF hasStereotype("ejb3Local")»
		@Local	
	«ENDIF»
«ENDDEFINE»

«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»  «ENDREM»
«DEFINE _Annotation FOR MClass-»	
	«REM» SessionBean «ENDREM»
	«EXPAND _SessionBean-»
	
	«REM» MessageDriven «ENDREM»
	«EXPAND _MessageDriven-»
	
	«REM» container-managed transaction demarcation «ENDREM»	
	«EXPAND Operation::CMTransactionality»
	
	«REM» stereotype "ejb3EJB" «ENDREM»
	«EXPAND Attribute::EJB-»
«ENDDEFINE»

«REM» evaluates the stereotype "ejb3SessionBean"«ENDREM»
«DEFINE _SessionBean FOR MClass-»
	«IF hasStereotype("ejb3SessionBean")-»
		«EXPAND RemoteLocal-»	
		«IF hasTaggedValue("ejb3SessionBean", "stateful", "true")»
			@Stateful(
		«ELSEIF hasTaggedValue("ejb3SessionBean", "stateful", "false")-»
			@Stateless(
		«ENDIF-»
		«IF hasUtilizableValue("ejb3SessionBean", "name")-»
			name = "«getTaggedValue("ejb3SessionBean", "name")-»"
		«ELSE-»
			name = "«asTypeName()-»"
		«ENDIF-» 
 		«IF hasUtilizableValue("ejb3SessionBean", "mappedName")-»
 			, mappedName = "«getTaggedValue("ejb3SessionBean", "mappedName")-»"
 		«ENDIF-»
 		«IF hasUtilizableValue("ejb3SessionBean", "description")-»
 			, description = "«getTaggedValue("ejb3SessionBean", "description")-»"
 		«ENDIF-»)
		«REM» interceptors «ENDREM»
		«EXPAND _Interceptor»
		«REM»
		«IF hasTaggedValue("ejb3SessionBean", "stateful", "false")»
			«EXPAND _JWS»
		«ENDIF»
		«ENDREM»
	«ENDIF-»
«ENDDEFINE»

«REM» evaluates the stereotype "ejb3MessageDriven"«ENDREM»
«DEFINE _MessageDriven FOR MClass-»
	«IF hasStereotype("ejb3MessageDrivenBean")»
		@MessageDriven(
		«IF hasUtilizableValue("ejb3MessageDrivenBean", "name")-»
			name = "«getTaggedValue("ejb3MessageDrivenBean", "name")-»"
		«ELSE-»
			name = "«asTypeName()-»"
		«ENDIF-» 
 		«IF hasUtilizableValue("ejb3MessageDrivenBean", "mappedName")-»
 			, mappedName = "«getTaggedValue("ejb3MessageDrivenBean", "mappedName")-»"
 		«ENDIF-»
 		«IF hasUtilizableValue("ejb3MessageDrivenBean", "description")-»
 			, description = "«getTaggedValue("ejb3MessageDrivenBean", "description")-»"
 		«ENDIF-»
 		«IF hasStereotype("ejb3ActivationConfigProperty")-»
 			«IF hasUtilizableValue("ejb3ActivationConfigProperty", "name") && 
 				hasUtilizableValue("ejb3ActivationConfigProperty", "value")-»
 				, activationConfig = {
 				«FOREACH getTaggedValue("ejb3ActivationConfigProperty", "name").getElements() AS name SEPARATOR ","»
 					@ActivationConfigProperty(
 						propertyName = "«name-»",  						
 						«LET getTaggedValue("ejb3ActivationConfigProperty", "name").getElements().indexOf(name) AS index-»
 							propertyValue = "«getTaggedValue("ejb3ActivationConfigProperty", "value").getElements().get(index)-»")
 						«ENDLET»
 				«ENDFOREACH»
 				}
 			«ENDIF-»
 		«ENDIF»
 		)			
		«REM» interceptors «ENDREM»
		«EXPAND _Interceptor»
	«ENDIF»
«ENDDEFINE»

«REM»
	evaluates the stereotype "ejb3EntityListener"
«ENDREM»
«DEFINE _EntityListener FOR MClass-»
	«IF hasStereotype("ejb3EntityListener")»
		«IF hasUtilizableValue("ejb3EntityListener", "listeners")-»
			@EntityListeners(«FOREACH getTaggedValue("ejb3EntityListener", "listeners").getElements() AS listeners SEPARATOR ", "»
				«listeners-».class
			«ENDFOREACH-»
			«IF hasTaggedValue("ejb3EntityListener", "generateDefault", "true") && 
				operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true"))-»
				, «asTypeName()+"Listener.class"-»
				«EXPAND _EntityListenerClass(asTypeName()+"Listener")-»
			«ENDIF-»)
		«ELSEIF hasTaggedValue("ejb3EntityListener", "generateDefault", "true") && 
				operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true"))-»
			@EntityListeners(«asTypeName()-»Listener.class)
			«EXPAND _EntityListenerClass(asTypeName()+"Listener")-»
		«ENDIF»
		«IF hasTaggedValue("ejb3EntityListener", "excludeDefaultListeners", "true")»
			@ExcludeDefaultListeners
		«ENDIF»
		«IF hasTaggedValue("ejb3EntityListener", "excludeSuperclassListeners", "true")»
			@ExcludeSuperclassListeners
		«ENDIF»				
	«ENDIF»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3EntityListener"
«ENDREM»
«DEFINE _EntityListenerClass(String filename) FOR MClass-»
	«FILE filePath( filename + ".java", basePath() )-»
		/**
		  *	generated entity listener class by the ejb3 cartridge
		  *
		  * @author		andre pflueger
		  * @date		2008 Jun 13
		  * @Version	1.0
		  *
		  */
		package «packageDeclaration( basePackage() ) -»;
		
		/* generated imports */
		«EXPAND _CallbackImport»
		
		/* your own imports */
		«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + asTypeName() + "_Imports")-»
		
		/**
		  * generated entity listener class for "«asTypeName()»"
		  *
		  */
		public class «filename-» {
			«EXPAND _CallbackMethods-»
			
			«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + "_restOf" + asTypeName() + "EntityListenerClass")-»
		}
	«ENDFILE»
«ENDDEFINE»

«REM» 
	evaluates the stereotype "ejb3ClassInterceptor"
«ENDREM»
«DEFINE _Interceptor FOR MClass-»
	«IF hasStereotype("ejb3ClassInterceptor")-»
		«IF hasUtilizableValue("ejb3ClassInterceptor", "interceptors")-»
			@Interceptors(value={«FOREACH getTaggedValue("ejb3ClassInterceptor", "interceptors").getElements() AS interceptor SEPARATOR ", "-»
				«interceptor-».class
			«ENDFOREACH-»
			«IF hasTaggedValue("ejb3ClassInterceptor", "generateDefault", "true") &&
				( operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true")) ||
				hasUtilizableValue("ejb3ClassInterceptor", "methods") )-»
				«EXPAND _InterceptorClass(asTypeName()+"Interceptor")-»
				, «asTypeName()-»Interceptor.class
			«ENDIF-»})
		«ELSEIF hasTaggedValue("ejb3ClassInterceptor", "generateDefault", "true") &&
				( operation.exists(e|e.hasTaggedValue("ejb3Callback", "external", "true")) ||
				hasUtilizableValue("ejb3ClassInterceptor", "methods") )-»
			@Interceptors(«asTypeName()»Interceptor.class)
			«EXPAND _InterceptorClass(asTypeName()+"Interceptor")-»
		«ENDIF-»
		«IF hasTaggedValue("ejb3ClassInterceptor", "excludeDefaultInterceptors", "true")-»
			@ExcludeDefaultInterceptors
		«ENDIF»
	«ENDIF-»
«ENDDEFINE»


«REM» 
	generates an interceptor class
«ENDREM»
«DEFINE _InterceptorClass(String filename) FOR MClass-»
	«FILE filePath( filename + ".java", basePath() )-»
		/**
		  *	generated interceptor class of the ejb3 cartridge
		  *
		  *	@author		andre pflueger
		  * @date		2008 Jun 15
		  * @version 	1.0
		  *
		  */
		package «packageDeclaration( basePackage() ) -»;
		
		/* generated imports */
		«EXPAND _CallbackImport»
		import javax.interceptor.AroundInvoke;
		import javax.interceptor.InvocationContext;
		
		/* your own imports */
		«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + asTypeName() + "_Imports")-»
		
		/**
		  * generated interceptor class for "«asTypeName()-»"
		  *
		  */
		public class «filename-» {
			«EXPAND _BusinessMethods-»
			
			«EXPAND _CallbackMethods-»
			
			«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + "_restOf" + asTypeName() + "InterzeptorClass")-»
		}
	«ENDFILE»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Callback for class import
	can be used by interceptor and entity listener class generation
	
	takes care of downwards compatibility from ejb3 to ejb2.x by
	not creating callback methods in an interceptor class for some
	special methods with coressponding callback annotations 
	(page 363 of ejb3 professionell of Oliver Ihns)
	
	downwards compability shoud be done by check language before generation starts 
«ENDREM»
«DEFINE _CallbackImport FOR MClassifier-»
	«FOREACH operation.select(e|e.hasTaggedValue("ejb3Callback", "external", "true")) AS methods»
		«IF methods.hasStereotype("ejb3OperationInterceptor")
			&& !(methods.name == "ejbCreate" 
				&& methods.hasTaggedValue("ejb3Callback", "postConstruct", "true"))
			|| !(methods.name == "ejbRemove" 
				&& methods.hasTaggedValue("ejb3Callback", "preDestroy", "true"))
			|| !(methods.name == "ejbActivate" 
				&& methods.hasTaggedValue("ejb3Callback", "postActivate", "true"))
			|| !(methods.name == "ejbPassivate" 
				&& methods.hasTaggedValue("ejb3Callback", "prePassivate", "true"))
		-»
			«IF methods.hasTaggedValue("ejb3Callback", "preConstruct", "true")»
				import javax.annotation.PostConstruct;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "preDestroy", "true")»
				import javax.annotation.PreDestroy;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postActivate", "true")»
				import javax.ejb.PostActivate;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "prePassivate", "true")»
				import javax.ejb.PrePassivate;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postPersist", "true")»
				import javax.persistence.PostPersist;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "prePersist", "true")»
				import javax.persistence.PrePersist;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postUpdate", "true")»
				import javax.persistence.PostUpdate;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "preUpdate", "true")»
				import javax.persistence.PreUpdate;
			«ENDIF»	
			«IF methods.hasTaggedValue("ejb3Callback", "postRemove", "true")»
				import javax.persistence.PostRemove;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "preRemove", "true")»
				import javax.persistence.PreRemove;
			«ENDIF»
			«IF methods.hasTaggedValue("ejb3Callback", "postLoad", "true")»
				import javax.persistence.PostLoad;
			«ENDIF»
		«ENDIF-»
	«ENDFOREACH»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Callback and generates source code for the associated methods
	can be used by interceptor and entity listener class generation
	
	takes care of downwards compatibility from ejb3 to ejb2.x by
	not creating callback methods in an interceptor class for some
	special methods with coressponding callback annotations 
	(page 363 of ejb3 professionell of Oliver Ihns) 
	
	downwards compability shoud be done by check language before generation starts 
«ENDREM»
«DEFINE _CallbackMethods FOR MClass-»
	«FOREACH operation.select(e|e.hasTaggedValue("ejb3Callback", "external", "true")) AS methods»
		«IF hasStereotype("ejb3ClassInterceptor")
			&& !(methods.name == "ejbCreate" 
				&& methods.hasTaggedValue("ejb3Callback", "postConstruct", "true"))
			|| !(methods.name == "ejbRemove" 
				&& methods.hasTaggedValue("ejb3Callback", "preDestroy", "true"))
			|| !(methods.name == "ejbActivate" 
				&& methods.hasTaggedValue("ejb3Callback", "postActivate", "true"))
			|| !(methods.name == "ejbPassivate" 
				&& methods.hasTaggedValue("ejb3Callback", "prePassivate", "true"))
		-»
			/**
			  *	generated callback method for class "«asTypeName()»"
			  * method has been annotated in "«asTypeName()»"
			  *
			  */
			«IF methods.hasTaggedValue("ejb3Callback", "external", "true")-»
				«IF methods.classifier.hasStereotype("ejb3SessionBean") || methods.classifier.hasStereotype("ejb3MessageDrivenBean")-»
					«IF methods.hasTaggedValue("ejb3Callback", "postConstruct", "true")-»
						@PostConstruct
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "preDestroy", "true")-»
						@PreDestroy
					«ENDIF-»
				«ENDIF-»
				«IF methods.classifier.hasTaggedValue("ejb3SessionBean", "stateful", "true")-»
					«IF methods.hasTaggedValue("ejb3Callback", "postActivate", "true")-»
						@PostActivate
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "prePassivate", "true")-»
						@PrePassivate
					«ENDIF-»
				«ENDIF-»
				«IF methods.classifier.hasStereotype("ejb3PersistentEntity")-»
					«IF methods.hasTaggedValue("ejb3Callback", "postPersist", "true")-»
						@PostPersist
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "prePersist", "true")-»
						@PrePersist
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "postUpdate", "true")-»
						@PostUpdate
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "preUpdate", "true")-»
						@PreUpdate
					«ENDIF-»	
					«IF methods.hasTaggedValue("ejb3Callback", "postRemove", "true")-»
						@PostRemove
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "preRemove", "true")-»
						@PreRemove
					«ENDIF-»
					«IF methods.hasTaggedValue("ejb3Callback", "postLoad", "true")-»
						@PostLoad
					«ENDIF-»
				«ENDIF-»
			«ENDIF-»
			public void «methods.name-»(«IF hasStereotype("ejb3EntityListener")-»
				Object obj){
					«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods.name + "Listener")-»
			«ELSEIF hasStereotype("ejb3ClassInterceptor")-»
				InvocationContext ctx){
					«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods.name + "Interceptor")-»
			«ENDIF-»
			}
		«ENDIF-»
	«ENDFOREACH»
«ENDDEFINE»

«REM» 
	evaluate the stereotype ejb3Interceptor and generates source code for the 
	associated business methods
«ENDREM»
«DEFINE _BusinessMethods FOR MClass-»
	«IF hasUtilizableValue("ejb3ClassInterceptor", "methods")-»
		«FOREACH getTaggedValue("ejb3ClassInterceptor", "methods").getElements() AS methods-»
			/**
			  *	generated business method for class "«asTypeName()»"
			  * method has been mentioned in "ejb3Interceptor"-annotation 
			  * at class "«asTypeName()»"
			  *
			  */
			@AroundInvoke
			public Object «methods-»(InvocationContext ctx) throws Exception {
				/* throw an exception to avoid execution of the business method */
				«EXPAND _OwnCodeImpl("java.moperation.implementation.operation.code." + xmiGuid + methods + "Interceptor")-»
				return ctx.proceed();
			}
		«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«REM» 
	generates import proReg and statements for ejb classes
	is used by aspects to extend´import generation of java5 cartridge
«ENDREM»
«DEFINE _ImportStatements FOR MClassifier-»
	«EXPAND _CallbackImport»
	«IF operation.exists(e|e.hasStereotype("ejb3Timer"))-»
		import javax.ejb.Timer;
	«ENDIF»
	«IF hasStereotype("ejb3SessionBean")-»
		import javax.persistence.PersistenceContext;
		«IF hasTaggedValue("ejb3SessionBean", "stateful", "false")-»
			import javax.ejb.Stateless;
		«ELSEIF hasTaggedValue("ejb3SessionBean", "stateful", "true")»
			import javax.ejb.Stateful;
		«ENDIF-»
		«IF hasStereotype("ejb3Remote")-»
			import javax.ejb.Remote;
		«ENDIF-»
		«IF hasStereotype("ejb3Local")-»
			import javax.ejb.Local;
		«ENDIF-»
		«IF hasStereotype("ejb3WebService")-»
			import javax.jws.WebService;
			import javax.jws.soap.SOAPBinding;
			import javax.jws.WebMethod;
			import javax.jws.Oneway;
			import javax.jws.WebParam;
			import javax.jws.WebResult;
			import javax.jws.HandlerChain;
		«ENDIF-»
	«ENDIF»
	«IF hasStereotype("ejb3MessageDrivenBean")-»
		import javax.ejb.MessageDriven;	
		import javax.jms.MessageListener;
		import javax.ejb.ActivationConfigProperty;		
	«ENDIF»
	import javax.annotation.*;
	import javax.ejb.*;
	«FOREACH this.getModel().nestedPackage AS p-»
			import «IF this.basePackage() != ""-»«this.basePackage()-».«ENDIF-»«p.name-».*;
	«ENDFOREACH»	
«ENDDEFINE»

«REM» 
	generates a protected region for own implementations
«ENDREM»
«DEFINE _OwnCodeImpl(String proRegId) FOR MClass-»
	/* «PROTECT CSTART "" CEND "" ID (proRegId)» */
	/* TODO: put your own source code here */
	
	/* «ENDPROTECT» */
«ENDDEFINE»