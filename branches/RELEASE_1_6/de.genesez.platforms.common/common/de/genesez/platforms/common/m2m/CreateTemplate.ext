/**
 * Helper scripts to create + clone GeneSEZ model elements
 * - useful for m2m transformations + model modifications
 * 
 * @author	tobias haubold
 * @date	2008-07-01
 */

// based on genesez meta model
import gcore;
extension de::genesez::platforms::common::log::Log;

create List createList() :
	this;

create MPackage createPackage(MPackage container, String xmiGuid, String name) :
	processElement( xmiGuid, name ) ->
	container.nestedPackage.add(this) ->
	this;

create MClass createClass(MPackage container, String xmiGuid, String name) :
	processElement( xmiGuid, name ) ->
	container.classifier.add(this) ->
	this;

create MInterface createInterface(MPackage container, String xmiGuid, String name) :
	processElement( xmiGuid, name ) ->
	container.classifier.add(this) ->
	this;


create MExternal createExternal(MModel container, String specification) :
	setSpecification( specification ) ->
	container.externalTypes.add( this ) ->
	this;

create MPrimitiveType createPrimitiveType(MModel container, String name, String xmiGuid) :
	processElement( xmiGuid, name ) ->
	container.primitiveTypes.add(this) ->
	this;

create MPrimitiveType createPrimitiveType(MModel container, String name) :
	processElement( name, name ) ->
	container.primitiveTypes.add(this) ->
	this;

create MOperation createOperation(MClassifier container, String xmiGuid, String name) :
	processElement( xmiGuid, name ) ->
	container.operation.add(this) ->
	this;

create MParameter createParameter(MOperation container, String xmiGuid, String name) :
	processElement( xmiGuid, name ) ->
	container.parameter.add(this) ->
	this;

create MAttribute createAttribute(MClassifier container, String xmiGuid, String name) :
	processElement( xmiGuid, name ) ->
	container.property.add( this ) ->
	this;

create MStereotype createStereotype(MModel container, String xmiGuid, String name) :
	processElement( xmiGuid, name ) ->
	container.anyStereotype.add( this ) ->
	this;

create MTag createTag(MStereotype container, String name, String type) :
	setName( name ) ->
	setType( type ) ->
	container.property.add( this ) ->
	this;

create MTaggedValue createTaggedValue(MElement container, MTag tag, String value) :
	setValue( value ) ->
	setTag( tag ) ->
	container.taggedValue.add( this ) ->
	this;

create MAspect createAspect(MElement container, String domain, String name) :
	setDomain(domain) ->
	setName(name) ->
	container.aspect.add( this ) ->
	this;


// - - cloning - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

create MOperation cloneOperation(MOperation op, MClassifier container) :
	trace("cloning: " + metaType + ": " + op) ->
	// attributes
	this.processElement( op.cloneXmiGuid( container ), op ) ->
	this.processOperation(op.visibility, op.static, op.abstract, op.final, op.multiplicity, op.unique, op.ordered) ->
	// references
	setReturnType( op.returnType ) ->
	raisedException.addAll( op.raisedException ) ->
	// containments
	op.parameter.cloneParameter( this ) ->
	container.operation.add( this ) ->
	this;

create MParameter cloneParameter(MParameter param, MOperation container) :
	trace("cloning: " + metaType + ": " + param) ->
	this.processElement( param.cloneXmiGuid( container ), param.name ) ->
	this.processParameter(param.defaultvalue, param.direction, param.multiplicity, param.unique, param.ordered) ->
	setType( param.type ) ->
	// containment
	container.parameter.add( this ) ->
	this;
	
create MComment cloneComment(MComment comment, MElement container) :
	trace("cloning: " + metaType + ": " + comment) ->
	setXmiGuid( comment.cloneXmiGuid( container ) ) ->
	setAnnotation( comment.annotation ) ->
	nestedComment.addAll( comment.nestedComment.cloneComment( this ) ) ->
	this;
	
create MComment cloneComment(MComment comment, MComment container) :
	trace("cloning: " + metaType + ": " + comment) ->
	setXmiGuid( comment.cloneXmiGuid( container ) ) ->
	setAnnotation( comment.annotation ) ->
	nestedComment.addAll( comment.nestedComment.cloneComment( this ) ) ->
	this;

String cloneXmiGuid(MElement elem, MElement container) :
	container.xmiGuid + "_" + elem.xmiGuid;

String cloneXmiGuid(MComment comment, MElement container) :
	container.xmiGuid + "_" + comment.xmiGuid;

String cloneXmiGuid(MComment comment, MComment container) :
	container.xmiGuid + "_" + comment.xmiGuid;


// - - copying attributes - - - - - - - - - - - - - - - - - - - - - - - - - -

MClassifier processClassifier(MClassifier this, String visibility, boolean abstract, boolean final) :
	setVisibility(visibility) ->
	setAbstract(abstract) ->
	setFinal(final) ->
	this;

MOperation processOperation(MOperation this, String visibility, boolean static, boolean abstract, boolean final, int multiplicity, boolean unique, boolean ordered) :
	setVisibility(visibility) ->
	setStatic(static) ->
	setAbstract(abstract) ->
	setFinal(final) ->
	setMultiplicity(multiplicity) ->
	setUnique(unique) ->
	setOrdered(ordered) ->
	this;

MParameter processParameter(MParameter this, String defaultValue, String direction, int multiplicity, boolean unique, boolean ordered) :
	setDefaultvalue(defaultvalue) ->
	setDirection(direction) ->
	setMultiplicity(multiplicity) ->
	setUnique(unique) ->
	setOrdered(ordered) ->
	this;

MAttribute processAttribute(MAttribute this, String defaultvalue, boolean static, boolean final) :
	// set attribute values
	setDefaultvalue(defaultvalue) ->
	setStatic(static) ->
	setFinal(final) ->
	this;

MProperty processProperty(MProperty this, String visibility, boolean derived, Integer multiplicity, boolean unique, boolean ordered) :
	setVisibility(visibility) ->
	setDerived(derived) ->
	setMultiplicity(multiplicity) ->
	setUnique(unique) ->
	setOrdered(ordered) ->
	this;
	
/**
 * processes the given model element and sets all parameters
 * @param	xmiGuid	
 * @param	name	
 */
MElement processElement(MElement this, String xmiGuid, MElement elem) :
	setXmiGuid(xmiGuid) ->
	setName( elem.name ) ->
	ownedComment.addAll( elem.ownedComment.cloneComment( this ) ) ->
//	stereotype.addAll( elem.stereotype.cloneStereotype( this ) ) ->
//	taggedValue.addAll( elem.taggedValue.cloneTaggedValue( this ) ) ->
//	aspect.addAll( elem.aspect.cloneAspect( this ) ) ->
	this;

MElement processElement(MElement this, String xmiGuid, String name) :
	setXmiGuid(xmiGuid) ->
	setName( name ) ->
	this;


// -- basic types with existence check --

MPrimitiveType createPrimitiveTypeString(MModel container) :
	container.primitiveTypes.exists(e|e.name == "String")
		? container.primitiveTypes.selectFirst(e|e.name == "String")
		: container.createPrimitiveType("String");
