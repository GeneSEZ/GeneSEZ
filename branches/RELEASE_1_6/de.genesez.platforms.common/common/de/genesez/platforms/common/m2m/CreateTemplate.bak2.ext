/*
	provides functionality to create genesez-model elements
	- useful for m2m transformations
 */

//	only works on genesez models
import gcore;

//	use logging
extension de::genesez::platforms::common::log::Log;
extension de::genesez::platforms::common::AccessHelper;

create MPackage createMPackage(MPackage parent, String xmiGuid, String name) :
	setXmiGuid(xmiGuid) ->
	setName(name) ->
	//	containment
	parent.nestedPackage.add(this) ->
	this;
	
create MClass createMClass(MPackage package, String xmiGuid, String name) :
	setXmiGuid(xmiGuid) ->
	setName(name) ->
	//	containment
	package.classifier.add(this) ->
	this;
	
	
create MAttribute createMAttribute(MClassifier parent, String xmiId, String name) :
	//	base properties
	setXmiGuid(xmiGuid) ->
	setName(name) ->
	//	containment
	parent.property.add(this) ->
	this;
	
create MAssociationRole createMAssociationRole(MClassifier parent, String xmiId, String name) :
	//	base properties
	setXmiGuid(xmiId) ->
	setName(name) ->
	//	containment
	parent.property.add(this) ->
	this;
	
create MOperation createMOperation(MClassifier parent, String xmiGuid, String name) :
	//	base properties
	setXmiGuid(xmiGuid) ->
	setName(name) ->
	//	containment
	parent.operation.add(this) ->
	this;
	
create MParameter createMParameter(MOperation parent, String xmiGuid, String name) :
	//	base properties
	setXmiGuid(xmiGuid) ->
	setName(name) ->
	//	containment
	parent.parameter.add(this) ->
	this;
	
	
//	-- generics --
	
create MGeneric createMGeneric(MClassifier container, String specification) :
	//	properties
	setSpecification(specification) ->
	//	containment
	container.genericParameter.add(this) ->
	this;
	
create MGeneric createMGeneric(MOperation container, String specification) :
	//	properties
	setSpecification(specification) ->
	//	containment
	container.genericParameter.add(this) ->
	this;
	
create MGeneric createMGeneric(MParameter container, String specification) :
	//	properties
	setSpecification(specification) ->
	//	containment
	container.genericRealization.add(this) ->
	this;
	
create MGeneric createMGeneric(MProperty container, String specification) :
	//	properties
	setSpecification(specification) ->
	//	containment
	container.genericRealization.add(this) ->
	this;
	
	
//	-- uml profiles --
	
create MStereotype createMStereotype(MModel container, String xmiGuid, String name) :
	//	properties
	setXmiGuid(xmiGuid) ->
	setName(name) ->
	//	containment
	container.anyStereotype.add(this) ->
	this;
	
create MTag createMTag(MStereotype container, String name, String type) :
	//	properties
	setName(name) ->
	setType(type) ->
	//	containment
	container.property.add(this) ->
	this;
	
create MTaggedValue createMTaggedValue(MElement container, String value) :
	//	properties
	setValue(value) ->
	//	containment
	container.taggedValue.add(this) ->
	this;
	
	
//	-- aspects --
create MAspect createMAspect(MElement container, String domain) :
	//	properties
	setDomain(domain) ->
	//	containment
	container.aspect.add(this) ->
	this;
	
create MAspect createMAspect(MElement container, String domain, String name) :
	//	properties
	setDomain(domain) ->
	setName(name) ->
	//	containment
	container.aspect.add(this) ->
	this;
	
	
//	-- primitive types --

create MPrimitiveType createMPrimitiveType(MModel container, String xmiGuid, String name) :
	//	base properties
	setXmiGuid(xmiGuid) ->
	setName(name) ->
	//	containment
	container.primitiveTypes.add(this) ->
	this;
	
	
//	-- predefined primitive types
	
MPrimitiveType createPrimitiveTypeVoid(MModel container) :
	container.primitiveTypes.exists(e|e.name == "void")
		? container.primitiveTypes.selectFirst(e|e.name == "void")
		: container.createMPrimitiveType("void", "void")
	;
	
MPrimitiveType createPrimitiveTypeString(MModel container) :
	container.primitiveTypes.exists(e|e.name == "String")
		? container.primitiveTypes.selectFirst(e|e.name == "String")
		: container.createMPrimitiveType("String", "String")
	;
	
	
//	-- predefined constructors
	
MOperation createDefaultConstructor(MClassifier container) :
	let op = container.createMOperation(container.name + ".constructor.default", container.name) :
		op.setVisibility("public") ->
	op;
	
	
//	-- predefined stereotypes
	
MStereotype createAccessorStereotype(MModel container) :
	container.anyStereotype.exists(e|e.name == "accessor")
		? container.anyStereotype.selectFirst(e|e.name == "accessor")
		: container.createMStereotype("propertyAccess", "accessor")
			.createMTag("getter", "boolean").stereotype
			.createMTag("setter", "boolean").stereotype;
	
MAttribute addAccessor(MAttribute container, String getterValue, String setterValue) :
	let s = createAccessorStereotype(container.classifier.getModel()) :
		container.stereotype.add(s) ->
		container.createMTaggedValue(getterValue)
			.setTag(s.property.selectFirst(e|e.name == "getter")) ->
		container.createMTaggedValue(setterValue)
			.setTag(s.property.selectFirst(e|e.name == "setter")) ->
	container;
	