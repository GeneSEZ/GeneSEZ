«REM»
	Handles everything about associations
	
	@author georg beier
	@author	nico herbig
	@author	tobias haubold (last)
	@date	2007-07-13
«ENDREM»


«REM» based on genesez meta model «ENDREM»
«IMPORT gcore»

«REM» useful helper functions «ENDREM»
«EXTENSION de::genesez::platforms::common::AccessHelper»
«EXTENSION de::genesez::platforms::common::m2t::Helper»
«EXTENSION de::genesez::platforms::common::typemapping::TypeMapping»

«EXTENSION de::genesez::platforms::java::scripts::Type»
«EXTENSION de::genesez::platforms::java::scripts::Naming»
«EXTENSION de::genesez::platforms::java::scripts::Conversion»
«EXTENSION de::genesez::platforms::java::scripts::Association»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	processes the declaration of association attributes
«ENDREM»
«DEFINE Declaration FOR MClass -»
«IF ! property.typeSelect(MAssociationRole).isEmpty -»
	«EXPAND _Declaration FOREACH property.typeSelect(MAssociationRole) -»
	{	«EXPAND Comment::AssociationInit -»
	«EXPAND _Initialization FOREACH property.typeSelect(MAssociationRole) -»
	}
«ENDIF»
«ENDDEFINE»

«REM»
	processes the declaration of association attributes
«ENDREM»
«DEFINE Declaration FOR MClassifier -»
«EXPAND _Declaration FOREACH property.typeSelect(MAssociationRole) -»
«ENDDEFINE»

«REM»
	processes the generation of accessors for association attributes
«ENDREM»
«DEFINE Accessors FOR MClassifier -»
«EXPAND _Accessors FOREACH property.typeSelect(MAssociationRole) -»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»

«REM»
	generates the declaration of the association attribute
«ENDREM»
«DEFINE _Declaration FOR MAssociationRole -»
«EXPAND Comment::Association -»
«IF hasAssociationClass() -»
	private AssociationAC<«classifier.asTypeName()», «type.asTypeName()»,
			«association.associationClass.asTypeName()»> «asAttribute()»;
«ELSE -»
	private Association<«classifier.asTypeName()»,
			«type.asTypeName()»> «asAttribute()»;
«ENDIF -»
«ENDDEFINE»

«REM»
	generates the initialization for an association attribute
«ENDREM»
«DEFINE _Initialization FOR MAssociationRole -»
«IF hasAssociationClass() -»
	«IF isSingleValuedType() -»
		«asAttribute()» = new OneAssociationAC<«classifier.asTypeName() -»,
				«type.asTypeName() -»,
				«association.associationClass.asTypeName() -»> (this
		«IF hasOpposite() -»
		 	,«type.asTypeName()».class, "«opposite.asAttribute() -»"
		«ENDIF -»
		);
	«ELSE -»
		«asAttribute()» = new ManyAssociationAC<«classifier.asTypeName() -»,
				«type.asTypeName() -», 
				«association.associationClass.asTypeName() -»>
				(this, new HashMap<«type.asTypeName() -»,
					«association.associationClass.asTypeName() -»>()
		«IF hasOpposite() -»
		 	,«type.asTypeName()».class, "«opposite.asAttribute() -»"
		«ENDIF -»
		);
	«ENDIF -»
«ELSE -»«REM» association without association class «ENDREM»
	«IF isSingleValuedType() -»
		«asAttribute()» = new OneAssociation<«classifier.asTypeName() -»,
				«type.asTypeName() -»>(this
		«IF hasOpposite() -»
		 	,«type.asTypeName()».class, "«opposite.asAttribute() -»"
		«ENDIF -»
		);
	«ELSE -»
		«asAttribute()» = new ManyAssociation<«classifier.asTypeName() -»,
				«type.asTypeName() -»>(this, new HashSet<«type.asTypeName() -»>()
		«IF hasOpposite() -»
		 	,«type.asTypeName()».class, "«opposite.asAttribute() -»"
		«ENDIF -»
		);
	«ENDIF -»
«ENDIF -»
«ENDDEFINE»

«REM»
	generates the accessors for an association attribute
	only a getter accessor is generated
«ENDREM»
«DEFINE _Accessors FOR MAssociationRole -»
«EXPAND Comment::Accessor -»
«IF hasAssociationClass() -»
	public AssociationAC<«classifier.asTypeName()»,
			«type.asTypeName()»,
			«association.associationClass.asTypeName()»> «asAccessor()»() {
		return «asAttribute()»;
	}
«ELSE -»
	public Association<«classifier.asTypeName()»,
			«type.asTypeName()»> «asAccessor()»() {
		return «asAttribute()»;
	}
«ENDIF -»
«ENDDEFINE»
