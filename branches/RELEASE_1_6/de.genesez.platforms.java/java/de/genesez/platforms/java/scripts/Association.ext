/**
 * Helper functions for the association handling
 * 
 * provides appropriate methods to access the types for association handling as external genesez model elements
 * 
 * modifies association classes
 * - adds an interface
 * - adds an association attribute
 * 
 * @author	georg beier
 * @author	tobias haubold
 * @date	2008-07-01
 */

// based on genesez meta model
import gcore;

extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::m2m::CreateTemplate;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */

/**
 * iterates over the model and contained packages and processes all classifiers
 * @return	the same model as given
 */
MModel addAssociationHandling(MModel this) :
	process() ->
	this;

/**
 * processes all subpackages + classifiers within a package
 * @return	the same package as given
 */
private MPackage process(MPackage this) :
	nestedPackage.process() ->
	classifier.process() ->
	this;

/**
 * process classifiers
 */
private MClassifier process(MClassifier this) :
	// prepare association class
	isAssociationClass() ? prepareAssociationClass() : Void ->
	this;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */

/**
 * prepares an association class for the association handling
 * - adds an interface
 * - adds an attribute
 */
Void prepareAssociationClass(MClassifier this) :
	let i = makeAssociationClass(getModel()) : 
		realization.add(i) -> 
		supertype.add(i) ->
		makeAssociationClassLinkAttribute() ->
		Void;

/**
 * creates the association class link attribute
 */
private MAttribute makeAssociationClassLinkAttribute(MClassifier this) : 
	let attrib = createAttribute(xmiGuid + ".associationClassLink", "associationClassLink")
			.processAttribute("new ACLink()", false, false)
			.processProperty("private", false, 1, false, false) :
		attrib.setType( getModel().makeACLink() ) ->
		attrib.createAspect( associationAspectDomain(), associationAspectName() ) ->
	attrib;

/**
 * aspect domain to mark association class link attribute to supress the generation of a setter accessor
 */
String associationAspectDomain() : "umlsupport";

/**
 * aspect name to mark association class link attribute to supress the generation of a setter accessor
 */
String associationAspectName() : "linkAccess";

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	functions to create all external types for association handling
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */

/**
 * creates the 'AssociationClass' interface as external type
 */
MExternal makeAssociationClass(MModel this) : createExternal("AssociationClass");

/**
 * creates the 'ACLink' class as external type
 */
MExternal makeACLink(MModel this) : createExternal("ACLink");

/**
 * creates the 'Association' interface as external type
 */
MExternal makeAssociation(MModel this) : createExternal("Association");

/**
 * creates the 'AssociationAC' interface as external type
 */
MExternal makeAssociationAC(MModel this) : createExternal("AssociationAC");

/**
 * creates the 'OneAssociation' class as external type
 */
MExternal makeOneAssociation(MModel this) : createExternal("OneAssociation");

/**
 * creates the 'OneAssociationAC' class as external type
 */
MExternal makeOneAssociationAC(MModel this) : createExternal("OneAssociationAC");

/**
 * creates the 'ManyAssociation' class as external type
 */
MExternal makeManyAssociation(MModel this) : createExternal("ManyAssociation");

/**
 * creates the 'ManyAssociationAC' class as external type
 */
MExternal makeManyAssociationAC(MModel this) : createExternal("ManyAssociationAC");

/**
 * creates the 'HashSet' class as external type
 */
MExternal makeHashSet(MModel this) : createExternal("HashSet");

/**
 * creates the 'HashMap' class as external type
 */
MExternal makeHashMap(MModel this) : createExternal("HashMap");
