import gcore;

extension de::genesez::platforms::common::log::Log;
extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::m2m::CreateTemplate;
extension de::genesez::platforms::common::m2m::CreateBasics;
extension de::genesez::platforms::java::scripts::Naming;
extension de::genesez::platforms::java::jpa::scripts::Stereotypes;


/**
  *	adds an accessor stereotype for generating get and set methods if
  *	classifier is a persistent entity and the attribute does not have an 
  *	accessor stereotype (do not override modellers choices)
  *
  *	@param		this		instance of MAttribute
  */
Void addAccessorStereotype(MAttribute this) :
	this.classifier.hasStereotype("jpaPersistentEntity")
		? (
			//add an accessor for get and set methods if no accessor 
			//stereotype exists
			!this.hasStereotype("accessor")
				? createAccessor("true", "true")
				: ""
		)
		: "";

/**
  *	adds the stereotype "jpaPersstenceContext" if attributes data type
  *	is "EntityManager" or "Session" and adds stereotype "jpaPersistenceUnit" 
  *	if attributes data type is "EntityManagerFactory" or "SessionFactory" and
  *	the attribute has no such stereotype
  *
  *	@param		this		instance of MAttribute
  */
Void checkPersistenceStereotypes(MAttribute this) :
	(this.type.asTypeName().matches("EntityManager") || this.type.asTypeName().matches("Session")) &&
	 !this.classifier.property.exists(e|e.hasStereotype("jpaPersistenceContext"))
		? this.addPersistenceContextStereotype("[]", "[]", "[]") 
		: "" ->
	(this.type.asTypeName().matches("EntityManagerFactory") || this.type.asTypeName().matches("SessionFactory")) &&
	 !this.classifier.property.exists(e|e.hasStereotype("jpaPersistenceUnit"))
		? this.addPersistenceUnitStereotype("[]", "[]")
		: "";

/**
  *	adds the stereotype "jpaOptimisticLocking" if attributes name is "version", the 
  *	data type is "int" and there is no such steretype
  *
  *	@param		this		instance of MAttribute
  */		
Void checkOptimisticLockingStereotype(MAttribute this) :
	 this.name.asTypeName() == "version" && this.type.asTypeName() == "int" &&
	 !this.classifier.property.exists(e|e.hasStereotype("jpaOptimisticLocking"))
	 	? addOptimisticLockingStereotype()
	 	: "";