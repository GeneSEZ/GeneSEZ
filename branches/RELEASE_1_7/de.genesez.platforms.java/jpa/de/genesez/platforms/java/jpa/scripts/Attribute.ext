import gcore;

extension de::genesez::platforms::common::log::Log;
extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::m2m::CreateTemplate;
extension de::genesez::platforms::common::m2m::CreateBasics;
extension de::genesez::platforms::java::scripts::Naming;
extension de::genesez::platforms::java::jpa::scripts::Stereotypes;

/**
 *	checks whether an attribute has a reserved name which
 *	can creates conflicts with some databases and adds
 *	the stereotype "jpaColumn" with a name prefix to
 *	get another column name for this attribute
 *	
 *	values of an existing "jpaColum" stereotype will be 
 *	considered 
 *
 *	toDo:	make name prefix customizable 
 */
Void checkAttributeName(MAttribute this) :
	switch(name.asTypeName()) {
		case "index" : checkColumnStereotype()
		case "position" : checkColumnStereotype()
		case "position" : (
			//position is a key word in the mysql database
			//check if there is a stereotype with a critical 
			//column name
			this.hasUtilizableValue("jpaColumn", "value") && 
			(this.getTaggedValue("jpaColumn", "value") == name.asTypeName())
				?  (
					//replace the critical column name
					this.setTaggedValue("jpaColumn", "value", this.classifier.name.toLowerCase()+"_"+name)
				)
				: (
					//create a new stereotype with default values
					this.addColumnStereotype("false", "false", this.classifier.name.toLowerCase()+"_"+name, "0", "0", "255", "null", "null", "true", "false")
				)
		)
		default : ""
	};

/**
 *	check if there is a stereotype with a critical column name
  *
  *	@param		this		instance of MAttribute
 */
private Void checkColumnStereotype(MAttribute this) :
	this.hasUtilizableValue("jpaColumn", "value") && 
	(this.getTaggedValue("jpaColumn", "value") == name.asTypeName())
		?  (
			//replace the critical column name
			this.setTaggedValue("jpaColumn", "value", this.classifier.name.toLowerCase()+"_"+name)
		)
		: (
			//create a new stereotype with default values
			this.addColumnStereotype("true", "true", this.classifier.name.toLowerCase()+"_"+name, "0", "0", "255", "null", "null", "true", "false")
		);

/**
  *	adds the stereotype "jpaPersistenceContext" if attributes data type
  *	is "EntityManager" or "Session" and adds stereotype "jpaPersistenceUnit" 
  *	if attributes data type is "EntityManagerFactory" or "SessionFactory" and
  *	the attribute has no such stereotype
  *
  *	@param		this		instance of MAttribute
  */
Void checkPersistenceStereotypes(MAttribute this) :
	(this.type.asTypeName().matches("EntityManager") || this.type.asTypeName().matches("Session")) &&
	 !this.classifier.property.exists(e|e.hasStereotype("jpaPersistenceContext"))
		? this.addPersistenceContextStereotype("[]", "[]", "[]") 
		: "" ->
	(this.type.asTypeName().matches("EntityManagerFactory") || this.type.asTypeName().matches("SessionFactory")) &&
	 !this.classifier.property.exists(e|e.hasStereotype("jpaPersistenceUnit"))
		? this.addPersistenceUnitStereotype("[]", "[]")
		: "";

/**
  *	adds the stereotype "jpaOptimisticLocking" if attributes name is "version", the 
  *	data type is "int" and there is no such steretype
  *
  *	@param		this		instance of MAttribute
  */		
Void checkOptimisticLockingStereotype(MAttribute this) :
	 (this.name.asTypeName() == "version" && this.type.asTypeName() == "int") ||
	 this.classifier.property.exists(e|e.hasTaggedValue("jpaPersistentEntity", "optimisticLocking", "true"))
	 	? addOptimisticLockingStereotype()
	 	: "";