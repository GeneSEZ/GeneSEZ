import gcore;

extension de::genesez::platforms::common::log::Log;
extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::m2m::CreateTemplate;
extension de::genesez::platforms::java::scripts::Naming;
extension de::genesez::platforms::java::ejb3::scripts::Stereotypes;
/* remove this import to be independent from jpa cartridge */
extension de::genesez::platforms::java::jpa::scripts::Stereotypes;
extension de::genesez::platforms::common::m2m::CreateBasics;

/**
  * add standard constructor to a bean class
  */
MModel addStandardConstructor(MModel this) :
	nestedPackage.addStandardConstructor();
	
MPackage addStandardConstructor(MPackage this) :
	nestedPackage.addStandardConstructor() ->
	classifier.addStandardConstructor();
	
MClassifier addStandardConstructor(MClassifier this) :
	operation.exists(e|e.name == name) && operation.select(e|e.name == name).parameter == "[]"
	? ""
	: operation.add(makeStandardConstructor());

/**
  *	checks if a class is a session bean
  */
boolean isSessionBean(MClassifier this, String name) :
	/*warn("Name gleich: "+this.owningPackage.getModel().nestedPackage.classifier.typeSelect(MClass).exists(e|e.name == name)) ->
	warn("Stereotyp vorhanden: "+this.owningPackage.getModel().nestedPackage.classifier.typeSelect(MClass).exists(e|e.name == name && e.hasStereotype("ejb3SessionBean"))) ->*/
	this.owningPackage.getModel().nestedPackage.classifier.typeSelect(MClass).exists(e|e.name == name && e.hasStereotype("ejb3SessionBean"))
		? true
		: false;

/**
  * helper method for "addStandardConstructor"
  */
create MOperation makeStandardConstructor(MClassifier container) : 
	setName(container.name) ->
	setVisibility("public") ->
	setXmiGuid("StandardConstructor" + container.name) ->
	setRaisedException(createList()) ->
	setOwnedComment(createList()) ->
	setParameter(createList()) ->
	setReturnType(createPrimitiveType(container.getModel(), "void", "void")) ->
	container.operation.add(this);
	
/**
  *	evaluates "ejb3SessionBean" stereotype and adds entityManager attribute
  *	for jpa uasage in the session bean.
  *
  *	this operation binds the ejb3 cartridge to jpa cartridge because the attributes
  *	have to be annotated. It is preferred to have DRY code instead of no coupling and 
  *	it is preferred because in most cases ejb3 and jpa are used together
  *
  **/
Void checkUseOfEntityManager(MClass this) :
	!hasTaggedValue("ejb3SessionBean", "entityManager", "None")
		? (	hasTaggedValue("ejb3SessionBean", "entityManager", "EntityManager")
			? (	addEntityManager("EntityManager") ->
				addStereotypesForEntityManager("entityManager", "[]")
			)
			:(
			hasTaggedValue("ejb3SessionBean", "entityManager", "EntityManager_Extended")
				? (	addEntityManager("EntityManager_Extended") ->
					this.hasTaggedValue("ejb3SessionBean", "stateful", "true")
						? addStereotypesForEntityManager("entityManager", "[EXTENDED]")
						: (
							addStereotypesForEntityManager("entityManager", "[]") ->
							error("Use of an EntityManager with extended persistence context in a stateless SessionBean "+this.name+". Context was switched from extended to normal.")
						)

				)
				:(
				hasTaggedValue("ejb3SessionBean", "entityManager", "Session")
					? (	addEntityManager("Session") ->
						addStereotypesForEntityManager("session", "[]")
					)
					: (
					hasTaggedValue("ejb3SessionBean", "entityManager", "Session_Extended")
						? (	addEntityManager("Session_Extended") ->
							this.hasTaggedValue("ejb3SessionBean", "stateful", "true")
								? addStereotypesForEntityManager("session", "[EXTENDED]")
								: (
									addStereotypesForEntityManager("session", "[]") ->
									error("Use of an SessionManager with extended persistence context in the stateless SessionBean "+this.name+". Context was switched from extended to normal.")
								)
							
						)
						: ""
					)
				)
			)
		)
		: "";
	
/**
  *	adds "ejb3PersistenceContext" and "accessor" to the attribute with the given name
  *
  *	@param	attributeName	attribute name of the entity manager
  *	@param	fetchTypes		fetch types for the persistenceContext stereotype
  */
Void addStereotypesForEntityManager(MClass this, String attributeName, String fetchTypes) :
	let e = this.property.typeSelect(MAttribute).selectFirst(e|e.name == attributeName) :
		e != null
			? (	addPersistenceContextStereotype(e, fetchTypes, "[]", "[]") ->
				e.createAccessorForEntityManager()
			)
			: "";
	
Void createAccessorForEntityManager(MProperty this) :
	!this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "None")
		? (	this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "Both")
			? createAccessor(this, "true", "true")
			: (	this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "Getter")
				? createAccessor(this, "true", "false")
				: (	this.classifier.hasTaggedValue("ejb3SessionBean", "entityManagerAccess", "Setter")
					? createAccessor(this, "false", "true")
					: ""
				) 
			) 
		)
		: createAccessor(this, "false", "false") ->
	"";

/**
  *	adds an attribute with name "entityManager" or "session" if an attribute
  *	with the datatype "EntityManager" or "Session" not already exists
  */
Void addEntityManager(MClass this, String type) :
	!existEntityManager() 
		? (type.matches("EntityManager")
			? addAttribute(this, "entityManager", "EntityManager", "private")
			: (type.matches("EntityManager_Extended")
				? addAttribute(this, "entityManager", "EntityManager", "private")
				: (type.matches("Session")
					? addAttribute(this, "session", "Session", "private")
					: (type.matches("Session_Extended")
						? addAttribute(this, "session", "Session", "private")
						: ""
					)	
				)
			)
		)
		: "" ->
	"";

/**
  *	checks if class contains an attribute with the type "EntityManager" or "Session"
  */
boolean existEntityManager(MClass this) : 
	this.property.exists(e|e.type.name().matches("EntityManager")) || this.property.exists(e|e.type.name().matches("Session"))
		? true
		: false;

Void addAttribute(MClassifier this, String name, String type, String visibility) :
	this.property.add(createAttribute(this, name, type, visibility)) ->
	this;

create MAttribute createAttribute(MClassifier container, String name, String type, String visibility) :
	this.setMultiplicity(1) ->
	this.setName(name) ->	
	setXmiGuid(container.xmiGuid) ->
	// set operation properties
	setVisibility(visibility) ->
	setStatic(false) ->
	setFinal(false) ->	
	this.setType(createExternal(container.getModel(), type)) ->	
	this;

//Diese Extensions werden für die Interceptorklassenerstellung benötigt
//extension de::genesez::platforms::java::ejb3::scripts::AccessHelper;
//extension de::genesez::platforms::java::ejb3::scripts::Conversion;
		
/**
	Hier werden Methoden für die Verarbeitung der Interceptorklassen auf Xtend-Ebene definiert.
	Diese Funktionalität bleibt zunächst auf XPand-Ebene.
	Grund: Zu viel Aufwand bei zu wenig Ergebnis...bisher auf XPand-Ebene schöner zu lösen,
	da dort direkt Code in die Methodenrümpfe geschrieben werden kann.
*/ 
/**
Void addInterceptorClass(MClassifier this) :
	createClassifier(this.getModel(), this.asTypeName()+"Interceptor", this.asTypeName()+"Interceptor") ->
	this.getTaggedValue("ejb3ClassInterceptor", "methods").getElements().addInterceptorOperation(this);
	
Void addInterceptorOperation(String name, MClassifier this) :
	let parameter = createParameterList() :
		let operation = createOperation(name, name, parameter, "public", false, false, createList(), 1, false, createList(), createList(), createPrimitiveType("Object"), false, false) :
			operation.addParameter("ctx", 1, createPrimitiveType("InvocationContext")) ->
			this.operation.add(operation);

create MOperation createOperation(String xmiGuid, String name, List[MParameter] parameter, String visibility, Boolean abstract, Boolean final, List aspect, Integer multiplicity, Boolean ordered, List ownedComment, List raisedException, MType returnType, Boolean static, Boolean unique) :
	processOperation(this, xmiGuid, name, parameter, visibility, abstract, final, aspect, multiplicity, ordered, ownedComment, raisedException, returnType, static, unique) ->
	this;

create MPrimitiveType createPrimitiveType(MModel container, String name, String xmiGuid) :
	processElement(xmiGuid, name) ->
	container.primitiveTypes.add(this) ->
	this;

create List[MParameter] createParameterList() :
	this;

create List createList() :
	this;		

MParameter addParameter(MOperation op, String name, Integer multiplicity, MType type) :
	op.parameter.add(createParameter(name, multiplicity, type));

create MParameter createParameter(String name, Integer multiplicity, MType type) :
	this.setName(name) ->
	this.setMultiplicity(multiplicity) ->
	this.setOrdered(false) ->
	//achtung, eins zu n
	this.setType(createPrimitiveType("Object")) ->
	this.setXmiGuid(name) ->
	this;
*/

