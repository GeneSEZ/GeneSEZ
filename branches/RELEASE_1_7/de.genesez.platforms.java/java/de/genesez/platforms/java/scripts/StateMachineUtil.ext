
import gcore;

extension de::genesez::platforms::common::AccessHelper;
extension de::genesez::platforms::common::log::Log;
extension de::genesez::platforms::common::typemapping::TypeMapping;
extension de::genesez::platforms::java::scripts::Naming;

/**
 * preprocess classes with state chart:
 * <ul><li>add an interface EventReceiver<EV></li></ul>
 */
prepareActiveClass(MClassifier clazz) :
	(clazz.ownedBehavior.typeSelect(MStateMachine).isEmpty ? 
		null :
		clazz.realization.add(eventReceiverType(clazz))) ->
	""
	;
	
private create MExternal eventReceiverType(MClassifier clazz) :
	// add containment
	clazz.model().externalTypes.add( this ) ->
	setSpecification("EventReceiver<" + clazz.asTypeName() + ".EventId>") ->
	this
	;

/**
 * find outmost initial state which is the startup state
 */
startupState(MStateMachine this) :
	smstate.typeSelect(MInitialState).select(i|i.superstate == null).first()
	;

/**
 * extract all states that have no substates (i.e. MLeafState and subclasses)
 */
leafStates(List[MState] allStates) :
	allStates.typeSelect(MLeafState).sortBy(s|s.name)
	;
	
/**
 * remove duplicates from a collection of MElement and sort by name.
 * duplicates may be introduced by MagicDraw's queer treatment of events
 */
nameSort(List[MElement] elements) :
	elements.toSet().sortBy(e|e.name)
	;

/**
 * transitions from the same source state and with the same triggering event
 * are considered a transition group and put together in a list.
 * @param atomic a guarded MAtomicTransition
 * @return a hopefully unique nae for the guard evaluation method
 */
guardName(MGuard guard) :
	let tr = guard.transition.first() :
		"guard" + tr.source.name.toFirstUpper() + "To" +
		tr.target.name.toFirstUpper() + "By" + tr.trigger.first().name.toFirstUpper()
	;


/**
 * transitions from the same source state and with the same triggering event
 * are considered a transition group and put together in a list.
 * @param atomics the list of all atomic transitions of a particular state machine
 * @return a list of lists of transitions (the transition groups)
 */
transitionGroups(List[MAtomicTransition] atomics) :
	let tr1 = atomics.sortBy(a|a.source.name) :
		extractGroup(tr1.first(), tr1.withoutFirst(), {})
	;
	
/**
 * find all atomic transitions in the list of remaining transitions, that belong together
 * as a transition group (@see #transitionGroups). Append group to the groupList
 * and recurse through the remaining list.<br>
 * <b>groupList and return type should be List[List[MAtomicTransition]], but this is not supported by
 * current version (4.3) of Xtend.</b> 
 * @param head		the transition that is first (and possibly only) ele 
 * @param remaining	transitions that are not assigned to a group so far
 * @param groupList	list of groups that were found in earlier recursion steps (s. above)
 * @return list of lists of transitions
 */
List extractGroup(MAtomicTransition head, List[MAtomicTransition] remaining, List groupList) :
	let group = 
		{head}.addAll(remaining.select(atr|atr.source == head.source && 
							atr.definingTransition.trigger == head.definingTransition.trigger)) :
		groupList.add(group) ->
		remaining.removeAll(group) ->
		switch {
			case remaining.size > 1 :
				extractGroup(remaining.first(), remaining.withoutFirst(), groupList)
			case remaining.size == 1 :
				groupList.add({remaining.first()})
			default:
				groupList
		}
	;

/**
 * sort the list of lists of atomic transitions by their source state
 * @param atll list of lists of atomic transitions with same source state
 */
 List sourceSort(List atll) :
 	atll.sortBy(l| ((MAtomicTransition) ((List) l).first()).source.name)
	;

/**
 * sort atomic transitions in such a way that those with original origin in a 
 * more inner state are handled before those with original source in a more 
 * outer state
 */
List[MAtomicTransition] sortInnerToOuter(List[MAtomicTransition] atl) : 
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.sortInnerToOuter(java.util.List)
 	;

/**
 * "half order" compare: a state contained in an other state is considered
 * smaller. no assertion is made, if it is not contained
 */ 
compareStateDepth(MState s1, MState s2) :
	s1 == s2 ? 0 : (s1.parentStates().contains(s2) ? -1 : 1)
	;
	
List[MState] parentStates(MState s) :
	s.superstate != null ?
		{}.add(parentStates(s.superstate)).flatten():
		{}
		;

/**
 * is this activity bound to a state as entry, exit or do action?
 * then it needs an implementation without parameters.
 * also if it is bound to a transition without trigger event or with a parameterless event
 */	
isParameterlessActivity(MActivity this) :
	!entry.isEmpty || !exit.isEmpty || !do.isEmpty ||
		(!transition.isEmpty && (transition.trigger.isEmpty || transition.trigger.parameter.isEmpty))
	;
	
/**
 * only true, if every event has parameters for this activity
 */
isActivityWithParameters(MActivity this) :
	let transitions = referencedTransitions() :
		!(transitions.isEmpty || 
		  transitions.trigger.isEmpty || 
		  transitions.trigger.exists(e|e.parameter.isEmpty))
	;
	
/**
 * all the transitions referred by an activity that could supply parameters
 */
cached Collection[MTransition] referencedTransitions(MActivity this) :
	{}.addAll(transition)
		.addAll(entry.incoming)
		.addAll(exit.outgoing)
	;
	
/**
 * because the same action can be triggered by different events, there could be
 * different signatures. so find the largest common parameter list. 
 */
cached List[MParameter] parameterList(MActivity this) :
	!isActivityWithParameters() ? {} :
	(
		referencedTransitions().trigger.getCommonParams() 
	)
;

/**
 * @return list of Parameters
 */
List[MParameter] getCommonParams(List l) :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.getCommonParams(java.util.List) 
	;


/**
 * check if an event has a specific type signature
 */
 checkSignature(MEvent this, List[MType] sig) :
 	parameter.type == sig
 	;

/**
 * get transition type based on presence of guard condition
 */
 transitionType(MAtomicTransition tr) :
 	tr.definingTransition.guard == null ?
 		"Transition" : "GuardedTransition"
 	;

/**
 * build a map of guard descriptors with unique name, 
 * normalized expression and parameter list
 */
initGuards(MDefinitionContext this) :
	clearGuardInfo() ->
	guard.collect(e|e.registerGuard()) ->
	""
	;

/**
 * return state to be remembered in history state when
 * leaving a history region
 */
historyToSave(MHistoryState history, MLeafState source) :
	history.deep ?
		source :
		history.reachableHistory.nearestReachable(source)
	;
	
/**
 * go up in state hierarchy until a reachable state is found
 */
MState nearestReachable(List[MHistoryState] reachable, MState from) :
	switch {
		case reachable.contains(from) : from
		case reachable.exists(st|st.superstate == from.superstate) :
			reachable.select(st|st.superstate == from.superstate).first()
		default : nearestReachable(reachable, from.superstate)
	}
	;

/**
 * build a list of entry activities on the way from history state to target
 */
List [MActivity] resultingEntries(MHistoryState history, MLeafState target) :
//	visitedStates(history, target).entry
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.
		resultingEntries(de.genesez.metamodel.gcore.MHistoryState, de.genesez.metamodel.gcore.MLeafState)
	;

/**
 * build a list of do activities on the way from history state to target
 */
List [MActivity] resultingStartDo(MHistoryState history, MLeafState target) :
//	visitedStates(history, target).do
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.
		resultingStartDo(de.genesez.metamodel.gcore.MHistoryState, de.genesez.metamodel.gcore.MLeafState)
	;

/**
 * build a list of timers to be started on the way from history state to target
 */
resultingTimer(MHistoryState history, MLeafState target) :
	visitedStates(history, target).outgoing.trigger.typeSelect(MTimeEvent)
	;

/**
 * build a list of visited states on the way from history state to target
 */
List [MState] visitedStates(MHistoryState history, MLeafState target) :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.
		visitedStates(de.genesez.metamodel.gcore.MHistoryState, de.genesez.metamodel.gcore.MLeafState)
	;

/**
 * build a map of guards mapping equal conditions to the same method name
 */
private MGuard registerGuard(MGuard guard) :
	//guard
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.registerGuard(de.genesez.metamodel.gcore.MGuard)
	;

/**
 * get a collection of keys for all guard infos <br>
 * same logical expressions in uml model may be stored as different guards,
 * so we try to normalize the condition statements (only in format, not in logic!)
 * to have a single guard evaluation method for all equal guards.
 * 
 * @return list of normalized guard expression serving as key
 */
List[String] getGuards() :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.getGuards()
	;

/**
 * initalize internal maps for registered guard methods
 */
private Void clearGuardInfo() :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.clearGuardInfo()
	;

/**
 * get the method name for a guard
 */
String method(MGuard guard) :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.getMethod(de.genesez.metamodel.gcore.MGuard)
	;

/**
 * get the method name for a guard
 */
String method(String guardExp) :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.getMethod(java.lang.String)
	;

/**
 * get normalized guard expression
 */
String expression(MGuard guard) :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.guardKey(de.genesez.metamodel.gcore.MGuard)
	;

/**
 * get all events constrained with this guard
 */
boolean isTriggerless(String guard) :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.isTriggerless(java.lang.String)
	;

/**
 * get all events constrained with this guard
 */
Set[MEvent] getGuardEvents(String guard) :
	JAVA de.genesez.platforms.common.m2t.StateMachineHelper.getGuardEvents(java.lang.String)
	;
	 	