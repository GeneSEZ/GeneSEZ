//	based on genesez meta model
import genesezMM;

extension de::genesez::common::AccessHelper;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public extend functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * formats a name of a classifier according naming convention
 * @param	type	an interface
 * @return	name of a classifier
 */
String asClassifierName(MInterface type) :
	asInterfaceName(type.name);

/**
 * formats a name of a classifier according naming convention
 * @param	type	a classifier
 * @return	name of a classifier
 */
String asClassifierName(MClass type) :
	name(type).toFirstUpper();

/**
 * formats a name of a classifier according naming convention
 * @param	type	an enumeration
 * @return	name of a classifier
 */
String asClassifierName(MEnumeration type) :
	name(type).toFirstUpper();

/**
 * formats a name of a classifier according naming convention
 * @param	type	a classifier
 * @return	name of a classifier
 */
String asClassifierName(MType type) :
	name(type);

/**
 * formats a name of an interface according naming convention
 * @param	s	name of an interface
 * @return	name of an interface
 */
String asInterfaceName(String s) :
	"I" + s.toFirstUpper();

/**
 * formats a name of a variable according naming convention
 * @param	s	name of a variable
 * @return	name of a variable
 */
String asFieldName(MProperty p) :
	p.name.toFirstLower();

/**
 * formats a name of a variable according naming convention
 * @param	s	name of a variable
 * @return	name of a variable
 */
String asPropertyName(MProperty p) :
	p.name.toFirstUpper();

/**
 * formats a name of an operation according naming convention
 * @param	s	name of a operation
 * @return	name of a operation
 */
String asOperationName(String s) :
	s.toFirstUpper();

/**
 * formats a name of a parameter according naming convention
 * @param	s	name of a parameter
 * @return	name of a parameter
 */
String asParameterName(String s) : 
	s.toFirstLower();

/**
 * formats a name of a method used to add something to a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the add-to method
 */
String asAddTo(String s) :
	"AddTo" + s.toFirstUpper();

/**
 * formats a name of a method used to add something to a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the add-to method
 */
String asInsertIn(String s) :
	"InsertIn" + s.toFirstUpper();

/**
 * formats a name of a method used to remove something from a collection according naming convention
 * @param	s	name of an attribute
 * @return	name of the remove-from method
 */
String asRemoveFrom(String s) :
	"RemoveFrom" + s.toFirstUpper();
