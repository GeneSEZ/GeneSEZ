<?xml version="1.0" encoding="utf-8"?>

<workflow>
	
	<!-- 	This workflow component is provided to perform the code generation
			without the AOP of templates (for this see the workflow component 
			codeGeneratorAOP).
			
			Following parameters are required:
			----------------------------------
			
			$mapTarget: 		name of the output language (i.e. Java)
			$rootTemplate: 		the root xpt-file where the generation starts
			$outputDir: 		the path where the generated file are produced
			$proRegDir: 		the path where the protected reagions are found
								(usually the same as the output directory
	 -->
	 
	
	<component id="codeGenerator" class="oaw.xpand2.Generator" skipOnErrors="true">
		
		<!-- Template files are written in the utf-8 charset. -->
		<fileEncoding value="utf-8" />
		<metaModel id="genesezMM" class="oaw.type.emf.EmfMetaModel">
			<metaModelPackage value="genesezMM.GenesezMMPackage" />
		</metaModel>
		
		<!-- Define the map target as global variable. -->
		<globalVarDef name="mapTarget" value="'${mapTarget}'"/>
		
		<expand value="${rootTemplate}" />
		<genPath value="${outputDir}" />
		
		<!-- Config the protected regions resolver. -->
		<prSrcPaths value="${proRegDir}" />
		<prDefaultExcludes value="false" />
		<prExcludes value=".svn" />

		<!-- Use some beautifiers to beautify the generated code. -->
		<beautifier 
			class="org.hybridlabs.source.formatter.JavaImportBeautifier"
			conventionFilePath="-filename-"
			organizeImports="true"
			format="true" />
		<beautifier
			class="org.openarchitectureware.xpand2.output.JavaBeautifier" />
		<beautifier
			class="org.openarchitectureware.xpand2.output.XmlBeautifier" />
		
	</component>

</workflow>
