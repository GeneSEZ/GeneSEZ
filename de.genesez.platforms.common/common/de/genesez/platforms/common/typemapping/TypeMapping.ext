//	based on genesez meta model
import genesezMM;

extension de::genesez::io::io;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public extend functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * performs name mapping
 * @param	map	name to map
 * @return	the mapped name
 */
String mapName(MType this) : 
	mappingName();

/**
 * performs name mapping
 * @param	map	name to map
 * @return	the mapped name
 */
String mapName(MType this, String contextType) : 
	mappingName(contextType);


/**
 * performs type mapping
 * @param	map	type to map
 * @return	the mapped type
 */
String mapType(MParameter this) :
	mappingType(unique, ordered);

/**
 * performs type mapping
 * @param	map	type to map
 * @return	the mapped type
 */
String mapType(MOperation this) :
	mappingType(unique, ordered);

/**
 * performs type mapping
 * @param	map	type to map
 * @return	the mapped type
 */
String mapType(MProperty this) :
	mappingType(unique, ordered);


/**
 * performs type mapping using the specified context
 * @param	map		type to map
 * @param	context	context in which the type should be mapped
 * @return	the mapped type
 */
String mapType(MParameter this, String contextType) :
	mappingType(unique, ordered, contextType);

/**
 * performs type mapping using the specified context
 * @param	map		type to map
 * @param	context	context in which the type should be mapped
 * @return	the mapped type
 */
String mapType(MOperation this, String contextType) :
	mappingType(unique, ordered, contextType);

/**
 * performs type mapping using the specified context
 * @param	map		type to map
 * @param	context	context in which the type should be mapped
 * @return	the mapped type
 */
String mapType(MProperty this, String contextType) :
	mappingType(unique, ordered, contextType);
	
	
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private java functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * maps the name
 * @param	this	map name to map
 * @return	the mapped name
 */
private String mappingName(MType this) :
	JAVA de.genesez.common.typemapping.TypeMapping.mappingName(genesezMM.MType);

/**
 * maps the name
 * @param	this	map name to map
 * @param	contextType	context in which the name should be mapped 
 * @return	the mapped name
 */
private String mappingName(MType this, String contextType) :
	JAVA de.genesez.common.typemapping.TypeMapping.mappingName(genesezMM.MType, java.lang.String);	


/**
 * maps the type
 * @param	unique	unique collection
 * @param	ordered	ordered collection
 * @return	the mapped type
 */
private String mappingType(Boolean unique, Boolean ordered) :
	JAVA de.genesez.common.typemapping.TypeMapping.mappingType(java.lang.Boolean, java.lang.Boolean);

/**
 * maps the type
 * @param	unique	unique collection
 * @param	ordered	ordered collection
 * @param	contextType context in which the type should be mapped
 * @return	the mapped type
 */	
private String mappingType(Boolean unique, Boolean ordered, String contextType) :
	JAVA de.genesez.common.typemapping.TypeMapping.mappingType(java.lang.Boolean, java.lang.Boolean, java.lang.String);	

