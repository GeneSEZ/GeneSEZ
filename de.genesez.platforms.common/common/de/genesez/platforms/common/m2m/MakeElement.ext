/**
 * Helper to create meta model elements.
 * These scripts wrap the 'create...' and 'process...' scripts 
 * from 'CreateTemplate.ext'.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-08-17
 * 
 */

// based on genesez meta model
import gcore;

extension de::genesez::platforms::common::m2m::CreateTemplate;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	makeComment
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * creates a comment
 * xmiGuid is created by container xmiGuid and '.comment'
 *
 * @param container		instance of MElement
 * @param annotation 	annotation of the comment
 * @return				instance of the comment
 */
MComment makeComment(MElement container, String annotation) :
	makeComment(container, container.xmiGuid + "." + "comment", annotation);


/**
 * creates a comment
 *
 * @param container		instance of MElement
 * @param xmiGuid		unique identifier
 * @param annotation 	annotation of the comment
 * @return				instance of the comment
 */
MComment makeComment(MElement container, String xmiGuid, String annotation) :
	let c = createComment(container, xmiGuid, annotation) :
		c;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	makeOperation with type as MType
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * creates an operation and adds it to the container
 * xmiGuid is created by container xmiGuid and operation name
 * parameter is empty
 * return is null
 *
 * @param container		instance of a MClassifier
 * @param name 			name of the operation
 * @param visibility	visibility of the operation 
 * @param static		static status of the operation
 * @param abstract		abstract status of the operation
 * @param final			final status of the operation
 * @return				instance of the operation
 */
MOperation makeOperation(MClassifier container, String name, String visibility, boolean static, boolean abstract, boolean final) :
	makeOperation(container, container.xmiGuid + "." + name, name, visibility, static, abstract, final, {}, null);
	

/**
 * creates an operation and adds it to the container
 * parameter is empty
 * return is null
 *
 * @param container		instance of a MClassifier
 * @param xmiGuid		unique identifier
 * @param name 			name of the operation
 * @param visibility	visibility of the operation 
 * @param static		static status of the operation
 * @param abstract		abstract status of the operation
 * @param final			final status of the operation
 * @return				instance of the operation
 */
MOperation makeOperation(MClassifier container, String xmiGuid, String name, String visibility, boolean static, boolean abstract, boolean final) :
	makeOperation(container, xmiGuid, name, visibility, static, abstract, final, {}, null);


/**
 * creates an operation and adds it to the container
 * xmiGuid is created by container xmiGuid and operation name
 * parameter is empty
 *
 * @param container		instance of a MClassifier
 * @param name 			name of the operation
 * @param visibility	visibility of the operation 
 * @param static		static status of the operation
 * @param abstract		abstract status of the operation
 * @param final			final status of the operation
 * @param return		return parameter
 * @return				instance of the operation
 */
MOperation makeOperation(MClassifier container, String name, String visibility, boolean static, boolean abstract, boolean final, MParameter return) :
	makeOperation(container, container.xmiGuid + "." + name, name, visibility, static, abstract, final, {}, return);
	

/**
 * creates an operation and adds it to the container
 * parameter is empty
 *
 * @param container		instance of a MClassifier
 * @param xmiGuid		unique identifier
 * @param name 			name of the operation
 * @param visibility	visibility of the operation 
 * @param static		static status of the operation
 * @param abstract		abstract status of the operation
 * @param final			final status of the operation
 * @param return		return parameter
 * @return				instance of the operation
 */
MOperation makeOperation(MClassifier container, String xmiGuid, String name, String visibility, boolean static, boolean abstract, boolean final, MParameter return) :
	makeOperation(container, xmiGuid, name, visibility, static, abstract, final, {}, return);	


/**
 * creates an operation and adds it to the container
 * xmiGuid is created by container xmiGuid and operation name
 *
 * @param container		instance of a MClassifier
 * @param name 			name of the operation
 * @param visibility	visibility of the operation 
 * @param static		static status of the operation
 * @param abstract		abstract status of the operation
 * @param final			final status of the operation
 * @param parameter		list of parameter
 * @param return		return parameter
 * @return				instance of the operation
 */
MOperation makeOperation(MClassifier container, String name, String visibility, boolean static, boolean abstract, boolean final, List[MParameter] parameter, MParameter return) :
	makeOperation(container, container.xmiGuid + "." + name, name, visibility, static, abstract, final, parameter, return);	

		
/**
 * creates an operation and adds it to the container
 *
 * @param container		instance of a MClassifier
 * @param xmiGuid		unique identifier
 * @param name 			name of the operation
 * @param visibility	visibility of the operation 
 * @param static		static status of the operation
 * @param abstract		abstract status of the operation
 * @param final			final status of the operation
 * @param parameter		list of parameter
 * @param return		return parameter
 * @return				instance of the operation
 */
MOperation makeOperation(MClassifier container, String xmiGuid, String name, String visibility, boolean static, boolean abstract, boolean final, List[MParameter] parameter, MParameter return) :
	let o = createOperation(container, xmiGuid, name) :
		// (visibility, static, abstract, final, multiplicity, unique, ordered)
		o.processOperation(visibility, static, abstract, final, 1, false, false) ->
		parameter != null && !parameter.isEmpty 
			? o.setParameter(parameter) 
			: Void ->
		return != null
			? o.setReturn(return)
			: Void ->
		o;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	makeParameter with type as MType
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * creates a parameter
 * xmiGuid is created by container xmiGuid and parameter name
 * multiplicity is set to 1
 * unique is set to true
 * ordered is set to false
 *
 * @param container		instance of MOperation
 * @param name 			name of the parameter
 * @param defaultValue 	the default value of the parameter
 * @param direction 	the direction of the parameter 
 * @param type			data type of the parameter
 * @return				instance of the parameter
 */
MParameter makeParameter(MOperation container, String name, String defaultValue, String direction, MType type) :
	makeParameter(container, container.xmiGuid + "." + name, name, defaultValue, direction, 1, true, false, type);


/**
 * creates a parameter
 * multiplicity is set to 1
 * unique is set to true
 * ordered is set to false
 *
 * @param container		instance of MOperation
 * @param xmiGuid		unique identifier
 * @param name 			name of the parameter
 * @param defaultValue 	the default value of the parameter
 * @param direction 	the direction of the parameter 
 * @param type			data type of the parameter
 * @return				instance of the parameter
 */
MParameter makeParameter(MOperation container, String xmiGuid, String name, String defaultValue, String direction, MType type) :
	makeParameter(container, xmiGuid, name, defaultValue, direction, 1, true, false, type);


/**
 * creates a parameter
 * xmiGuid is created by container xmiGuid and parameter name
 *
 * @param container		instance of MOperation
 * @param name 			name of the parameter
 * @param defaultValue 	the default value of the parameter
 * @param direction 	the direction of the parameter 
 * @param multiplicity 	multiplicity of the data type
 * @param unique 		unique status of the data type
 * @param orderd 		ordered status of the data type
 * @param type			data type of the parameter
 * @return				instance of the parameter
 */
MParameter makeParameter(MOperation container, String name, String defaultValue, String direction, int multiplicity, boolean unique, boolean ordered, MType type) :
	makeParameter(container, container.xmiGuid + "." + name, name, defaultValue, direction, multiplicity, unique, ordered, type);


/**
 * creates a parameter
 *
 * @param container		instance of MOperation
 * @param xmiGuid		unique identifier
 * @param name 			name of the parameter
 * @param defaultValue 	the default value of the parameter
 * @param direction 	the direction of the parameter 
 * @param multiplicity 	multiplicity of the data type
 * @param unique 		unique status of the data type
 * @param orderd 		ordered status of the data type
 * @param type			data type of the parameter
 * @return				instance of the parameter
 */
MParameter makeParameter(MOperation container, String xmiGuid, String name, String defaultValue, String direction, int multiplicity, boolean unique, boolean ordered, MType type) :
	let p = createParameter(container, xmiGuid, name) :
		// (defaultValue, direction, multiplicity, unique, ordered)
		p.processParameter(defaultValue, direction, multiplicity, unique, ordered) ->
		p.setType(type) ->
		p;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	makeSterotype
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * creates a sterotype
 * when the name of sterotype is equals to an existing sterotype name 
 * the existing one will be returned otherwise the sterotype will be created 
 *
 * @param container		instance of MModel
 * @param xmiGuid		unique identifier
 * @param name 			name of the stereotype
 * @return				instance of the stereotype
 */
MStereotype makeStereotype(MModel container, String xmiGuid, String name) :
	container.anyStereotype.select(s|s.name == name).isEmpty
		? makeStereotypeNoChecks(container, xmiGuid, name)
		: container.anyStereotype.selectFirst(s|s.name == name);


/**
 * creates a tag
 *
 * @param container		instance of MModel
 * @param xmiGuid		unique identifier
 * @param name 			name of the stereotype
 * @return				instance of the stereotype
 */
MStereotype makeStereotypeNoChecks(MModel container, String xmiGuid, String name) :
	let s = createStereotype(container, xmiGuid, name) :
		s;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	makeTag
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * creates a tag
 * when the name of tag is equals to an existing tag name 
 * the existing one will be returned otherwise the tag will be created
 *
 * @param container		instance of MStereotype
 * @param name 			name of the tag
 * @param type			data type of the tag 
 * @return				instance of the tag
 */
MTag makeTag(MStereotype container, String name, String type) :
	container.property.select(t|t.name == name).isEmpty
		? makeTagNoChecks(container, name, type)
		: container.property.selectFirst(t|t.name == name);


/**
 * creates a tag
 *
 * @param container		instance of MStereotype
 * @param name 			name of the tag
 * @param type			data type of the tag 
 * @return				instance of the tag
 */
MTag makeTagNoChecks(MStereotype container, String name, String type) :
	let t = createTag(container, name, type) :
		t;
	
	
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	makeTaggedValue
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/**
 * creates a tagged value
 * when the name of tag and stereotype is equals to an existing tag and stereotype name 
 * the existing one will be returned otherwise the tagged value will be created
 *
 * @param container		instance of MElement
 * @param tag 			instance of MTag
 * @param value			value of the tagged value 
 * @return				instance of the tagged value
 */
MTag makeTaggedValue(MElement container, MTag tag, String value) :
	container.taggedValue.select(tv|tv.tag.name == tag.name && tv.tag.stereotype.name == tag.stereotype.name).isEmpty
		? makeTaggedValueNoChecks(container, tag, value)
		: ( let tv = container.taggedValue.selectFirst(tv|tv.tag.name == tag.name && tv.tag.stereotype.name == tag.stereotype.name) :
				tv.setValue(value) ->
				tv);


/**
 * creates a tagged value
 *
 * @param container		instance of MElement
 * @param tag 			instance of MTag
 * @param value			value of the tagged value 
 * @return				instance of the tagged value
 */
MTag makeTaggedValueNoChecks(MElement container, MTag tag, String value) :
	let tv = createTaggedValue(container, tag, value) :
		tv;