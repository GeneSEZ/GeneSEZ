/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */


/**
 * Frontend for name mapping of model elements.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */


// -- Internal and External Naming Context Settings ---------------------------------------------------------


/**
 * Get the actual internal naming context.
 * 
 * @api
 */
String getInternalNamingContext() :
	JAVA org.genesez.mapping.name.InternalContextManager.getContext();


/**
 * Get the actual external naming context.
 * 
 * @api
 */
String getExternalNamingContext() :
	JAVA org.genesez.mapping.name.ExternalContextManager.getContext();


/**
 * Set the new internal naming context.
 * 
 * @api
 */
Void setInternalNamingContext(String namingContext) :
	JAVA org.genesez.mapping.name.InternalContextManager.setContext(java.lang.String);


/**
 * Set the new external naming context.
 * 
 * @api
 */
Void setExternalNamingContext(String typeMappingContext) :
	JAVA org.genesez.mapping.name.ExternalContextManager.setContext(java.lang.String);


/**
 * Revert to the previous internal naming context.
 * 
 * @api
 */
Void revertInternalNamingContext() :
	JAVA org.genesez.mapping.name.InternalContextManager.revertContext();


/**
 * Revert to the previous external naming context.
 * 
 * @api
 */
Void revertExternalNamingContext() :
	JAVA org.genesez.mapping.name.ExternalContextManager.revertContext();


// -- Mapping of Model Elements -----------------------------------------------------------------------------


/**
 * Returns the mapped name of the internal model element by means of the actual internal naming context.
 * If no Xtend script for the specified model element and naming context exists, 
 * the string representation of the specified model element will be returned.
 * 
 * @param	inernalElement	The internal model element which shall be mapped.
 * @return	The mapped name of the internal model element or its string representation.
 */
String mapInternalElementName(Object internalElement) :
	mapElementName( internalElement, getInternalNamingContext() );


/**
 * Returns the mapped name of the external model element by means of the actual external naming context.
 * If no Xtend script for the specified model element and naming context exists, 
 * the string representation of the specified model element will be returned.
 * 
 * @param	externalElement	The external model element which shall be mapped.
 * @return	The mapped name of the external model element or its string representation.
 */
String mapExternalElementName(Object externalElement) :
	mapElementName( externalElement, getExternalNamingContext() );


/**
 * Returns the mapped name of the model element by means of the specified naming context.
 * If no Xtend script for the specified model element and naming context exists, 
 * the string representation of the specified model element will be returned.
 * 
 * @param	element			The model element which shall be mapped.
 * @param	namingContext	The naming context in which the model element shall be mapped.
 * @return	The mapped name of the model element or its string representation.
 */
String mapElementName(Object element, String namingContext) :
	JAVA org.genesez.mapping.name.NameMapping.mapElementName(java.lang.Object, java.lang.String);
