/**
 * Validates an UML2 State Machine against the UML2 metamodel
 *
 * currently covered:
 * - naming validations - elements that must have a name
 * --- StateMachine, Behavior, Operation, Signal, Parameter
 * - pseudostate validations
 * --- StateMachine contains at least one Region
 * --- Region contains only one InitialState
 * --- InitialState has only one outgoing Transition
 * --- outgoing Transition from InitialState has no Trigger/Guard
 * --- InitialState has no incoming Transition(s)
 * --- FinalState has no outgoing Transition(s)
 * - event validations
 * --- Transition with Trigger has Event
 * --- Operation with return type has return parameter of the same type
 * --- the owner of a Signal is a StateMachine
 * 
 * @author	ines noetzold
 * @date 	2009-12-02
 */

//uml metamodel is going to be checked
import uml;

extension de::genesez::adapter::uml2::scripts::Helper;
extension de::genesez::adapter::uml2::scripts::StatechartValidationHelper;


/**
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * naming validations
 * checks UML2 naming constraints
 * 
 * all cases could be checked in one single validation, 
 * but this would prevent detailed error messages for the user.
 * so we go for usability instead of shortness.
 * 
 * valid naming is handled by statechartGenesezConstraints.chk
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */

/**
 * checks if a StateMachine has a name
 * @return true, if StateMachine has a name
 */
context StateMachine 
ERROR "UML2 Model Validation: StateMachine has no name." :
	name.doesExist();

/**
 * checks if a Behavior of a State or a Transition has a name
 * @return true, if Behavior has a name
 */
context Behavior if owner.metaType == State || owner.metaType == Transition
ERROR "UML2 Model Validation: behavior has no name." :
	name.doesExist();

/**
 * checks if an Operation has a name
 * @return true, if it has a name
 */
context Operation ERROR "UML2 Model Validation: operation has no name." :
	name.doesExist() || isConstructor() || isDestructor();

/**
 * checks if a Signal has a name
 * @return true, if it has a name
 */
context Signal ERROR "UML2 Model Validation: signal has no name." :
	name.doesExist();

/**
 * checks if a Parameter has a name
 * @return true, if it has a name
 */
context Parameter 
ERROR "UML2 Model Validation: parameter on "+owner.toString()+" has no name." :
	name.doesExist() || isReturnParameter();


/**
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * (pseudo)state validations
 * checks UML2 constraints related to (pseudo)states
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */

/**
 * checks if a StateMachine contains at least one Region directly
 * @return true, if it contains one
 */
context StateMachine
ERROR "UML2 Model Validation: StateMachine must contain at least one Region directly." :
	let r = ownedElement.typeSelect(Region) :
	r.select(e|e.stateMachine != null).size > 0;

/**
 * checks if a Region contains only one InitialState
 * (since a StateMachine always contains a Region, 
 * this checks also if the StateMachine itself has only one InitialState)
 * @return true, if there's only one
 */
context Region if subvertex.typeSelect(Pseudostate).size > 1
ERROR "UML2 Model Validation: One Region can only contains one InitialState." :
	let p = subvertex.typeSelect(Pseudostate) :
	p.select(e| e.isInitial() ).size == 1;
	
/**
 * checks if an InitialState has incoming transitions
 * @return true, if it has none
 */
context Pseudostate if isInitial()
ERROR "UML2 Model Validation: InitialState must not have incoming transitions." :
	incoming == null || incoming.size == 0;

/**
 * checks if an InitialState has only one outgoing transition
 * @return true, if it has exactly one
 */
context Pseudostate if isInitial()
ERROR "UML2 Model Validation: InitialState must have exactly one outgoing transition." :
	outgoing.size == 1;

/**
 * checks if a transition with source InitialState has trigger or guard
 * return true, if it has neither
 */
context Pseudostate if isInitial()
ERROR "UML2 Model Validation: transition from InitialState must have neither Trigger nor Guard. " :
	outgoing.trigger.isEmpty && (outgoing.guard).forAll(e|e.specification==null);

/**
 * checks if a FinalState has outgoing transitions
 * @return true, if it has none
 */
context FinalState 
ERROR "UML2 Model Validation: FinalState must not have outgoing transitions." :
	outgoing == null || outgoing.size == 0;

	
/*
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Event validations and validations regarding Event Elements
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */

/**
 * checks if a Transition with a Trigger has an Event
 * @return true, if it has an Event
 */
context Transition if trigger != null && trigger.size > 0 
ERROR "UML2 Model Validation: Transition with Trigger needs Event." :
	trigger.event != null && trigger.event.size > 0;

/**
 * checks if a call event has actually an operation to call
 * @return true, if an operation is defined for the call event
 */
context CallEvent ERROR "UML2 Model Validation: CallEvent needs an operation." :
 	operation != null;

/**
 * checks if a SignalEvent has a signal
 * @return true, if a signal is defined for the SignalEvent
 */
context SignalEvent ERROR "UML2 Model Validation: SignalEvent needs a signal." :
 	signal != null;

/**
 * checks if a TimeEvent has a TimeExpression ("when")
 * does not check if TimeExpression contains only digits to provide the possibility to define a variable
 * @return true, if an expression is defined for the TimeEvent
 */
context TimeEvent ERROR "UML2 Model Validation: TimeEvent needs a TimeExpression." :
 	when.stringValue().length > 0;

/**
 * checks if the owner of an operation is a StateMachine or the Classifier owning the StateMachine
 * @return true, if the owner is one of the above
 */
context Operation 
ERROR "UML2 Model Validation: operation must be owned by a StateMachine, a Class or a Classifier." :
	{StateMachine, Classifier, Class, Interface, DataType, Enumeration}.contains( owner.metaType );

/**
 * checks if an operation with a return type has a return parameter of the same type
 * operation without return type is handled by GeneSEZ as an operation of type void
 * @return true, if it has one
 */
context Operation if type != Void && type != null
ERROR "UML2 Model Validation: Operation with return type needs return parameter of the same type." : 
	ownedParameter.exists(e| (e.direction.toString()=="return" && e.type==type) );

/**
 * checks if the owner of a signal is a StateMachine
 * @return true, if the owner is a StateMachine
 */
context Signal ERROR "UML2 Model Validation: signal must be owned by a StateMachine." :
	owner.metaType == StateMachine;
