/**
 * UML 2 GeneSEZ transformation script.
 * Transforms UML activity models into GeneSEZ models.
 * 
 * @author	gerrit beine
 *
 * TODO: add object nodes support
 * TODO: add support for structured activities...
 */

// uses ecore metamodel
import ecore;
// uses uml metamodel - the source metamodel
import uml;
// uses GeneSEZ metamodel - the target metamodel
import gcore;

// Helper functions from platforms::common
extension org::genesez::platforms::common::AccessHelper;
extension org::genesez::platforms::common::GlobalStore;
extension org::genesez::platforms::common::log::Log;
extension org::genesez::platforms::common::m2m::CreateTemplate;

// core transformation
extension de::genesez::adapter::uml2::uml2genesez;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Activity behavior
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * create a GeneSEZ Activity from UML Behavior
 * @param a UML Behavior subclass Activity
 * @context the Usecase that owns the behavior
 * @return newly generated MActivity
 */
MActivity transformBehavior(Activity a, MUseCase this):
	trace("transforming UML Activity for usecase " + name) ->
	makeActivity(a);

/**
 * create a GeneSEZ Activity from UML Behavior
 * @param a UML Behavior subclass Activity
 * @context the Classifier that owns the behavior
 * @return newly generated MActivity
 */
MActivity transformBehavior(Activity a, MClassifier this):
	trace("transforming UML Activity for class " + name) ->
	makeActivity(a);

/**
 * create a GeneSEZ Activity from UML Behavior
 * @param a UML Behavior subclass Activity
 * @context the Package that owns the behavior
 * @return newly generated MActivity
 */
MActivity transformBehavior(Activity a, MPackage this):
	trace("transforming UML unbound activity") ->
	makeActivity(a);

/**
 * create a GeneSEZ Activity from UML Behavior
 * @param a UML Behavior subclass Activity
 * @context the Activity that owns the behavior
 * @return newly generated MActivity
 */
MActivity transformBehavior(Activity a, MActivity this):
	trace("transforming UML unbound activity") ->
	makeActivity(a);

/**
 * just a marker for error free templates
 * no GeneSEZ primitive type is created, should one?
 * prints a 'severe' log message to report such an transformation
 * @param a any UML Behavior subclass 
 * @context any Context that owns the behavior
 * @return	void
 */
MActivity transformBehavior(Behavior b, MDefinitionContext this):
	fatal("try to construct a MBehavior object from: " + b) ->
	Void;

/**
 * create a GeneSEZ activity from UML activity
 * @param a UML behavior subclass activity
 * @context the activity to transform
 * @return newly generated MActivity
 */
private create MActivity makeActivity(Activity a) :
	trace( "make [ " + metaType + " ] - " + a ) ->
	// basic element properties
	transformBasics(a) ->
	stereotype.addAll( a.getAppliedStereotypes().makeStereotype() ) ->
	// add nodes ...
	node.addAll(
		a.node.makeActivityNode( this )
	) ->
	// ... and edges
	edge.addAll( a.edge.makeActivityEdge( this ) ) ->
	// add owned sub behaviors
	ownedBehavior.addAll( a.ownedBehavior.transformBehavior(this) ) ->
	this;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Transform activity nodes
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * creates a GeneSEZ call behaviour action
 * @param a UML call behavior action
 * @param activity the GeneSEZ activity that owns the action
 * @context the action to transform
 * @return newly generated MAction
 */
private create MAction makeActivityNode(CallBehaviorAction a, MActivity activity) :
	trace( "make [ " + metaType + " ] - " + a ) ->
	transformNode(a) ->
	// set the called behavior
	a.behavior != null ?
		setBehavior( transformBehavior(a.behavior, activity) ) :
		warn( "No behavior referenced by call behavior action " + name) ->
	this;

/**
 * creates a GeneSEZ call operation action
 * @param a UML call operation action
 * @param activity the GeneSEZ activity that owns the action
 * @context the action to transform
 * @return newly generated MAction
 */
private create MAction makeActivityNode(CallOperationAction a, MActivity activity) :
	trace( "make [ " + metaType + " ] - " + a ) ->
	transformNode(a) ->
	// todo: set the called operation
	a.operation != null ?
		setOperation( makeOperation(a.operation) ) :
		warn( "No operation referenced by call operation action " + name) ->
	this;

/**
 * creates a generic GeneSEZ action
 * @param a any other UML action
 * @param activity the GeneSEZ activity that owns the action
 * @context the action to transform
 * @return newly generated MAction
 */
private create MAction makeActivityNode(Action a, MActivity activity) :
	trace( "make [ " + metaType + " ] - " + a ) ->
	transformNode(a) ->
	setStereotype( { retrieveModel().createStereotype(a.metaType.toString(), a.metaType.toString()) } ) ->
	this;

/**
 * creates a GeneSEZ initial node
 * @param n UML initial node
 * @param a the GeneSEZ activity that owns the node
 * @context the node to transform
 * @return newly generated MNode
 */
private create MNode makeActivityNode(InitialNode n, MActivity a) :
	trace( "make [ " + metaType + " ] - " + n ) ->
	transformNode(n) ->
	setStereotype( { retrieveModel().createStereotype("InitialNode", "InitialNode") } ) ->
	this;

/**
 * creates a GeneSEZ activity final node
 * @param n UML activity final node
 * @param a the GeneSEZ activity that owns the node
 * @context the node to transform
 * @return newly generated MNode
 */
private create MNode makeActivityNode(ActivityFinalNode n, MActivity a) :
	trace( "make [ " + metaType + " ] - " + n ) ->
	transformNode(n) ->
	setStereotype( { retrieveModel().createStereotype("ActivityFinalNode", "ActivityFinalNode") } ) ->
	this;

/**
 * creates a GeneSEZ flow final node
 * @param n UML flow final node
 * @param a the GeneSEZ activity that owns the node
 * @context the node to transform
 * @return newly generated MNode
 */
private create MNode makeActivityNode(FlowFinalNode n, MActivity a) :
	trace( "make [ " + metaType + " ] - " + n ) ->
	transformNode(n) ->
	setStereotype( { retrieveModel().createStereotype("FlowFinalNode", "FlowFinalNode") } ) ->
	this;

/**
 * creates a GeneSEZ decision node
 * @param n UML decision node
 * @param a the GeneSEZ activity that owns the node
 * @context the node to transform
 * @return newly generated MNode
 */
private create MNode makeActivityNode(DecisionNode n, MActivity a) :
	trace( "make [ " + metaType + " ] - " + n ) ->
	transformNode(n) ->
	setStereotype( { retrieveModel().createStereotype("DecisionNode", "DecisionNode") } ) ->
	this;

/**
 * creates a GeneSEZ merge node
 * @param n UML merge node
 * @param a the GeneSEZ activity that owns the node
 * @context the node to transform
 * @return newly generated MNode
 */
private create MNode makeActivityNode(MergeNode n, MActivity a) :
	trace( "make [ " + metaType + " ] - " + n ) ->
	transformNode(n) ->
	setStereotype( { retrieveModel().createStereotype("MergeNode", "MergeNode") } ) ->
	this;

/**
 * creates a GeneSEZ fork node
 * @param n UML fork node
 * @param a the GeneSEZ activity that owns the node
 * @context the node to transform
 * @return newly generated MNode
 */
private create MNode makeActivityNode(ForkNode n, MActivity a) :
	trace( "make [ " + metaType + " ] - " + n ) ->
	transformNode(n) ->
	setStereotype( { retrieveModel().createStereotype("ForkNode", "ForkNode") } ) ->
	this;

/**
 * creates a GeneSEZ join node
 * @param n UML join node
 * @param a the GeneSEZ activity that owns the node
 * @context the node to transform
 * @return newly generated MNode
 */
private create MNode makeActivityNode(JoinNode n, MActivity a) :
	trace( "make [ " + metaType + " ] - " + n ) ->
	transformNode(n) ->
	setStereotype( { retrieveModel().createStereotype("JoinNode", "JoinNode") } ) ->
	this;

/**
 * just a marker for error free templates
 * no GeneSEZ node is created
 * prints a 'severe' log message to report such an transformation
 * @return	void
 */
private create MNode makeActivityNode(ActivityNode a, MActivity activity) :
	fatal("try to construct a MNode object from: " + a) ->
	Void;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Transform activity flows
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * creates a GeneSEZ control flow
 * @param f UML control flow
 * @param a the GeneSEZ activity that owns the node
 * @context the flow to transform
 * @return newly generated MFlow
 */
private create MFlow makeActivityEdge(ControlFlow f, MActivity a) :
	trace( "make [ " + metaType + " ] - " + f ) ->
	transformFlow(f,a) ->
	this;
	
/**
 * creates a GeneSEZ data flow
 * @param f UML object flow
 * @param a the GeneSEZ activity that owns the node
 * @context the flow to transform
 * @return newly generated MFlow
 * TODO: add object classifier to the flow
 */
private create MFlow makeActivityEdge(ObjectFlow f, MActivity a) :
	trace( "make [ " + metaType + " ] - " + f ) ->
	transformFlow(f,a) ->
	this;
	
/**
 * just a marker for error free templates
 * no GeneSEZ control flow is created
 * prints a 'severe' log message to report such an transformation
 * @return	void
 */
private MFlow makeActivityEdge(ActivityEdge e, MActivity a) : 
	fatal("try to construct a MFlow object from: " + e) ->
	Void;

/**
 * creates a GeneSEZ guard
 * @param s UML value specification
 * @param a the GeneSEZ activity that owns the guard
 * @context the guard to transform
 * @return newly generated MGuard
 */
private create MGuard makeGuard(ValueSpecification s, MActivity a) :
	trace( "make [ " + metaType + " ] - " + s ) ->
	transformBasics(s) ->
	setName( getSpecification(s) ) ->
	a.guard.add(this) ->
	this;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	property copy helpers
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Common transformations for all kinds of nodes
 * @param n UML ActivityNode
 * @context the node to transform
 * @return the node
 */
private MNode transformNode(MNode this, ActivityNode n) :
	// basic element properties
	transformBasics(n) ->
	stereotype.addAll( n.getAppliedStereotypes().makeStereotype() ) ->
	taggedValue.addAll( makeTaggedValues(n) ) ->
	// set the name if not set (this is required for non-action nodes)
	name.length == 0 ? setName(n.metaType.toString()) : null ->
	this;

/**
 * Common transformations for all kinds of flows
 * @param n UML ActivityEdge
 * @context the flow to transform
 * @return the flow
 */
private MFlow transformFlow(MFlow this, ActivityEdge f, MActivity a) :
	// basic element properties
	transformBasics(f) ->
	// set the guard of a flow
	f.guard == null ? null : makeGuard(f.guard, a) ->
	// set source and target of the object flow
	trace( "source is: " + a.node.select( e|e.xmiGuid == xmiId(f.source) ).first().name ) ->
	a.node.select( e|e.xmiGuid == xmiId(f.source) ).first().to.add(this) ->
	trace( "target is: " + a.node.select( e|e.xmiGuid == xmiId(f.target) ).first().name ) ->
	a.node.select( e|e.xmiGuid == xmiId(f.target) ).first().from.add(this) ->
	this;

/**
 * fetch the specification string from an expression
 * @param ox uml::OpaqueExpression (a ValueSpecification subtype)
 * @return specification string
 */
private String getSpecification(OpaqueExpression ox) :
 	ox.body.toString();

/**
 * fetch the specification string from a value specification
 * @param vs uml::ValueSpecification subtype
 * @return specification string
 */
private String getSpecification(ValueSpecification vs) :
 	fatal("cannot process ValueSpecification of type " + vs.metaType.toString()) ->
 	Void;
