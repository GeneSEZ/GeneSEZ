«REM» import code gen meta model «ENDREM»
«IMPORT genesezMM»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::DataType»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::Helper»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::Naming»


// //////////////////////////////////////////////////////////////////////////////
// public functions
// //////////////////////////////////////////////////////////////////////////////


// generate attributes for a classifier
«DEFINE AssociationDecl FOR MClassifier»
«EXPAND AssociationDecl FOREACH property.typeSelect(MAssociationRole)»
«ENDDEFINE»


«DEFINE OperationDecl FOR MInterface»
«FOREACH property.typeSelect(MAssociationRole) AS a»
	«EXPAND GetterDecl FOR a»
	«EXPAND IteratorDecl FOR a»
	«EXPAND InsertInDecl FOR a»
	«EXPAND RemoveFromDecl FOR a»
«ENDFOREACH»
«ENDDEFINE»


«DEFINE OperationImpl FOR MClass»
«FOREACH property.typeSelect(MAssociationRole) AS a»
	«EXPAND GetterImpl FOR a»
	«EXPAND IteratorImpl FOR a»
	«EXPAND InsertInImpl FOR a»
	«EXPAND RemoveFromImpl FOR a»
«ENDFOREACH»
«ENDDEFINE»


// generate a declaration for an attribute
«DEFINE AssociationDecl FOR MAssociationRole»
«REM»«EXPAND ProtectedRegion::Comment("java.massociationrole.declaration.association.comment." + xmiGuid)»«ENDREM»
/**
 * variable for association to «name»
«IF hasComment()-»
 * <br>@see {@link #«asGetter(name)»}
«ENDIF-»
 */
«IF plainAssociation()»
	«IF multiplicity == 1»
		private «type.name» «asVariableName(name)»;
	«ELSE»
		private java.util.Set<«type.name»> «asVariableName(name)» = new java.util.HashSet<«type.name»>();
	«ENDIF»
«ELSE»
	private java.util.Map<«type.name», «assocClass().name»> «asVariableName(name)» = new java.util.HashMap<«type.name», «assocClass().name»>();
«ENDIF»
«ENDDEFINE»


// generate a getter declaration method for a massociation
«DEFINE GetterDecl FOR MAssociationRole»
«REM»«EXPAND ProtectedRegion::CommentGetter("java.massociation.declaration.getter.comment." + xmiGuid)»«ENDREM»
/**
 * accessor for association to «name» 
«IF hasComment()-»
 * <br>«getCommentText(ownedComment)»
«ENDIF-»
 */
«IF plainAssociation()»
	«IF multiplicity == 1»
		public «type.name» «asGetter(name)»();
	«ELSE»
		public java.util.Set<«type.name»> «asGetter(name)»();
	«ENDIF»
«ELSE»
	public java.util.Map<«type.name», «assocClass().name»> «asGetter(name)»();
	public «assocClass().name» «asGetter(name)»AssociatedObject(«type.name» _other);
«ENDIF»
«ENDDEFINE»



// generate a getter implementation method for a MAssociation
«DEFINE GetterImpl FOR MAssociationRole»
«REM»«EXPAND ProtectedRegion::CommentGetter("java.massociation.implementation.getter.comment." + xmiGuid)»«ENDREM»
/**
 * accessor for association to «name»«IF hasComment()-»<br>
 «getCommentText(ownedComment)»
«ENDIF-»
 */
«IF plainAssociation()»
	«IF multiplicity == 1»
		public «type.name» «asGetter(name)»() {
			return «asVariableName(name)»;
		}
	«ELSE»
		public java.util.Set<«type.name»> «asGetter(name)»() {
			return java.util.Collections.unmodifiableSet(«asVariableName(name)»);
		}
	«ENDIF»
«ELSE»
	public java.util.Map<«type.name», «assocClass().name»> «asGetter(name)»() {
			return java.util.Collections.unmodifiableMap(«asVariableName(name)»);
	}
	
	public «assocClass().name» «asGetter(name)»AssociatedObject(«type.name» _other) {
		return «asVariableName(name)».get(_other);
	}
«ENDIF»
«ENDDEFINE»


// generate a iterator declaration method for a massociation
«DEFINE IteratorDecl FOR MAssociationRole»
«IF multiplicity != 1»
/**
 * accessor for association to «name»
«IF hasComment()-»
 * <br>@see {@link #«asGetter(name)»}
«ENDIF-»
 */
«REM»	«EXPAND ProtectedRegion::CommentIterator("java.massociation.declaration.iterator.comment." + xmiGuid)»«ENDREM»
	public java.util.Iterator<«type.name»> «asGetter(name)»Iterator();
«ENDIF»
«ENDDEFINE»


// generate a iterator implementation method for a massociation
«DEFINE IteratorImpl FOR MAssociationRole»
«IF multiplicity != 1»
/**
 * accessor for association to «name»
«IF hasComment()-»
 * <br>@see {@link #«asGetter(name)»}
«ENDIF-»
 */
«REM»	«EXPAND ProtectedRegion::CommentIterator("java.massociation.implementation.iterator.comment." + xmiGuid)»«ENDREM»
	public java.util.Iterator<«type.name»> «asGetter(name)»Iterator() {
	«IF  plainAssociation()»
		return «asVariableName(name)».iterator();
	«ELSE»
		return «asVariableName(name)».keySet().iterator();
	«ENDIF»
	}
«ENDIF»
«ENDDEFINE»


// generate a insert in declaration method
«DEFINE InsertInDecl FOR MAssociationRole»
/**
 * accessor for association to «name»
«IF hasComment()-»
 * <br>@see {@link #«asGetter(name)»}
«ENDIF-»
 */
«REM»«EXPAND ProtectedRegion::CommentInsertIn("java.massociation.declaration.insertin.comment." + xmiGuid)»«ENDREM»
«IF plainAssociation()»
	public void insertIn«name.toFirstUpper()»(«type.name» _in);
«ELSE»
	public void insertIn«name.toFirstUpper()»(«type.name» _in, «assocClass().name» _at);
«ENDIF»
«ENDDEFINE»


// generate a insert in implementation method
«DEFINE InsertInImpl FOR MAssociationRole»
/**
 * accessor for association to «name»
«IF hasComment()-»
 * <br>@see {@link #«asGetter(name)»}
«ENDIF-»
 */
«REM»«EXPAND ProtectedRegion::CommentInsertIn("java.massociation.implementation.insertin.comment." + xmiGuid)»«ENDREM»
«IF plainAssociation()»
	public void insertIn«name.toFirstUpper()»(«type.name» _in) {
		«IF multiplicity == 1»
			if («asVariableName(name)» == _in) {
				return;
			}
			«IF opposite != null»
				if («asVariableName(name)» != null) {
					«asVariableName(name)».removeFrom«opposite.name.toFirstUpper()»(this);
				}
			«ENDIF»
			«asVariableName(name)» = _in;
		«ELSE»
			if («asVariableName(name)».contains(_in)) {
				return;
			}
			«asVariableName(name)».add(_in);
		«ENDIF»
		«IF opposite != null»
			_in.insertIn«opposite.name.toFirstUpper()»(this);
		«ENDIF»
	}
«ELSE»
	public void insertIn«name.toFirstUpper()»(«type.name» _in, «assocClass().name» _at) {
		if («asVariableName(name)».keySet().contains(_in) && «asVariableName(name)».get(_in) == _at) {
				return;
		}
		«asVariableName(name)».put(_in, _at);
	«IF opposite != null»
		_in.insertIn«opposite.name.toFirstUpper()»(this, _at); 
	«ENDIF»
	}
«ENDIF»
«ENDDEFINE»


// generate a remove from declaration method
«DEFINE RemoveFromDecl FOR MAssociationRole»
/**
 * accessor for association to «name»
«IF hasComment()-»
 * <br>@see {@link #«asGetter(name)»}
«ENDIF-»
 */
«REM» «EXPAND ProtectedRegion::CommentRemoveFrom("java.massociation.declaration.removefrom.comment." + xmiGuid)»«ENDREM»
	public void removeFrom«name.toFirstUpper()»(«type.name» _ex);
«ENDDEFINE»


// generate a remove from implementation method
«DEFINE RemoveFromImpl FOR MAssociationRole»
«REM» EXPAND ProtectedRegion::CommentRemoveFrom("java.massociation.implementation.removefrom.comment." + xmiGuid)»«ENDREM»
	/**
	 * accessor for association to «name»
	«IF hasComment()-»
	 * <br>@see {@link #«asGetter(name)»}
	«ENDIF-»
	 */
	public void removeFrom«name.toFirstUpper()»(«type.name» _ex) {
	«IF plainAssociation()»
		«IF multiplicity == 1»
			if («asVariableName(name)» != _ex) {
				return;
			}
			«asVariableName(name)» = null;
		«ELSE»
			if (!«asVariableName(name)».contains(_ex)) {
				return;
			}
			«asVariableName(name)».remove(_ex);
		«ENDIF»
	«ELSE»
			if (!«asVariableName(name)».keySet().contains(_ex)) {
				return;
			}
			«asVariableName(name)».remove(_ex);
	«ENDIF»
		«IF opposite != null»
			_ex.removeFrom«opposite.name.toFirstUpper()»(this);
		«ENDIF»
	}
«ENDDEFINE»


// //////////////////////////////////////////////////////////////////////////////
// private functions
// //////////////////////////////////////////////////////////////////////////////


