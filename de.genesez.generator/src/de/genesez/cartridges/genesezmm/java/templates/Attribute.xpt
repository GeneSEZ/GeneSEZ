«REM» import code gen meta model «ENDREM»
«IMPORT genesezMM»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::DataType»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::Helper»
«EXTENSION de::genesez::cartridges::genesezmm::java::extensions::Naming»


// //////////////////////////////////////////////////////////////////////////////
// public functions
// //////////////////////////////////////////////////////////////////////////////


// generate attributes for a classifier
«DEFINE AttributeDecl FOR MClassifier»
«EXPAND AttributeDecl FOREACH property.typeSelect(MAttribute).select(e|e.static && !e.derived)-»
«EXPAND AttributeDecl FOREACH property.typeSelect(MAttribute).select(e|!e.static && !e.derived)-»
«ENDDEFINE»

«DEFINE AttributeDerivedImpl FOR MClassifier»
«EXPAND AttributeDerivedImpl FOREACH property.typeSelect(MAttribute).select(e|e.static && e.derived)-»
«EXPAND AttributeDerivedImpl FOREACH property.typeSelect(MAttribute).select(e|!e.static && e.derived)-»
«ENDDEFINE»


// generate getter and setter methodes for all attributes of a classifier
«DEFINE GetterSetterImpl FOR MClass»
«EXPAND GetterImpl FOREACH property.typeSelect(MAttribute).select(e|e.final && !e.derived)-»
«FOREACH property.typeSelect(MAttribute).select(e|!e.final && !e.derived) AS a»
	«EXPAND GetterImpl FOR a»
	«EXPAND SetterImpl FOR a»
	«EXPAND IteratorImpl FOR a»
	«EXPAND InsertInImpl FOR a»
	«EXPAND RemoveFromImpl FOR a»
«ENDFOREACH»
«ENDDEFINE»


// generate a declaration for an attribute
«DEFINE AttributeDecl FOR MAttribute»
«EXPAND ProtectedRegion::Comment("java.mattribute.declaration.attribute.comment." + xmiGuid)»
«IF multiplicity == 1»
	«EXPAND _Modifier» «type.name» «asAttributeName()» «EXPAND _DefaultValue»;
«ENDIF»
«IF multiplicity != 1»
	«EXPAND _Modifier» java.util.Set<«type.name»> «asAttributeName()» = new java.util.HashSet<«type.name»>();
«ENDIF»
«ENDDEFINE»


«DEFINE AttributeDerivedImpl FOR MAttribute»
«EXPAND ProtectedRegion::CommentGetter("java.mattribute.implementation.attribute.comment." + xmiGuid)»
«IF multiplicity == 1»
	«EXPAND _Modifier» «IF static»static«ENDIF» «type.name» «name.toFirstLower()»() {
		«getReturnTypeDeclaration(type.name)»
		/* «PROTECT CSTART "<!-- " CEND " -->" ID ("java.mattribute.implementation.attribute.code." + xmiGuid)» */
		/* <!-- TODO put your own implementation code here --> */
		
		/* «ENDPROTECT» */
		«getReturnTypeReturn(type.name)»
	}
«ENDIF»
«IF multiplicity != 1»
	«EXPAND _Modifier» «IF static»static«ENDIF» java.util.Set<«type.name»> «name.toFirstLower()»() {
		«getReturnTypeDeclaration(type.name)»
		/* «PROTECT CSTART "<!-- " CEND " -->" ID ("java.mattribute.implementation.attribute.code." + xmiGuid)» */
		/* <!-- TODO put your own implementation code here --> */
		
		/* «ENDPROTECT» */
		«getReturnTypeReturn(type.name)»
	}
«ENDIF»
«ENDDEFINE»


// generate a getter implementation method for a mattribute
«DEFINE GetterImpl FOR MAttribute»
«EXPAND ProtectedRegion::CommentGetter("java.mattribute.implementation.getter.comment." + xmiGuid)»
«IF multiplicity == 1»
	public «IF static»static«ENDIF» «type.name» «asGetter(name)»() {
		return «asAttributeName()»;
	}
«ENDIF»
«IF multiplicity != 1»
	public «IF static»static«ENDIF» java.util.Set<«type.name»> «asGetter(name)»() {
		return java.util.Collections.unmodifiableSet(«asAttributeName()»);
	}
«ENDIF»
«ENDDEFINE»


// generate a setter implementation method for a mattribute
«DEFINE SetterImpl FOR MAttribute»
«EXPAND ProtectedRegion::CommentSetter("java.mattribute.implementation.setter.comment." + xmiGuid)»
«IF multiplicity == 1»
	public «IF static»static«ENDIF» void «asSetter(name)»(«type.name» «asAttributeName()») {
		this.«asAttributeName()» = «asAttributeName()»;
	}
«ENDIF»
«IF multiplicity != 1»
	public «IF static»static«ENDIF» void «asSetter(name)»(java.util.HashSet<«type.name»> «asAttributeName()») {
		this.«asAttributeName()» = «asAttributeName()»;
	}
«ENDIF»
«ENDDEFINE»


// generate a iterator implementation method for a mattribute
«DEFINE IteratorImpl FOR MAttribute»
«IF multiplicity != 1»
	«EXPAND ProtectedRegion::CommentIterator("java.mattribute.implementation.iterator.comment." + xmiGuid)»
	public «IF static»static«ENDIF» java.util.Iterator<«type.name»> «asGetter(name)»Iterator() {
		return «asAttributeName()».iterator();
	}
«ENDIF»
«ENDDEFINE»


// generate a insert in implementation method
«DEFINE InsertInImpl FOR MAttribute»
«IF multiplicity != 1»
«EXPAND ProtectedRegion::CommentInsertIn("java.mattribute.implementation.insertin.comment." + xmiGuid)»
public «IF static»static«ENDIF» void insertIn«name.toFirstUpper()»(«type.name» _in) {
	if («asAttributeName()».contains(_in)) {
		return;
	}
	«asAttributeName()».add(_in);
}
«ENDIF»
«ENDDEFINE»

«REM»
// generate a insert in implementation method
«DEFINE InsertInImpl FOR MAttribute»
«EXPAND ProtectedRegion::CommentInsertIn("java.mattribute.implementation.insertin.comment." + xmiGuid)»
public «IF static»static«ENDIF» void insertIn«name.toFirstUpper()»(«type.name» _in) {
	«IF multiplicity == 1»
		if («asAttributeName(name)» == _in) {
			return;
		}
		«asAttributeName(name)» = _in;
	«ENDIF»
	«IF multiplicity != 1»
		if («asAttributeName(name)».contains(_in)) {
			return;
		}
		«asAttributeName(name)».add(_in);
	«ENDIF»
}
«ENDDEFINE»
«ENDREM»


// generate a remove from implementation method
«DEFINE RemoveFromImpl FOR MAttribute»
«IF multiplicity != 1»
«EXPAND ProtectedRegion::CommentRemoveFrom("java.mattribute.implementation.removefrom.comment." + xmiGuid)»
public void removeFrom«name.toFirstUpper()»(«type.name» _ex) {
	if (!«asAttributeName()».contains(_ex)) {
		return;
	}
	«asAttributeName()».remove(_ex);
}
«ENDIF»
«ENDDEFINE»

«REM»
// generate a remove from implementation method
«DEFINE RemoveFromImpl FOR MAttribute»
«EXPAND ProtectedRegion::CommentRemoveFrom("java.mattribute.implementation.removefrom.comment." + xmiGuid)»
public void removeFrom«name.toFirstUpper()»(«type.name» _ex) {
	«IF multiplicity == 1»
		if («asAttributeName(name)» != _ex) {
			return;
		}
		«asAttributeName(name)» = «getReturnType()»;
	«ENDIF»
	«IF multiplicity != 1»
		if (!«asAttributeName(name)».contains(_ex)) {
			return;
		}
		«asAttributeName(name)».remove(_ex);
	«ENDIF»
}
«ENDDEFINE»
«ENDREM»


// //////////////////////////////////////////////////////////////////////////////
// private functions
// //////////////////////////////////////////////////////////////////////////////


// generate modifiers for mattribute
«DEFINE _Modifier FOR MAttribute»
«visibility» «IF static»static«ENDIF» «IF final»final«ENDIF»
«ENDDEFINE»


// generate defaultvalue for mattribute
«DEFINE _DefaultValue FOR MAttribute»
«IF defaultvalue.length > 0»= «defaultvalue»«ENDIF»
«ENDDEFINE»