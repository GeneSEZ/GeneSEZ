<?xml version="1.0" encoding="UTF-8"?>
<!--
	Uses a freshly build genesez, bundles it with an eclipse and 
	executes the workflows of the example projects.
	
	(It starts an headless eclipse for each project and executes all workflows found within it.)
	
	Build is as follows:
	- bundle eclipse with genesez
	- first it fetchs all example generator projects
	(- it then starts an headless eclipse)
	- it obtains the eclipse classpath definitions of the example generator project and adds it to ant
	- it starts each transformation of the example generator project
	
	@author	tobias haubold
-->
<project name="org.genesez.test.integration" basedir=".." default="transform.examples">
	
	<!-- path to the ant contrib libraries -->
	<path id="antcontrib.classpath">
		<pathelement location="${basedir}/lib/ant-contrib-0.6.jar" />
	</path>
	
	<!-- load the ant contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="antcontrib.classpath" />
	
	
	<!-- directory settings -->
	<property name="working.dir" value="${basedir}/temp" />
	<property name="eclipse.dir" value="${working.dir}/eclipse" />
	<property name="dist.dir" location="${working.dir}/dist" />
	<property name="html.dir" location="${dist.dir}/html" />
	
	<dirname property="ant.file.dir" file="${ant.file}" />
	<property name="resource.dir" location="${ant.file.dir}/resources" />
	<property name="template.dir" location="${ant.file.dir}/templates" />
	<property name="page.template.location" location="${ant.file.dir}/page_template" />
	
	
	<!-- reporting -->
	<property name="success.template" location="${template.dir}/success.html" />
	<property name="failure.template" location="${template.dir}/failure.html" />
	<property name="output.template" location="${template.dir}/output.html" />
	<property name="workflow.template" location="${template.dir}/workflow.html" />
	<property name="project.template" location="${template.dir}/project.html" />
	
	<property name="workflow.list.file" location="${working.dir}/workflow.list" />
	<property name="project.list.file" location="${working.dir}/project.list" />
	<property name="report.file" location="${html.dir}/results.html" />
	
	
	<!-- classpath -->
	<condition property="config.properties" value="${ant.file.dir}/config.properties" else="${ant.file.dir}/config.ci.properties">
		<available file="${ant.file.dir}/config.properties" />
	</condition>
	<property file="${config.properties}" />
	<import file="classpath.xml" />
	
	<path id="logging.config">
		<pathelement location="${resource.dir}" />
	</path>
	
	
	<!-- tasks to prepare the working directory -->
	
	<target name="all" depends="prepare, transform.examples" />
	<target name="prepare" depends="prepare.directories, prepare.eclipse, prepare.genesez.dependencies, prepare.genesez" />
	
	<target name="prepare.directories" description="Creates needed directory structures + copies report page template">
		<delete dir="${dist.dir}" />
		<delete dir="${eclipse.dir}" />
		<mkdir dir="${working.dir}" />
		<mkdir dir="${dist.dir}" />
		<copy todir="${dist.dir}">
			<fileset dir="${page.template.location}" includes="**/*" />
		</copy>
	</target>
	
	<target name="prepare.eclipse" description="Prepares an eclipse within the working directory">
		<echo message="Eclipse: ${eclipse.location}" />
		<!--unzip src="${eclipse.location}" dest="${working.dir}" /-->
		<untar src="${eclipse.location}" compression="gzip" dest="${working.dir}" />
	</target>
	
	<target name="prepare.genesez.dependencies" description="Adds genesez dependencies to the eclipse within the working directory">
		<echo message="GeneSEZ dependencies: ${genesez.dependencies.location}" />
		<copy todir="${eclipse.dir}/dropins">
			<fileset dir="${genesez.dependencies.location}" includes="**/*" />
		</copy>
		<!--unzip src="d:/libraries/eclipse/genesez-2.x.dependencies_emf+uml+xpand+mwe+mwe2_e3.7.1-based.zip" dest="temp/eclipse/dropins" />-->
	</target>
	
	<target name="prepare.genesez" description="Adds the latest genesez version to the eclipse within the working directory">
		<fileset id="latest" dir="${genesez.location}" includes="genesez-*.zip">
			<and>
				<scriptselector language="javascript">
					<![CDATA[
					var regex = /\w+-\d+\.\d+\.\d+\.b(\d+)\.zip/;
					regex.exec(filename);
					var version = RegExp.$1;
					var files = basedir.list();
					var mostRecent = true;
					for(i = 0; i < files.length; i++) {
						regex.exec(files[i]);
						//println(version + " - " + RegExp.$1 + ": " + (version >= RegExp.$1));
						//println(filename + " - " + files[i] + ": " + (filename >= files[i]));
						mostRecent = mostRecent && (parseInt(version) >= parseInt(RegExp.$1));
					}
					self.setSelected(mostRecent);
					]]>
				</scriptselector>
			</and>
		</fileset>
		<pathconvert property="latest" refid="latest" />
		<echo message="GeneSEZ: ${latest}" />
		
		<unzip src="${latest}" dest="${eclipse.dir}/dropins/genesez" />
	</target>
	
	
	
	<!-- reporting tasks to generate the page content -->
	
	<target name="report.complete" description="Adds the main content file to the page">
		<copy file="${project.list.file}" tofile="${report.file}" />
		<delete file="${project.list.file}" />
	</target>
	
	<target name="report.project" description="Adds a project with it's transformations to the project list">
		<loadfile property="entries" srcfile="${workflow.list.file}" />
		<loadfile property="report" srcfile="${project.template}">
			<filterchain>
				<replacetokens>
					<token key="NAME" value="${name}" />
					<token key="WORKFLOWS" value="${entries}" />
				</replacetokens>
			</filterchain>
		</loadfile>
		<echo message="${report}" file="${project.list.file}" append="true" />
		<delete file="${workflow.list.file}" />
	</target>
	
	<target name="report.workflow" description="Adds a transformation to the projects transformation list and adds output of the transformation as an html file to the page">
		<tstamp>
			<format property="id" pattern="yyyyMMddHHmmssSSS" />
		</tstamp>
		<!-- replace < and > by their entity representations -->
		<propertyregex property="output" override="true" input="${output}" regexp="&lt;" replace="&amp;lt;" />
		<propertyregex property="output" override="true" input="${output}" regexp="&gt;" replace="&amp;gt;" />
		
		<!-- write output to file using html template -->
		<loadfile property="transform.output" srcfile="${output.template}">
			<filterchain>
				<replacetokens>
					<token key="OUTPUT" value="${output}" />
				</replacetokens>
			</filterchain>
		</loadfile>
		<echo message="${transform.output}" file="${html.dir}/${id}.html" append="false" />
		
		<!-- write transform stats to file using workflow template -->
		<condition property="result.template" value="${success.template}" else="${failure.template}">
			<and>
				<equals arg1="0" arg2="${returncode}" />
			</and>
		</condition>
		<loadfile property="result" srcfile="${result.template}" />
		<loadfile property="report" srcfile="${workflow.template}">
			<filterchain>
				<replacetokens>
					<token key="ID" value="${id}" />
					<token key="RESULT" value="${result}" />
					<token key="FILE" value="${workflow.file}" />
				</replacetokens>
			</filterchain>
		</loadfile>
		<echo message="${report}" file="${workflow.list.file}" append="true" />
	</target>
	
	
	<!-- go through all generator projects -->
	<!-- keepgoing="true" -->
	<target name="transform.examples" description="Iterates over all example projects and initiates execution of all contained transformations">
		<for param="project.dir">
			<path>
				<dirset dir="${workspace.dir}">
					<include name="*.generator" />
				</dirset>
			</path>
			<sequential>
				<echo message="Project: @{project.dir}" />
				<antcall target="eclipse.project.classpath">
					<param name="project.dir" value="@{project.dir}" />
				</antcall>
				<!--antcall target="execute.eclipse.ant.task">
					<param name="ant.build.file" value="${ant.file}" />
					<param name="ant.build.target" value="eclipse.project.classpath" />
					<param name="project.dir" value="@{project.dir}" />
				</antcall-->
			</sequential>
		</for>
		
		<antcall target="report.complete" />
	</target>
	
	
	<target name="execute.project.workflows" description="Executes all transformations of an example project">
		<path id="classpath">
			<path refid="logging.config" />
			<path path="${project.classpath}" />
			<path refid="genesez.bundle.classpath" />
		</path>
		<!--dirname property="ant.file.dir" file="${ant.file}" /-->
		<pathconvert property="classpath" refid="classpath" />
		<echo message="Project classpath: ${classpath}"></echo>
		<for param="mwe.file">
			<path>
				<fileset dir="${project.dir}">
					<include name="**/*.mwe" />
				</fileset>
			</path>
			<sequential>
				<echo message="Executing: @{mwe.file}" />
				<antcall target="execute.mwe.workflow">
					<param name="project.dir" value="${project.dir}" />
					<param name="workflow.file" value="@{mwe.file}" />
					<param name="classpath" value="${classpath}" />
				</antcall>
			</sequential>
		</for>
		<for param="mwe2.file">
			<path>
				<fileset dir="${project.dir}">
					<include name="**/*.mwe2" />
				</fileset>
			</path>
			<sequential>
				<echo message="Executing: @{mwe2.file}" />
				<antcall target="execute.mwe2.workflow">
					<param name="project.dir" value="${project.dir}" />
					<param name="workflow.file" value="@{mwe2.file}" />
					<param name="classpath" value="${classpath}" />
				</antcall>
			</sequential>
		</for>
		
		<basename property="project.name" file="${project.dir}" />
		<antcall target="report.project">
			<param name="name" value="${project.name}" />
		</antcall>
	</target>
	
	
	<target name="execute.mwe.workflow" description="Executes an mwe workflow file">
		<fail message="Workflow file not available: ${workflow.file}">
			<condition>
				<not>
					<available file="${workflow.file}" />
				</not>
			</condition>
		</fail>
		<property name="workflow.relative" value="${workflow.file}" basedir="${project.dir}" relative="true" />
		<echo message="Running: ${workflow.relative}" />
		<java classname="org.eclipse.emf.mwe.core.WorkflowRunner"
				classpath="${classpath}"
				fork = "true"
				failonerror="false"
				resultproperty="returncode"
				outputproperty="output"
				dir="${project.dir}">
			<arg value="${workflow.relative}" />
			<arg value="-pbaseDir=${project.dir}" />
			<arg value="--ant" />
		</java>
		<echo message="Done: ${workflow.relative}" />
		<echo message="Return Code: ${returncode}" />
		
		<antcall target="report.workflow">
			<param name="workflow.file" value="${workflow.relative}" />
			<param name="returncode" value="${returncode}" />
			<param name="output" value="${output}" />
			<param name="project.dir" value="${project.dir}" />
		</antcall>
	</target>
	
	<target name="execute.mwe2.workflow" description="Executes an mwe2 workflow file">
		<fail message="Workflow file not available: ${workflow.file}">
			<condition>
				<not>
					<available file="${workflow.file}" />
				</not>
			</condition>
		</fail>
		
		<!-- the stupid mwe2 execution engines doesn't find the file if the path seperator is a backslash, so converting it to a slash... -->
		<property name="workflow.relative" value="${workflow.file}" basedir="${project.dir}" relative="true" />
		<propertyregex property="workflow.executable" input="${workflow.relative}" regexp="\\" replace="/" global="true" />
		
		<echo message="Running: ${workflow.relative}" />
		<java classname = "org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher"
				classpath="${classpath}"
				fork="true"
				failonerror="false"
				resultproperty="returncode"
				outputproperty="output"
				dir="${project.dir}">
			<arg value="${workflow.executable}" />
			<!--arg value="config/transformation.mwe2" /-->
			<arg value="-pbaseDir=${project.dir}" />
		</java>
		<echo message="Done: ${workflow.relative}" />
		<echo message="Return Code: ${returncode}" />
		
		<antcall target="report.workflow">
			<param name="workflow.file" value="${workflow.relative}" />
			<param name="returncode" value="${returncode}" />
			<param name="output" value="${output}" />
			<param name="project.dir" value="${project.dir}" />
		</antcall>
	</target>
	
	
	
	<!-- tasks to obtain the classpath entries of an eclipse project (from the .classpath file) an use them within ant -->
	
	<!-- calls the other target executing antclipse task to obtain an ant classpath of the .classpath file in the specified dir of this ant task -->
	<target name="eclipse.project.classpath" description="Obtains the classpath entries of the eclipse project">
		<fail message="Project dir missing: ${project.dir}">
			<condition>
				<not>
					<available file="${project.dir}" />
				</not>
			</condition>
		</fail>
		<echo message="Obtain eclipse classpath of: ${project.dir}" />
		<ant antfile="${ant.file}" dir="${project.dir}">
			<target name="eclipse.project.classpath.internal" />
			<target name="execute.project.workflows" />
		</ant>
	</target>
	
	<target name="eclipse.project.classpath.internal">
		<antclipse produce="classpath" idcontainer="project.classpath" verbose="true" includesource="true" includelibs="true" includeoutput="true" />
		<pathconvert property="project.classpath" refid="project.classpath">
			<map from="${user.dir}" to="${basedir}" />
		</pathconvert>
		<echo message="Eclipse project classpath: ${project.classpath}"></echo>
	</target>
	
	
	
	<!-- tasks to execute an ant build using the ant runner application of an headless eclipse -->
	
	<target name="execute.eclipse.ant.task" description="Executes an ant task using the eclipse ant runner application"
			depends="execute.eclipse.ant.task.internal, execute.eclipse.ant.task.external">
		<echo message="Executing ant target: ${ant.build.target}" />
	</target>
	
	<target name="execute.eclipse.ant.task.internal" if="eclipse.running">
		<echo>Eclipse is running...</echo>
		<antcall target="${ant.build.target}" inheritall="true" inheritrefs="true" />
	</target>
	
	<target name="execute.eclipse.ant.task.external" unless="eclipse.running">
		<echo>Eclipse is not running...</echo>
		<exec executable="${eclipse.dir}/eclipsec.exe" dir="${eclipse.dir}" failonerror="true" osfamily="windows">
			<arg value="-noSplash" />
			<!--arg value="-configuration" />
			<arg value="${configuration.location}" / -->
			<arg value="-data" />
			<arg value="${workspace.dir}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-v" />
			<arg value="-buildfile" />
			<arg value="${ant.build.file}" />
			<arg value="${ant.build.target}" />
			<arg value="-Dproject.dir=${project.dir}" />
			<!--arg value="-Dbuild.basedir=${build.basedir}" />
			<arg value="-Dbuild.controlled=${build.controlled}" /-->
		</exec>
		<exec executable="${eclipse.dir}/eclipse" dir="${eclipse.dir}" failonerror="true" osfamily="unix">
			<arg value="-noSplash" />
			<!--arg value="-configuration" />
			<arg value="${configuration.location}" /-->
			<arg value="-data" />
			<arg value="${workspace.dir}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-v" />
			<arg value="-buildfile" />
			<arg value="${ant.build.file}" />
			<arg value="${ant.build.target}" />
			<arg value="-Dproject.dir=${project.dir}" />
			<!--arg value="-Dbuild.basedir=${build.basedir}" />
			<arg value="-Dbuild.controlled=${build.controlled}" /-->
		</exec>
	</target>
</project>
