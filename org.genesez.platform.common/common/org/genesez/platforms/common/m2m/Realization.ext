/**
 * Adds the method definition of implemented interfaces to non abstract classes
 * 
 * - if class has generalizations, only the direct realizations are added
 * - if class has no generalizations, the realizations are added recursivly, i.e. the
 *   interfaces and recursively all generalizations of the interfaces
 * 
 * No further searches in the inheritance hierarchy is done
 * 
 * @author	toh
 * @date	2009-05-27
 */

// based on genesez meta model
import gcore;

extension org::genesez::platforms::common::log::Log;
extension org::genesez::platforms::common::AccessHelper;
extension org::genesez::platforms::common::m2m::CreateTemplate;

/**
 * performs the model transformation to add operations of interfaces to classes
 */
MPackage realize(MPackage this) :
	useLogger("org.genesez.platforms.common.m2m.Realization") ->
	nestedPackage.realize() ->
	classifier.check() ->
	this;

/**
 * processes the realization of operations of a classifier
 */
MClassifier check(MClassifier this) :
	metaType == MClass && !abstract
		? ( generalization.isEmpty
			? realization.typeSelect(MInterface).recursiveRealize( (MClass)this )
			: realization.typeSelect(MInterface).realize( ((MClass)this) )
		) : this ->
	this;

/**
 * adds the operations of the interface to the list of operations of the class
 */
MClass realize(MInterface realize, MClass this) :
	realize.operation.cloneOperation( this ) ->
	this;

/**
 * adds the operations of the interface to the list of operations of the class
 * and additionally performs a recursive call with all generalizations of the interface
 */
MClass recursiveRealize(MInterface realize, MClass this) :
	realize.realize( this ) ->
	realize.generalization.typeSelect(MInterface).recursiveRealize( this ) ->
	this;
