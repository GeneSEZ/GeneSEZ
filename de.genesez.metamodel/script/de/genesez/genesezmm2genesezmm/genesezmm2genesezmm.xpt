«REM»
	generates a genesez-model 2 genesez-model transformation extend file
	
	- for each genesez meta model element a clone function is generated
«ENDREM»

«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«REM» works on uml2 models «ENDREM»
«IMPORT uml»

«REM» helper for collecting properties «ENDREM»
«EXTENSION de::genesez::genesezmm2genesezmm::util»

«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«REM»
	handles the root model element
	creates the extension file and imports the namespace from the genesez meta model
«ENDREM»
«DEFINE Root FOR Model»
	«FILE "genesezmm2genesezmm.ext"»
	import «name»;
	«EXPAND cloneElement FOREACH getClonableClasses()»
	«REM»«EXPAND cloneElement FOREACH ownedElement.typeSelect(Enumeration)»«ENDREM»
	«ENDFILE»
«ENDDEFINE»

«REM»
	genesez meta model elements are modeled as classes
	generate for each class a clone statement, which clones the
	attributes and the association ends according containment
«ENDREM»
«DEFINE cloneElement FOR Class»
«name» clone«name»(«name» orig) :
	let clone = make«name»() :
		«EXPAND cloneAttributes FOREACH getAttributes() SEPARATOR "->"»
		«IF !getAssociationEnds().isEmpty»->«ENDIF»
		«EXPAND cloneAssociations FOREACH getAssociationEnds() SEPARATOR "->"»
	-> clone;
private create «name» make«name»() :
	this;
«ENDDEFINE»

«REM»
«DEFINE cloneElement FOR Enumeration»
create «name» clone(«name» orig) :
	
	;
«ENDDEFINE»
«ENDREM»

«REM»
	simply clone attribute values
«ENDREM»
«DEFINE cloneAttributes FOR Property»
	clone.set«name.toFirstUpper()»(orig.«name»)
«ENDDEFINE»

«REM»
	clone associations based on their multiplicity
	
	.set«opposite.name.toFirstUpper()»(this))
«ENDREM»
«DEFINE cloneAssociations FOR Property»
	«IF upper == 1»
	clone.set«name.toFirstUpper()»(orig.«name».clone«type.name»())
	«ELSE»
	clone.«name».addAll(orig.«name».clone«type.name»())
	«ENDIF»
«ENDDEFINE»

