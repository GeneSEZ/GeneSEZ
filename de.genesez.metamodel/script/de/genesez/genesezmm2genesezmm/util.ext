/*
	helper for generating a genesez-model to genesez-model transformation extend file
	
	uml2 properties are both, attributes and association ends
	distinction: attributes have a primitive type, associations haven't a primitive type
 */

//	works on uml2 models
import uml;

List[Class] getClonableClasses(Model m) :
	m.ownedElement.typeSelect(Class)
	//	.reject(e|e.name == "MPointcut")
	//	.reject(e|e.name == "MAspect")
	//	.reject(e|e.name == "MIntroduction")
	;

//	returns a list with attributes to clone for the given class
cached List[Property] getAttributes(Class c) :
	let l = {} :
		addAttributes(c, l) ->
	l;
	
//	adds attributes to clone from the given class and all their super classes 
//	to the given list and returns them
private List[Property] addAttributes(Class c, List l) :
	l.addAll(c.ownedAttribute.select(e|PrimitiveType.isInstance(e.type))) ->
	c.superClass.addAttributes(l) ->
	l;
	
//	returns a list with association ends to clone for the given class
cached List[Property] getAssociationEnds(Class c) :
	let l = {} :
		addAssociationEnds(c, l) ->
	l;
	
//	adds association ends to clone from the given class and all their super classes
//	to the given list and returns them
private List[Property] addAssociationEnds(Class c, List l) :
	l.addAll(c.ownedAttribute
		.select(e|!PrimitiveType.isInstance(e.type))
		.reject(e|e.opposite.isComposite)) ->
	//l.addAll(c.ownedAttribute.select(e|e.isComposite)) ->
	c.superClass.addAssociationEnds(l) ->
	l;
