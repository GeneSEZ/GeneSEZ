<?xml version="1.0" encoding="windows-1252"?>
<!-- this file runs the uml2ecore Workflow from the oaw Model-to-Model -->

<workflow>

	<!-- load properties file -->
	<property file="genesezMM.properties" />

	<!-- first we have to initialize the support for UML2 models -->
    <bean class="oaw.uml2.Setup" standardUML2Setup="true"/> 
    
    <!-- here we read the UML2 model file. We put it into 
         the uml2model workflow slot (a kind of workflow-wide
         hash map, uml2model is the key of the entry, the 
         model object read by the reader will be the value  -->
	<component id="xmiParser" class="org.openarchitectureware.emf.XmiReader">
		<modelFile value="${uml2MetaModelFile}"/>
		<outputSlot value="uml2metamodel"/>
	</component>
	
	<!-- this component checks a number of constraints in the parsed 
         UML2 model -->
	<component id="constrChecker-uml2" class="org.openarchitectureware.check.CheckComponent">
		<!-- Working on UML2 models also requires the EcorePackage to 
		     be configured as a meta model, so we do this here -->
	    <metaModel id="metamodel.emf" class="oaw.type.emf.EmfMetaModel">
			<metaModelPackage value="org.eclipse.emf.ecore.EcorePackage"/>
		</metaModel>
		<!-- and workin with UML2 also requires the UML2 meta model -->
		<metaModel id="metamodel.uml2" class="oaw.uml2.UML2MetaModel"/>
		<!-- this is the file that contains the constraints; note the use of
		     :: as the namespace delimiter; we also don't specify the .chk
		     extension of the uml2Constraints file. The namespaces correspond
		     to Java packages; so you know where to look in the source folder -->
		<checkFile value="org::openarchitectureware::uml2ecore::uml2Constraints"/>
		<!-- we check the complete set of model elements under the uml2model 
		     slot in the workflow; this will be the Model object and all its
		     children, recusively -->
		<emfAllChildrenSlot value="uml2metamodel"/>
		<!-- finally, if we encounter errors here (i.e. failed constraints)
		     we stop the workflow here. We won't invoke the transformation if
		     the input model is faulty -->
		<abortOnError value="true"/>
	</component>
	
	<!-- this one runs the transformation from UML2 to Ecore. -->
	<component class="oaw.xtend.XtendComponent">
		<!-- again, we need the two meta models introduced above; we refernece
		     them using XML's idRef mechanism -->
	   <metaModel idRef="metamodel.emf"/>
	   <metaModel idRef="metamodel.uml2"/>
	   <!-- this statement makes the value "${nsUriPrefix"} passed in
	        by the external workflow file available as a global variable
	        that is accessed by the nsUri() function in uml2ecore.ext -->
	   <globalVarDef name="nsUriPrefix" value="'${nsUriPrefix}'"/>
	   <!-- and we also make the addNameAttribute property globally available. -->
	   <globalVarDef name="addNameAttribute" value="${addNameAttribute}"/>
	   <!-- finally, we run the transformation itself. there's an 
	        extension file called uml2ecore.ext in the respective location
	        in the classpath that contains a function called transform that
	        takes an object of type UML2::Model as its parameter. Note that 
	        we can use the slot name uml2model as a variable in this expression -->
	   <invoke value="org::openarchitectureware::uml2ecore::uml2ecore::transform(uml2metamodel)"/>
	   <!-- finally, we specify that we want to put the return value of the 
	        function invoked above into the ecoreModel slot in the workflow -->
	   <outputSlot value="ecoreModel"/>
	</component>
	
	<!-- last but not least, we write the Ecore file. We specify the workflow
	     slot where we expect the model as well as the file name of the 
	     to-be-written file -->	
	<component id="xmiWriter" class="org.openarchitectureware.emf.XmiWriter">
		<inputSlot value="ecoreModel"/>
		<modelFile value="${generateTarget}/${ecoreMetaModelFile}"/>
	</component>
	
	<component id="generator" class="oaw.xpand2.Generator" skipOnErrors="true">
		<metaModel idRef="metamodel.emf"/>
	   	<globalVarDef name="addNameAttribute" value="${addNameAttribute}"/>
		<expand value="org::openarchitectureware::uml2ecore::templates::files::root FOR ecoreModel"/>
		<genPath value="${generateTarget}"/>
	</component>
    
</workflow>