«REM»
	Attribute template for C#
	
	@autor	Gerrit Beine
	@date	2008/01/18
«ENDREM»

«REM» import code gen meta model «ENDREM»
«IMPORT genesezMM»

«REM» useful metamodel extensions «ENDREM»
«EXTENSION de::genesez::common::AccessHelper»
«EXTENSION de::genesez::typemapping::TypeMapping»
«EXTENSION de::genesez::platforms::dotnet::csharp::scripts::Conversion»
«EXTENSION de::genesez::platforms::dotnet::csharp::scripts::Naming»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	public functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»


«REM»
	generate field declaration
«ENDREM»
«DEFINE FieldDecl FOR MAttribute-»
«IF multiplicity == 1-»
		«EXPAND Field( type.name(),
		                asFieldName() )-»
«ELSE-»
		«EXPAND Field( typeMap( "Set" ) + "<" + asClassifierName(type.name()) + ">",
		                asFieldName() )-»
«ENDIF-»
«ENDDEFINE»


«REM»
	generate property declaration
«ENDREM»
«DEFINE PropertyDecl FOR MAttribute-»
«IF multiplicity == 1-»
	«EXPAND _PropertyDecl( type.name(), asPropertyName() )-»
«ELSE-»
	«EXPAND _PropertyDecl( typeMap( "Set" ) + "<" + asClassifierName(type.name())+ ">",
	                   asPropertyName() )-»
«ENDIF-»
«ENDDEFINE»


«REM»
	generate property implementation
«ENDREM»
«DEFINE PropertyImpl FOR MAttribute-»
«IF multiplicity == 1-»
	«EXPAND _PropertyImpl( type.name(), asPropertyName() )-»
«ELSE-»
	«EXPAND _PropertyImpl( typeMap( "Set" ) + "<" + asClassifierName(type.name())+ ">",
	                   asPropertyName() )-»
«ENDIF-»
«ENDDEFINE»


«REM»
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	private functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
«ENDREM»


«REM»
	generate public field declaration for an association
«ENDREM»
«DEFINE Field(String type, String name) FOR MAttribute-»
			«EXPAND _Comment-»
			«EXPAND _Modifier» «type» «name»;
«REM»		«EXPAND _Modifier» «typeMap(type.name())» «asFieldName()»«EXPAND _DefaultValue-»;«ENDREM»
«REM»		«EXPAND _Modifier» «typeMap("Set")»<«type.name()»> «asFieldName()» = new «typeMap("Set", "Implementation")»<«type.name()»>();«ENDREM»
«ENDDEFINE»


«REM»
	generate property declaration
«ENDREM»
«DEFINE _PropertyDecl(String type, String name) FOR MAttribute-»
		«EXPAND _Comment-»
		public «type» «name»
		{
			get;
		}
		
«ENDDEFINE»


«REM»
	generate property implemenation
«ENDREM»
«DEFINE _PropertyImpl(String type, String name) FOR MAttribute-»
		«EXPAND _Comment-»
		public «type» «name»
		{
			get { return this.«asFieldName()»; }
		}
		
«ENDDEFINE»


«REM»
	generate a modifier for an attribute
«ENDREM»
«DEFINE _Modifier FOR MAttribute-»
		«visibility-»«IF static» static«ENDIF-»«IF final» readonly«ENDIF-»
«ENDDEFINE»


«REM»
	generate default value for an attribute
«ENDREM»
«DEFINE _DefaultValue FOR MAttribute-»
«IF defaultvalue.length > 0-»
 = «defaultvalue»
«ENDIF-»
«ENDDEFINE»


«REM»
	generate attribute comment
«ENDREM»
«DEFINE _Comment FOR MAttribute-»
«IF hasComment()-»
		/// «getCommentText(ownedComment)»
«ENDIF-»
«ENDDEFINE»

