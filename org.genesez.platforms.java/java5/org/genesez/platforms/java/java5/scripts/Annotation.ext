import gcore;

extension org::genesez::platforms::common::AccessHelper;
extension org::genesez::platforms::common::m2m::CreateTemplate;
extension org::genesez::platforms::common::m2m::CreateBasics;
extension org::genesez::platforms::java::scripts::Naming;
extension org::genesez::platforms::java::java5::scripts::Stereotypes;
extension org::genesez::platforms::java::java5::scripts::Helper;
extension org::genesez::platforms::java::ejb3::scripts::Class;
extension org::genesez::platforms::common::log::Log;

/**
 * Adds the stereotype for the @Target annotation
 * checks all association roles for each possible meta classe and combines the results with existing tagged values
 * results into a new stereotype
 *
 * @param this the MInterface which later represents an annotation (@interface)
 *
 */
Void addTargetStereotype(MInterface this) :
    /* only if ether an association role or a java5Target stereotype is present, there's something to do*/
    (this.hasAssociationRoles() || this.hasStereotype(java5AnnotationStereotype()))
        ? (     
             let annotationType = ( checkTaggedValues("ANNOTATION_TYPE") || checkAssociationRole(this, "Stereotype")|| checkAssociationRole(this, "Element")):
             let type           = ( checkTaggedValues("TYPE")            || checkAssociationRole(this, "Type")      || checkAssociationRole(this, "Element") || checkAssociationRole(this, "Class") || checkAssociationRole(this, "Interface") || checkAssociationRole(this, "Enumeration")) :
             let constr         = ( checkTaggedValues("CONSTRUCTOR")                                                || checkAssociationRole(this, "Element")) :
             let method         = ( checkTaggedValues("METHOD")          || checkAssociationRole(this, "Operation") || checkAssociationRole(this, "Element")) :
             let field          = ( checkTaggedValues("FIELD")           || checkAssociationRole(this, "Property")  || checkAssociationRole(this, "Element")) :
             let localVar       = ( checkTaggedValues("LOCAL_VARIABLE")                                             || checkAssociationRole(this, "Element")) :
             let parameter      = ( checkTaggedValues("PARAMETER")       || checkAssociationRole(this, "Parameter") || checkAssociationRole(this, "Element")) :
             let package        = ( checkTaggedValues("PACKAGE")         || checkAssociationRole(this, "Package")   || checkAssociationRole(this, "Element")) :             
                makeTargetStereotype((MElement)this, annotationType, type, constr, method, field, localVar, parameter, package) 
        ) 
        : Void;
        
/**
 * Adds the stereotype for the @Retention annotation
 * Default value is RUNTIME
 *
 * @param this the MInterface which later represents an annotation (@interface)
 *
 */
Void addRetentionStereotype(MInterface this) :
    /* only if an java5Annotation stereotype is present, there's something to do*/
    this.hasStereotype(java5AnnotationStereotype())
	   ? (
	       this.hasTaggedValue(java5AnnotationStereotype(), "retention")
		      ? Void /*if tagged value is already present, do nothing */
		      : makeDefaultRetentionStereotype()  /* if not, create default value */
		 )
       : Void;

        
                
/**
 * checks if aa association role of a special name is associated with the given Interface
 *
 * @param this instance of MInterface
 * @param name name of the associationRole
 */        
boolean checkAssociationRole(MInterface this, String name) :
    !(this.owningInitializableAssociationRoles().select(e|e != null && e.name.matches("base_"+name)).isEmpty);

/**
 * checks if the tagged value of the java5Target stereotype contains a special value
 *
 * @param this instance of MInterface
 * @param name name of the tagged value that is to be checked
 */      
boolean checkTaggedValues(MInterface this, String name) :
    this.getTaggedValue(java5AnnotationStereotype(), "target").contains(name);          
     