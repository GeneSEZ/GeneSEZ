import gcore;

extension org::genesez::platforms::common::log::Log;
extension org::genesez::platforms::common::AccessHelper;
extension org::genesez::platforms::java::java5::scripts::Class;
extension org::genesez::platforms::java::java5::scripts::Stereotypes;
extension org::genesez::platforms::java::seam2::scripts::Stereotypes;
extension org::genesez::platforms::java::seam2::scripts::Operation;
extension org::genesez::platforms::common::m2m::CreateTemplate;
extension org::genesez::platforms::common::m2m::MakeElement;
extension org::genesez::platforms::common::m2m::CreateBasics;

/**
  * add standard constructor to seam components 
  *	if there is not already one
  */	
MClassifier addStandardConstructor(MClass this) :
	this.hasStereotype("seam2Component") &&
	!(operation.exists(e|e.name == name && e.parameter.isEmpty))
		? makeStandardConstructor()
		: "";

/**
  *	creates a logger attribute if there is no attribute with datatype "Log"
  */
Void addLoggerAttribute(MClass this) :
	!this.hasStereotype("jpaPersistentEntity") && this.hasTaggedValue("seam2Component", "logger", "true") && !this.existLoggerAttribute() 
		? makeAttribute("logger", "org.jboss.seam.log.Log", "private")
		: "";

/**
 *	
 */
Void checkAbstractClassesForComponentStereotype(MClass this) :
	this.abstract && this.hasStereotype("seam2Component")
		? this.stereotype.remove(this.stereotype.selectFirst(e|e.name == "seam2Component"))
		: "";

/**
  *
  */
Void addFactoryMethod(MClassifier this, String autoCreate, String scope, String value) :
	makeOperation("initiate"+value.toFirstUpper(), "public") ->
	this.realization.typeSelect(MClassifier).makeOperation("initiate"+value.toFirstUpper(), "public") ->
	this.operation.selectFirst(e|e.name == "initiate"+value.toFirstUpper()).addFactoryStereotype(autoCreate, scope, value);

/**
  *	checks if there is an attribute with the datatype "Log"
  */
Boolean existLoggerAttribute(MClass this) :
	this.property.exists(e|e.type.name().matches("org.jboss.seam.log.Log")) 
	|| this.property.exists(e|e.type.name().matches("Log") && e.name.matches("logger"))
		? true
		: false;

/**
  *	adds method named "init" with annotation "@Create" for
  * seam components with stateful session bean annotation 
  * if there is no such annotation or method 
  */
Void checkCreateMethod(MClass this) :
	this.hasTaggedValue("ejb3SessionBean", "stateful", "true") &&
	this.hasStereotype("seam2Component")
		? (
			!operation.exists(e|e.hasTaggedValue("seam2Lifecycle", "create", "true")) 
				? (
					(!operation.exists(e|e.name == "init" && e.parameter.size == 0)
						? (
							let o = makeOperation("init", "public") :
								o.addInternalStereotype("http://www.genesez.org/java/seam2/CreateOperation")
						)
						: ""
					) ->
					operation.selectFirst(e|e.name == "init" && e.parameter.size == 0).addLifecycleStereotype("true", "false") ->
					(!this.realization.typeSelect(MClassifier).selectFirst(e|e.hasStereotype("ejb3Local") || e.hasStereotype("ejb3Remote")).operation.exists(e|e.name == "init" && e.parameter.size == 0)
						? this.realization.typeSelect(MClassifier).selectFirst(e|e.hasStereotype("ejb3Local") || e.hasStereotype("ejb3Remote")).makeOperation("init", "public")
						: "")
				)
				: ""
		)
		: "";

/**
  *	adds method named "destroy" with annotation "@Destroy" and @Remove 
  * for seam components with stateful session bean annotation 
  * if there is no such annotation or method 
  */
Void checkDestroyMethod(MClass this) :
	hasStereotype("seam2Component") && hasTaggedValue("ejb3SessionBean", "stateful", "true")
		? (
			!operation.exists(e|e.hasTaggedValue("seam2Lifecycle", "destroy", "true")) 
				? (
					(!operation.exists(e|e.name == "destroy" && e.parameter.size == 0)
						? (
							let o = makeOperation("destroy", "public") :
								o.addInternalStereotype("http://www.genesez.org/java/seam2/DestroyOperation")
						)
						: ""
					) ->
					operation.selectFirst(e|e.name == "destroy" && e.parameter.size == 0).addLifecycleStereotype("false", "true") ->
					(!this.realization.typeSelect(MClassifier).selectFirst(e|e.hasStereotype("ejb3Local") || e.hasStereotype("ejb3Remote")).operation.exists(e|e.name == "destroy" && e.parameter.size == 0)
						? this.realization.typeSelect(MClassifier).selectFirst(e|e.hasStereotype("ejb3Local") || e.hasStereotype("ejb3Remote")).makeOperation("destroy", "public")
						: "")
				)
				: ""
		)
		: "";

/**
  *	adds an entity home class for a persistent entity which is also a Seam component
  *
  *	further work: add constraint that this can only be used if seam-managed persistence-context is used
  */
Void addEntityHome(MClass this) :
	this.hasStereotype("jpaPersistentEntity") && this.hasStereotype("seam2Component")
		? (
			!this.package().nestedPackage.exists(e|e.name == "entityHome") 
				? createPackage(this.package(), "entityHome", "entityHome")
				: "" ->
			createClass(this.package().nestedPackage.selectFirst(e|e.name == "entityHome"), this.name+"Home", this.name+"Home") ->
			(let c = this.package().nestedPackage.selectFirst(e|e.name == "entityHome").classifier.typeSelect(MClass).selectFirst(e|e.name == this.name+"Home") :
				c.addComponentStereotype(this.name.toFirstLower()+"Home", "false", "false") ->
				(let e = createExternal(this.model(), "EntityHome<"+this.name+">") :
					c.generalization.add(e) ->
					//e.createGeneric(this.name) ) ->					
				//add seam2Component stereotype
				"")
			)
		)
		: "";

/**
  *	adds an query home class for a persistent entity which is also a Seam component
  *
  *	further work: add constraint that this can only be used if seam-managed persistence-context is used
  */
Void addQueryHome(MClass this) :
	this.hasStereotype("jpaPersistentEntity") && this.hasStereotype("seam2Component")
		? (
			!this.package().nestedPackage.exists(e|e.name == "entityQuery") 
				? createPackage(this.package(), "entityQuery", "entityQuery")
				: "" ->
			createClass(this.package().nestedPackage.selectFirst(e|e.name == "entityQuery"), this.name+"Query", this.name+"Query") ->
			(let c = this.package().nestedPackage.selectFirst(e|e.name == "entityQuery").classifier.typeSelect(MClass).selectFirst(e|e.name == this.name+"Query") :
				c.addComponentStereotype(this.name.toFirstLower()+"Query", "false", "false") ->
				(let e = createExternal(this.model(), "EntityQuery<"+this.name+">") :
					c.generalization.add(e) ->
					//e.createGeneric(this.name) ) ->					
				//add seam2Component stereotype
				"")
			)
		)
		: "";