package de.genesez.app;/* PROTECTED REGION ID(java.mclassifier.other.import.code_14_0_8a7027a_1203495432297_311152_296) ENABLED START *//* TODO put your imports here */import java.lang.String;import com.avidwireless.avidirector.AVIDirectorMain;import de.genesez.j2meframework.sensors.SensorEvent;import de.genesez.app.sensors.PotSensorController;import de.genesez.app.sensors.PotSensor;import de.genesez.app.actuators.LightEmittingDiode;import de.genesez.j2meframework.sensors.ISensorListener;import de.genesez.app.actuators.Lamp;import com.avidwireless.avidirector.AvidUtil;import com.avidwireless.avidirector.Logger;import com.avidwireless.avidirector.iodevice.M2M_IODevice;/* PROTECTED REGION END *//** * @author nicher */public class CebitApplication extends com.avidwireless.avidirector.M2Mlet implements java.lang.Runnable, ISensorListener, com.avidwireless.avidirector.WatchDogMonitoredClass {		// ////////////////////////////////////////////////////////////////////////	// generated variable, constant and association declarations	// ////////////////////////////////////////////////////////////////////////		/** @see {@link getWATCHDOG_TIMEOUT} */	private static final int WATCHDOG_TIMEOUT = 120000;	private com.avidwireless.avidirector.WatchDogTimer watchDogTimer;	private boolean threadRunning = false;	private java.lang.Thread thread;	private float switchingLevel = 3000;	/**	 * variable for association to lamp	 */	private Lamp lamp;	/**	 * variable for association to greenLED	 */	private LightEmittingDiode greenLED;	/**	 * variable for association to redLED	 */	private LightEmittingDiode redLED;	/**	 * variable for association to pot	 */	private PotSensor pot;		// ////////////////////////////////////////////////////////////////////////	// generated constructor implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @return  	 */	public CebitApplication() {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_8a7027a_1203503259600_761414_1430) ENABLED START */		/* TODO put your own implementation code here */		/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated derived attribute method implementations	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated association method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * accessor for association to lamp	 */	public Lamp getLamp() {		return lamp;	}		/**	 * accessor for association to lamp	 */	public void insertInLamp(Lamp _in) {		if (lamp == _in) {			return;		}		lamp = _in;	}		/**	 * accessor for association to lamp	 */	public void removeFromLamp(Lamp _ex) {		if (lamp != _ex) {			return;		}		lamp = null;	}		/**	 * accessor for association to greenLED	 */	public LightEmittingDiode getGreenLED() {		return greenLED;	}		/**	 * accessor for association to greenLED	 */	public void insertInGreenLED(LightEmittingDiode _in) {		if (greenLED == _in) {			return;		}		greenLED = _in;	}		/**	 * accessor for association to greenLED	 */	public void removeFromGreenLED(LightEmittingDiode _ex) {		if (greenLED != _ex) {			return;		}		greenLED = null;	}		/**	 * accessor for association to redLED	 */	public LightEmittingDiode getRedLED() {		return redLED;	}		/**	 * accessor for association to redLED	 */	public void insertInRedLED(LightEmittingDiode _in) {		if (redLED == _in) {			return;		}		redLED = _in;	}		/**	 * accessor for association to redLED	 */	public void removeFromRedLED(LightEmittingDiode _ex) {		if (redLED != _ex) {			return;		}		redLED = null;	}		/**	 * accessor for association to pot	 */	public PotSensor getPot() {		return pot;	}		/**	 * accessor for association to pot	 */	public void insertInPot(PotSensor _in) {		if (pot == _in) {			return;		}		pot = _in;	}		/**	 * accessor for association to pot	 */	public void removeFromPot(PotSensor _ex) {		if (pot != _ex) {			return;		}		pot = null;	}		// ////////////////////////////////////////////////////////////////////////	// generated abstract method declaration	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated normal method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @param  e  	 */	public void receiveMeasureValue(SensorEvent e) {				/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_8a7027a_1203516660050_206025_1079) ENABLED START */		/* TODO put your own implementation code here */		float value = e.getMeasureValue();				// regulate the light bulb		lamp.regulate(value / 66);				// regulate the green and the red led		if (value <= switchingLevel) {			greenLED.regulate(1);			redLED.regulate(0);		} else {			greenLED.regulate(0);			redLED.regulate(1);		}				/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated getter and setter method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * The Watchdog timer timeout in milliseconds.	 */	public static int getWATCHDOG_TIMEOUT() {		return WATCHDOG_TIMEOUT;	}		public com.avidwireless.avidirector.WatchDogTimer getWatchDogTimer() {		return watchDogTimer;	}		public void setWatchDogTimer(com.avidwireless.avidirector.WatchDogTimer _watchDogTimer) {		watchDogTimer = _watchDogTimer;	}		public boolean getThreadRunning() {		return threadRunning;	}		public void setThreadRunning(boolean _threadRunning) {		threadRunning = _threadRunning;	}		public java.lang.Thread getThread() {		return thread;	}		public void setThread(java.lang.Thread _thread) {		thread = _thread;	}		public float getSwitchingLevel() {		return switchingLevel;	}		public void setSwitchingLevel(float _switchingLevel) {		switchingLevel = _switchingLevel;	}		// ////////////////////////////////////////////////////////////////////////	// own implementations	// ////////////////////////////////////////////////////////////////////////		/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._14_0_8a7027a_1203495432297_311152_296) ENABLED START */	/* TODO put your own implementation code here */	public String getAppName() {		return "Cebit pot application";	}		public String getDescription() {		return "Cebit pot application which is generated with mdsd";	}		/**	 * Starts the program for the Simulator board. This creates any initial	 * devices and sets them to defined states.	 * 	 * @param adApp	Inistance of the AVIDirectorMain application	 */	public boolean start(AVIDirectorMain adApp) {		Logger.log(getAppName(), "Starting");				started = false;		app = adApp;				try {			// TTL1 is analog input with a potentometer			pot = new PotSensor(Integer.toString(M2M_IODevice.TTL1), app);						// Bind pot controller to pot sensor			PotSensorController psc = new PotSensorController(pot);			pot.insertInSensorController(psc);						// TTL2 is the light bulb			lamp = new Lamp(Integer.toString(M2M_IODevice.TTL2), app);						// TTL3 is the green LED			greenLED = new LightEmittingDiode(Integer.toString(M2M_IODevice.TTL3), app);						// TTL4 is the red LED			redLED = new LightEmittingDiode(Integer.toString(M2M_IODevice.TTL4), app);						// add listener to pot controller			psc.insertInSensorListener(this);						// start this thread running			started = true;			thread = new Thread(this);						// Now wait for a signal that it has started			synchronized (this) {				try {					thread.start();					this.wait(30000); // 30 seconds to get going				} catch (InterruptedException e) {					Logger.log(getAppName(), "InterruptedException starting Thread");				}			}						Logger.log(getAppName(), "Started");		} // try		catch (Exception e) {			Logger.debugln(getAppName(), e);		}		return started;	}		/**	 * Stops the currently executing Cebit programm. This will try to do any	 * cleanup possible.	 * 	 */	public void stop() {		Logger.log(getAppName(), "Stopping");				// set outputs down		lamp.regulate(0);		greenLED.regulate(0);		redLED.regulate(0);				// destroy objects		threadRunning = false;		pot = null;		lamp = null;		greenLED = null;		redLED = null;				// stop the watchdog from staring at us		if (watchDogTimer != null) {			watchDogTimer.removeMonitoredItem(this);			watchDogTimer = null;		}				Logger.log(getAppName(), "Stopped");	}		/**	 * This thread monitors the test box's switches and dials and if something	 * has changed it displays a message on the display and sends a message to	 * the M2MXML portal.	 */	public void run() {		Logger.log(getAppName(), "Running");				Thread.currentThread().setName(getAppName());				// notify out start method that we are running		threadRunning = true;		synchronized (this) {			this.notifyAll();		}				if (started) {			Logger.debugln(getAppName(), "Thread started");						// Monitor this running with a watchdog timer, and check in every 60			// seconds (at least)			watchDogTimer = app.getWatchDogTimer();			watchDogTimer.registerWatchDogMonitoredItem(this, getAppName(), WATCHDOG_TIMEOUT);						while (threadRunning) {								// reset watch dog				watchDogTimer.resetWatchDogTimer(this);								// let the pot measure				pot.measure();								// update every 500 ms				if (threadRunning) {					AvidUtil.waitHereMs(500);				}			} // while thread running			Logger.debugln(getAppName(), "Thread stopped");		} else {			Logger.log(getAppName(), "Not started so cannot run thread. Exiting");		}		Logger.log(getAppName(), "Runned");	}		/* PROTECTED REGION END */}