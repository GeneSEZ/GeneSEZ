package de.genesez.app.sensors;/* PROTECTED REGION ID(java.mclassifier.other.import.code_12_5_8a7027a_1184788436265_449095_937) ENABLED START *//* TODO put your imports here */import java.lang.String;import com.avidwireless.avidirector.IllegalHardwareAddressException;import de.genesez.j2meframework.sensors.SensorEvent;import de.genesez.j2meframework.sensors.Sensor;import com.avidwireless.avidirector.AvidUtil;import com.avidwireless.avidirector.InvalidHardwareOperationException;import com.avidwireless.avidirector.Logger;/* PROTECTED REGION END *//** * This class represents the pressure sensor form the whz in zwickau germany. * @author nicher */public class PotSensor extends Sensor {		// ////////////////////////////////////////////////////////////////////////	// generated variable, constant and association declarations	// ////////////////////////////////////////////////////////////////////////		private com.avidwireless.avidirector.iodevice.M2M_IODevice ioDevice;		// ////////////////////////////////////////////////////////////////////////	// generated constructor implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * @param  address  	 * @param  app  	 * @return  	 */	public PotSensor(String address, com.avidwireless.avidirector.AVIDirectorMain app) throws com.avidwireless.avidirector.IllegalHardwareAddressException, com.avidwireless.avidirector.InvalidHardwareOperationException {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._14_0_8a7027a_1203504616738_878892_1437) ENABLED START */		/* TODO put your own implementation code here */		super(address);				this.rangeMin = 0;		this.rangeMax = 4096;				ioDevice = app.getM2M_IODevice(AvidUtil.parseInt(address));		if (ioDevice != null) {			Logger.log("Setting up " + ioDevice.getDeviceAddress());			ioDevice.setAnalogInput();		} else {			Logger.debugln("No " + address + " Device specified");		}		/* PROTECTED REGION END */	}		/**	 * @param  address  	 * @param  app  	 * @param  gradient  	 * @param  offset  	 * @return  	 */	public PotSensor(String address, com.avidwireless.avidirector.AVIDirectorMain app, float gradient, float offset) throws com.avidwireless.avidirector.InvalidHardwareOperationException, com.avidwireless.avidirector.IllegalHardwareAddressException {		/* PROTECTED REGION ID(java.moperation.implementation.operation.code._12_5_8a7027a_1188991660230_164612_1324) ENABLED START */		/* TODO put your own implementation code here */		this(address, app);		this.gradient = gradient;		this.offset = offset;		/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated derived attribute method implementations	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated association method implementations	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated abstract method declaration	// ////////////////////////////////////////////////////////////////////////		// ////////////////////////////////////////////////////////////////////////	// generated normal method implementations	// ////////////////////////////////////////////////////////////////////////		/**	 * This method reads from the whz pressure sensor which is connected by the i2c bus system.	 */	public void measure() {				/* PROTECTED REGION ID(java.moperation.implementation.operation.code._12_5_8a7027a_1184788568835_800356_1085) ENABLED START */		/* TODO put your own implementation code here */		float value = -1;				try {			value = ioDevice.readPinAnalog();		} catch (IllegalHardwareAddressException e) {			Logger.log(ioDevice.getDeviceName() + " : " + e.getMessage());		} catch (InvalidHardwareOperationException e) {			Logger.log(ioDevice.getDeviceName() + " : " + e.getMessage());		}		sensorController.sendMeasureValue(new SensorEvent(address, value));				/* PROTECTED REGION END */	}		// ////////////////////////////////////////////////////////////////////////	// generated getter and setter method implementations	// ////////////////////////////////////////////////////////////////////////		public com.avidwireless.avidirector.iodevice.M2M_IODevice getIoDevice() {		return ioDevice;	}		public void setIoDevice(com.avidwireless.avidirector.iodevice.M2M_IODevice _ioDevice) {		ioDevice = _ioDevice;	}		// ////////////////////////////////////////////////////////////////////////	// own implementations	// ////////////////////////////////////////////////////////////////////////		/* PROTECTED REGION ID(java.mclassifier.implementation.owncode.code._12_5_8a7027a_1184788436265_449095_937) ENABLED START */	/* TODO put your own implementation code here */	/* PROTECTED REGION END */}