/**
 * General naming conventions for TYPO3 Extbase
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-05-11
 */

// based on genesez meta model
import gcore;

// use common logging scripts
extension de::genesez::platforms::common::log::Log;

// use TYPO3 MVC profile scripts	
extension de::genesez::platform::typo3v4::mvc::profile::ExtbaseProfile;

// use TYPO3 MVC convention scripts
extension de::genesez::platform::typo3v4::mvc::convention::Convention;

// use common access helper scripts
extension de::genesez::platforms::common::AccessHelper;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC name context conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String namingContextDefault() :
	"Default";


String namingContextGeneral() :
	"General";
	

String namingContextPHPComplaint() :
	"PHPCompliant";
	

String namingContextConfiguration() :
	"Configuration";


String namingContextLocalization() :
	"Localization";


String namingContextLocalizationCSH() :
	"LocalizationCSH";


/**
 * Get the actual naming context.
 * 
 * @return The actual naming context
 */
String getNamingContext() :
	JAVA de.genesez.platform.typo3v4.mvc.convention.Naming.getNamingContext();


/**
 * Set the new naming context.
 * 
 * @param namingContext The new naming context
 */
Void setNamingContext(String namingContext) :
	JAVA de.genesez.platform.typo3v4.mvc.convention.Naming.setNamingContext(java.lang.String);


/**
 * Revert the previous naming context.
 */
Void revertNamingContext() :
	JAVA de.genesez.platform.typo3v4.mvc.convention.Naming.revertNamingContext();

/**
 * The name depends on the actual naming context.
 */
String name(MElement this) :
	name( this, getNamingContext() );

/**
 * The name depends on the naming context parameter.
 */
String name(MElement this, String namingContext) :
	switch ( namingContext ) {
		// checks if the naming context is 'General' 
		case namingContextGeneral() :
			asGeneralName()
		// checks if the naming context is 'PHPComplaint'
		case namingContextPHPComplaint() :
			asPHPComplaintName() 
		// checks if the naming context is 'Configuration'
		case namingContextConfiguration() :
			asConfigurationName()
		// checks if the naming context is 'Localization'
		case namingContextLocalization() :
			asLocalizationName()
		// checks if the naming context is 'LocalizationCSH'
		case namingContextLocalizationCSH() :
			asLocalizationNameCSH()
		// otherwise return the default name	
		default :
			asDefaultName()
	};


/**
 * The name depends on the actual naming context.
 */
String name(MClassifier this) :
	name( this, getNamingContext() );


/**
 * The name depends on the naming context parameter.
 */
String name(MClassifier this, String namingContext) :
	switch ( namingContext ) {
		// checks if the naming context is 'General' 
		case namingContextGeneral() :
			asGeneralName()
		// checks if the naming context is 'PHPComplaint'
		case namingContextPHPComplaint() :
			asPHPComplaintName() 
		// checks if the naming context is 'Configuration'
		case namingContextConfiguration() :
			asConfigurationName()
		// checks if the naming context is 'Localization'
		case namingContextLocalization() :
			asLocalizationName()
		// checks if the naming context is 'LocalizationCSH'
		case namingContextLocalizationCSH() :
			asLocalizationNameCSH()
		// otherwise return the default name	
		default :
			asDefaultName()
	};


String name(MType this) :
	switch (metaType) {
		case MExternal : ((MExternal)this).specification
		case MPrimitiveType : ((MPrimitiveType)this).name
		default : ((MClassifier)this).name()
	};
	

String name(String this) : 
	this;

/**
 * Formats the element name 
 * in 'Default' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
private String asDefaultName(MElement this) :
	name;


/**
 * Formats the element name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
private String asGeneralName(MElement this) :
	logWarn("There exists no 'General' context for " + name + " (" + metaType + ") so that the default name is returned.") ->
	name;


/**
 * Formats the element name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted element name
 */
private String asPHPComplaintName(MElement this) :
	logWarn("There exists no 'PHPComplaint' context for " + name + " (" + metaType + ") so that the default name is returned.") ->
	name;


/**
 * Formats the element name 
 * in 'Configuration' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
private String asConfigurationName(MElement this) :
	logWarn("There exists no 'Configuration' context for " + name + " (" + metaType + ") so that the default name is returned.") ->
	name;


/**
 * Formats the element name 
 * in 'Localization' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
private String asLocalizationName(MElement this) :
	logWarn("There exists no 'Localization' context for " + name + " (" + metaType + ") so that the default name is returned.") ->
	name;
	
	
/**
 * Formats the element name 
 * in 'LocalizationCSH' TYPO3 MVC naming context.
 * 
 * @return	the formatted element name
 */
private String asLocalizationNameCSH(MElement this) :
	logWarn("There exists no 'LocalizationCSH' context for " + name + " (" + metaType + ") so that the default name is returned.") ->
	name;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC classifier name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a classifier name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
private String asGeneralName(MClassifier this) :
	classifierNameBase() + classifierNameSeperator() + classifierNamePath() + classifierNameSeperator() + classifierNamePrefix() + name.toFirstUpper() + classifierNameSuffix();	


/**
 * Formats a classifier name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted classifier name
 */
private String asPHPComplaintName(MClassifier this) :
	name.toFirstUpper();


/**
 * Formats a classifier name 
 * in 'Configuration' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
private String asConfigurationName(MClassifier this) :
	asGeneralName().toLowerCase();
	

/**
 * Formats a classifier name 
 * in 'Localization' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
private String asLocalizationName(MClassifier this) :
	asConfigurationName();


/**
 * Formats a classifier name 
 * in 'LocalizationCSH' TYPO3 MVC naming context.
 * 
 * @return	the formatted classifier name
 */
private String asLocalizationNameCSH(MClassifier this) :
	asLocalizationName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC property name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted attribute or association role name
 */
private String asPHPComplaintName(MProperty this) :
	asGeneralName();


/**
 * Formats an attribute or association role name as a normal attribute
 * in 'Configuration' TYPO3 MVC naming context. 
 * 
 * @return	the formatted attribute or association role name
 */
private String asConfigurationName(MProperty this) :
	JAVA de.genesez.platform.typo3v4.mvc.convention.Naming.toLowerPropertyName(de.genesez.metamodel.gcore.MProperty);


/**
 * Formats an attribute or association role name as a normal attribute
 * in 'Localization' TYPO3 MVC naming context. 
 * 
 * @return	the formatted attribute or association role name
 */
private String asLocalizationName(MProperty this) :
	classifier.asLocalizationName() + "." + asConfigurationName();
	

/**
 * Formats an attribute or association role name as a normal attribute
 * in 'LocalizationCSH' TYPO3 MVC naming context. 
 * 
 * @return	the formatted attribute or association role name
 */
private String asLocalizationNameCSH(MProperty this) :
	asConfigurationName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC attribute name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an attribute name as a normal attribute or constant
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted attribute name
 */
private String asGeneralName(MAttribute this) :
	final && static && hasDefaultValue()
		? name.toUpperCase()
		: name.toFirstLower();


/**
 * Formats an attribute name as a getter method.
 *
 * @return	the formatted name of the getter method
 */
String asGetterName(MAttribute this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an attribute name as a setter or inject (DI) method.
 * 
 * @return	the formatted name of the setter method
 */
String asSetterName(MAttribute this) : 
	setterNamePrefix() + name.toFirstUpper();

	
/**
 * Formats an attribute name as a 'insert in' method.
 * 
 * @return	the formatted name of the 'insert in' method
 */
String asInsertInName(MAttribute this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an attribute name as a 'remove from' method.
 * 
 * @return	the formatted name of the 'remove from' method
 */
String asRemoveFromName(MAttribute this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC association role name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an association role name as a normal attribute
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted association role name
 */
private String asGeneralName(MAssociationRole this) :
	name.toFirstLower();
	

/**
 * Formats an association role name as a getter method.
 *
 * @return	the formatted name of the getter method
 */
String asGetterName(MAssociationRole this) : 
	getterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a setter method.
 * 
 * @return	the formatted name of the setter method
 */
String asSetterName(MAssociationRole this) : 
	setterNamePrefix() + name.toFirstUpper();


/**
 * Formats an association role name as a 'insert in' method.
 * 
 * @return	the formatted name of the 'insert in' method
 */
String asInsertInName(MAssociationRole this) : 
	insertInNamePrefix() + name.toFirstUpper();

/**
 * Formats an association role name as a 'remove from' method.
 * 
 * @return	the formatted name of the 'remove from' method
 */
String asRemoveFromName(MAssociationRole this) : 
	removeFromNamePrefix() + name.toFirstUpper();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC operation name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats an operation name using suffix 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted operation name
 */
private String asGeneralName(MOperation this) :
	name.toFirstLower() + operationNameSuffix();


/**
 * Formats an operation name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted operation name
 */
private String asPHPComplaintName(MOperation this) :
	name.toFirstLower();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 MVC parameter name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Formats a parameter name 
 * in 'General' TYPO3 MVC naming context.
 * 
 * @return	the formatted parameter name
 */
private String asGeneralName(MParameter this) : 
	name.toFirstLower();
	

/**
 * Formats a parameter name 
 * in 'PHPComplaint' naming context.
 * 
 * @return	the formatted parameter name
 */
private String asPHPComplaintName(MParameter this) : 
	asGeneralName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC controller
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

List[String] asControllerActionPairs(MModel this, List[String] listOfXmiGuids) :
	JAVA de.genesez.platform.typo3v4.mvc.convention.Naming.asControllerActionPairs(de.genesez.metamodel.gcore.MModel, java.util.List);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC plugins and modules
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asPluginName(MInterface this) :
	name.toFirstUpper();


String asModuleName(MInterface this) :
	fullQualifiedExtensionName().toLowerCase() + extensionNameSeperator() + name.toLowerCase();


String asMainModulName(String mainModule) :
	mainModule.toLowerCase();
	

String asT3PluginType(String value) :
	switch (value) {
		case prT3ExtbasePluginTypeExtbaseContentElement() :
			"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_CONTENT_ELEMENT"
		default :
			"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_PLUGIN"
	};

	
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC persistance
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String asIntermediateTableName(MAssociationRole this) :
	fullQualifiedExtensionName().toLowerCase() + classifierNameSeperator()
		+ ( classifier.name.compareTo( type.name() ) < 0 
			? classifier.asIntermediateTableName() + classifierNameSeperator() + ( hasOpposite() ? opposite.name() + classifierNameSeperator() : "" ) + type.asIntermediateTableName() + classifierNameSeperator() + name()
			: type.asIntermediateTableName() + classifierNameSeperator() + name () + classifierNameSeperator() + classifier.asIntermediateTableName() + classifierNameSeperator() + ( hasOpposite() ? opposite.name() + classifierNameSeperator() : "" )
		  )
		+ classifierNameSeperator() + "mm";


private String asIntermediateTableName(MType this) :
	name().split( classifierNameSeperator() ).last().toLowerCase();
