/**
 * Additions of the model before generation of source code.  
 *  
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-08-11
 */

//	based on genesez meta model
import gcore;

// use common logging scripts
extension de::genesez::platforms::common::log::Log;

// use TYPO3 MVC Extbase profile + access helper scripts
extension de::genesez::platform::typo3v4::mvc::profile::ExtbaseProfile;
extension de::genesez::platform::typo3v4::mvc::profile::ExtbaseAccessHelper;

// use TYPO3 MVC Fluid profile + access helper scripts
extension de::genesez::platform::typo3v4::mvc::profile::FluidProfile;
extension de::genesez::platform::typo3v4::mvc::profile::FluidAccessHelper;

// use GeneSEZ profile scripts
extension de::genesez::platforms::common::genesez::profile::Profile;

// use TYPO3 naming context and common naming scripts
extension de::genesez::platforms::common::naming::Naming;
extension de::genesez::platform::typo3v4::mvc::convention::NamingContext;

// use TYPO3 MVC access helper scripts which overrides
// common access helper scripts if script name is equal 
extension de::genesez::platform::typo3v4::mvc::scripts::AccessHelper;
extension de::genesez::platforms::common::AccessHelper;

// use common create template scripts
extension de::genesez::platforms::common::m2m::MakeElement;
extension de::genesez::platforms::common::m2m::CreateTemplate;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	MPackage (MModel)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void modelAdditions(MModel this) :
	setNamingContext( namingContextGeneral() ) ->
	// perform model additions for all stereotypes which are validators
	anyStereotype.makeValidator() ->
	// perform model additions for model
	packageAdditions();


Void packageAdditions(MPackage this) :
	// perform model additions for all classes
	classifier.typeSelect(MClass).classAdditions() ->
	
	// perform model additions for all nested packages
	nestedPackage.packageAdditions();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	MClass
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void classAdditions(MClass this) :
	logTrace("--------------------------------------------------------------------------------") ->
	logTrace("call classAdditions for class: " + name) ->
	switch {
		case isController() :
			controllerAdditions()
		case isEntity() :
			entityAdditions()
		case isValueObject() :
			valueObjectAdditions()
		case isRepository() :
			repositoryAdditions()
		case isValidator() :
			validatorAdditions()
		case isViewHelper() :
			viewHelperAdditions()
		default :
			Void
	};	


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Controller additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 MVC Extbase controller.
 */
Void controllerAdditions(MClass controller) :
	logTrace("call controllerAdditions for controller: " + controller.name) ->
	// add super controller type 
	controller.addControllerType() ->
	// add 'initalizeAction' if it should
	controller.addControllerInitializeAction() ->
	// add 'errorAction' if it should
	controller.addControllerErrorAction() ->
	// add 'getErrorFlashMessage' if it should
	controller.addControllerGetErrorFlashMessage() ->
	// add 'initalizeAction' for all actions which have the sterotype
	controller.operation.select( o | o.hasT3ExtbaseControllerActionCreateInitializeAction("true") )
		.addControllerActionInitializeAction();


MClass makeController(MClass domainObject) :
	logTrace("call makeController for domain object: " + domainObject.name) ->
	// checks if the controller doesn't already exists
	( domainObject.hasT3ExtbaseDomainObjectCreateController("true") || domainObject.hasT3ExtbaseDomainObjectCreatePlugin("true") ) &&
	!domainObject.existsController()
		? (	let c = createClass( domainObject.model(), domainObject.xmiGuid + ".controller", domainObject.asControllerName() ) :
				logTrace("create new controller class for domain object: " + domainObject.name) ->
				c.processController(domainObject)
		) : domainObject.model().allControllers().selectFirst( c | c.nameS() == domainObject.asControllerName() );


MClass processController(MClass this, MClass domainObject) :
	logTrace("call processController for class: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the controller
	makeComment("Controller for a domain object.") ->
	// add super controller type
	addControllerType() ->
	// add stereotype to mark this class as controller
	stereotype.add( 
		makeStereotype( model(), prT3ExtbaseController(), prT3ExtbaseController() ) 
	) ->
	// add property to inject the repository
	addControllerRepositoryAttribute(domainObject) ->
	// add controller actions
	addControllerListAction(domainObject) ->
	addControllerShowAction(domainObject) ->
	addControllerNewAction(domainObject) ->
	addControllerCreateAction(domainObject) ->
	addControllerEditAction(domainObject) ->
	addControllerUpdateAction(domainObject) ->
	addControllerDeleteAction(domainObject) ->
	this;


/**
 * Add the super controller type to the controller class.
 */
Void addControllerType(MClass this) :
	logTrace("call addControllerType for controller: " + name) ->
	// checks if the class has a stereotype 
	hasT3ExtbaseControllerStereotype()
		// if true, then create the super controller type which is specified
		? (	let controllerType = getT3ExtbaseControllerControllerType() :
				switch {
					case controllerType == prT3ExtbaseControllerTypeExtbaseControllerInterface() :
						realization.add( createExternal( model(), controllerType ) )
					case generalization.isEmpty :
						generalization.add( createExternal( model(), controllerType ) )
					default : Void
				}
		)
		// else create the default one
		: (	generalization.isEmpty 
				? generalization.add( createExternal( model(), prT3ExtbaseControllerTypeExtbaseActionController() ) )
				: Void
		);


Void addControllerRepositoryAttribute(MClass this, MClass domainObject) :
	let a = createAttribute( xmiGuid + "." + domainObject.asRepositoryName().toFirstLower(), domainObject.asRepositoryName().toFirstLower() ) :
		// (visibility, derived, multiplicity, unique, ordered)
		a.processProperty("protected", false, 1, false, false) ->
		// (defaultvalue, static, final)
		a.processAttribute("", false, false) ->
		// add comment to discribe the attribute
		a.makeComment("Repository for a domain objects") ->
		// add repository type
		a.setType(
			makeRepository(domainObject) 
		) ->
		// add stereotype to mark this attribute as dependency injection
		a.stereotype.add( 
			let s = makeStereotype( model(), a.xmiGuid + "." + prDi(), prDi() ) :
				a.makeTaggedValue( makeTag( s, prDiSetter(), "Boolean" ), "true" ) ->
				s
		);


/**
 * Add the 'initalizeAction' to the controller class.
 */
Void addControllerInitializeAction(MClass this) :
	logTrace("call addControllerInitializeAction for controller: " + name) ->
	// checks if the initalize action should be created and doesn't already exists
	hasT3ExtbaseControllerCreateInitializeAction("true")
	&& operation.select( o | o.name() == "initalizeAction" ).isEmpty
		? ( let o = makeOperation("initializeAction", "protected", false, false, false) :
				// add comment to discribe the operation
				o.makeComment("Override initalizeAction to solve tasks which all actions have in common.")
		) : Void;


/**
 * Add the 'errorAction' to the controller class.
 */
Void addControllerErrorAction(MClass this) :
	logTrace("call addControllerErrorAction for controller: " + name) ->
	// checks if the error action should be created and doesn't already exists
	hasT3ExtbaseControllerCreateErrorAction("true")
	&& operation.select( o | o.name() == "errorAction" ).isEmpty
		? (	let o = makeOperation("errorAction", "protected", false, false, false) :
				// add comment to discribe the operation
				o.makeComment("Override errorAction to show that errors happend.")
		) : Void;


/**
 * Add the 'getErrorFlashMessage' to the controller class.
 */
Void addControllerGetErrorFlashMessage(MClass this) :
	logTrace("call addControllerGetErrorFlashMessage for controller: " + name) ->
	// checks if the get error flash message method should be created and doesn't already exists
	hasT3ExtbaseControllerCreateGetErrorFlashMessage("true")
	&& operation.select(o| o.name() == "getErrorFlashMessage" ).isEmpty
		? (	let o = makeOperation("getErrorFlashMessage", "protected", false, false, false) :
				// add comment to discribe the operation
				o.makeComment("Override getErrorFlashMessage to customize the flash message.") ->
				o.setReturn(
					let return = makeParameter( o, o.xmiGuid + "." + "return", "", "", "return", createPrimitiveTypeString(model()) ) :
						// add comment to discribe the parameter
						return.makeComment("The flash message") ->
						return
				) ->
				// add stereotype to mark this operation as no controller action
				o.stereotype.add( 
					makeStereotype( model(), prT3ExtbaseControllerNoAction(), prT3ExtbaseControllerNoAction() ) 
				)
		) :  Void;


Void addControllerActionInitializeAction(MOperation this) :
	logTrace("call addControllerActionInitializeAction for controller: " + name) ->
	// checks if the initalize action for an action should be created and doesn't already exists
	hasT3ExtbaseControllerActionCreateInitializeAction("true") 
	&& classifier.operation.select( o | o.name() == "initalize" + name().toFirstUpper() ).isEmpty
		? (let o = makeOperation(classifier, "initalize" + name().toFirstUpper(), "protected", false, false, false) :
				// add comment to discribe the operation
				o.makeComment("Define initialize" + name().toFirstUpper() + " to solve tasks before the action is called.")
		) : Void;


Void addControllerListAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("listAction") :
		o.makeComment("Displays a list of domain objects");


Void addControllerShowAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("showAction") :
		// add comment to discribe the operation
		o.makeComment("Displays one single domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to display.") ->
				p
		);
		

Void addControllerNewAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("newAction") :
		// add comment to discribe the operation
		o.makeComment("Displays a form for creating a new domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "NULL", "in", domainObject) :
				p.makeComment("A fresh domain object to display.") ->
				p
		);


Void addControllerCreateAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("createAction") :
		// add comment to discribe the operation
		o.makeComment("Creates a new domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The new domain object to create.") ->
				p
		);


Void addControllerEditAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("editAction") :
		// add comment to discribe the operation
		o.makeComment("Displays a form for editing an existing domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to display.") ->
				p
		);


Void addControllerUpdateAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("updateAction") :
		// add comment to discribe the operation
		o.makeComment("Updates an existing domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to update") ->
				p
		);


Void addControllerDeleteAction(MClass this, MClass domainObject) :
	let o = makeControllerAction("deleteAction") :
		// add comment to discribe the operation
		o.makeComment("Deletes an existing domain object.") ->
		o.parameter.add(
			let p = makeParameter(o, domainObject.name( namingContextObject() ), "", "in", domainObject) :
				p.makeComment("The existing domain object to delete") ->
				p
		);


private MOperation makeControllerAction(MClass this, String name) :
	let o = makeOperation(name, "protected", false, false, false) :
		o.setReturn(
			let return = makeParameter( o, o.xmiGuid + "." + "return", "", "", "return", createPrimitiveTypeString(model()) ) :
				// add comment to discribe the parameter
				return.makeComment("The rendered view for this action.") ->
				return
		) ->
		o.stereotype.add( 
			makeStereotype( model(), "http://www.genesez.org/TYPO3/TYPO3v4/controller/" + name, "http://www.genesez.org/TYPO3/TYPO3v4/controller/" + name ) 
		) ->
		o;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Model entity additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 MVC Extbase entity.
 */
Void entityAdditions(MClass entity) :
	logTrace("call entityAdditions for entity: " + entity.name) ->
	// add super entity type
	entity.addEntityType() ->
	// make controller if it should
	entity.makeController() ->
	// make repository if it should
	entity.makeRepository() ->
	// make plugin if it should
	entity.makePlugin() ->
	// make validator if it should
	entity.makeValidator(); 


/**
 * Add the super entity type to the entity class.
 */
Void addEntityType(MClass this) :
	logTrace("call addEntityType for entity: " + name) ->
	// checks if the class has a stereotype 
	hasT3ExtbaseEntityStereotype()
		// if true, then create the super entity type which is specified
		? (	let entityType = getT3ExtbaseEntityEntityType() :
				switch {
					case generalization.isEmpty :
						generalization.add( createExternal( model(), entityType ) )
					default : Void
				}
		)
		// else create the default one
		: (	generalization.isEmpty 
				? generalization.add( createExternal( model(), prT3ExtbaseEntityTypeExtbaseAbstractEntity() ) )
				: Void
		);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Model value object additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/**
 * Model additions for an TYPO3 MVC Extbase value object.
 */
Void valueObjectAdditions(MClass valueObject) :
	logTrace("call valueObjectAdditions for value object: " + valueObject.name) ->
	// add super value object type
	valueObject.addValueObjectType() ->
	// make controller if it should
	valueObject.makeController() ->
	// make repository if it should
	valueObject.makeRepository() ->
	// make plugin if it should
	valueObject.makePlugin() ->
	// make validator if it should
	valueObject.makeValidator();


/**
 * Add the super value object type to the value object class.
 */
Void addValueObjectType(MClass this) :
	logTrace("call addValueObjectType for value object: " + name) ->
	// checks if the class has a stereotype 
	hasT3ExtbaseValueObjectStereotype()
		// if true, then create the super value object type which is specified
		? ( let valueObjectType = getT3ExtbaseValueObjectValueObjectType() :
				switch {
					case generalization.isEmpty :
						generalization.add( createExternal( model(), valueObjectType ) )
					default : Void
				}
		) 
		// else create the default one
		: (	generalization.isEmpty 
				? generalization.add( createExternal( model(), prT3ExtbaseValueObjectTypeExtbaseAbstractValueObject() ) )
				: Void 
		);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Repository additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 MVC Extbase repository.
 */
Void repositoryAdditions(MClass repository) :
	logTrace("call repositoryAdditions for repository: " + repository.name) ->
	// add super repository type
	repository.addRepositoryType() ->
	// add 'initalizeObject' if it should
	repository.addRepositoryInitializeObject();


MClass makeRepository(MClass domainObject) :
	logTrace("call makeRepository for domain object: " + domainObject.name) ->
	// checks if the respository doesn't already exists
	( domainObject.hasT3ExtbaseDomainObjectCreateRepository("true") || domainObject.hasT3ExtbaseDomainObjectCreateController("true") ) &&
	!domainObject.existsRepository()
		? (	let c = createClass( domainObject.model(), domainObject.xmiGuid + ".repository", domainObject.asRepositoryName() ) :
				logTrace("create new repository class for domain object: " + domainObject.name) ->
				c.processRepository(domainObject)
		) : domainObject.model().allRepositories().selectFirst( e | e.nameS() == domainObject.asRepositoryName() );


MClass processRepository(MClass this, MClass domainObject) :
	logTrace("call processRepository for class: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the controller
	makeComment("Respository for a domain object.") ->
	// add super repository type
	addRepositoryType() ->
	// add stereotype to mark this class as repository
	stereotype.add( 
		makeStereotype( model(), prT3ExtbaseRepository(), prT3ExtbaseRepository() ) 
	) ->
	this;


/**
 * Add the super repository type to the repository class.
 */
Void addRepositoryType(MClass this) :
	logTrace("call addRepositoryType for repository: " + name) ->
	// checks if the class has a stereotype 
	hasT3ExtbaseRepositoryStereotype()
		// if true, then create the super repository type which is specified
		? ( let repositoryType = getT3ExtbaseRepositoryRepositoryType() :
				switch {
					case generalization.isEmpty :
						generalization.add( createExternal( model(), repositoryType ) )
					default : Void
				} 
		) 
		// else create the default one
		: (	generalization.isEmpty 
				? generalization.add( createExternal( model(), prT3ExtbaseRepositoryTypeExtbaseRepository() ) )
				: Void 
		);


/**
 * Add the 'initalizeObject' to the repository class.
 */
Void addRepositoryInitializeObject(MClass this) :
	// checks if the initalize object operation should be created and doesn't already exists
	hasT3ExtbaseRepositoryCreateInitializeObject("true")
	&& operation.select( o | o.name() == "initalizeObject" ).isEmpty
		? ( let o = makeOperation("initalizeObject", "public", false, false, false) :
				// add comment to discribe the operation
				o.makeComment("Life cycle method.")
		) : Void;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Service additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Validator additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 MVC Extbase repository.
 */
Void validatorAdditions(MClass validator) :
	logTrace("call validatorAdditions for validator: " + validator.name) ->
	// add super validiator type
	validator.addValidatorType();


MClass makeValidator(MClass domainObject) :
	logTrace("call makeValidator for domain object: " + domainObject.name) ->
	domainObject.hasT3ExtbaseDomainObjectCreateValidator("true") &&
	!domainObject.existsValidator()
		? (	let c = createClass( domainObject.model(), domainObject.xmiGuid + ".validator", domainObject.asValidatorName() ) :
				logTrace("create new validator class for domain object: " + domainObject.name) ->
				c.processValidator(domainObject)
		) : domainObject.model().allValidators().selectFirst( e | e.nameS() == domainObject.asValidatorName() ); 	


MClass makeValidator(MStereotype stereotype) :
	logTrace("call makeValidator for stereotype: " + stereotype.name) ->
	stereotype.hasT3ExtbaseValidatorStereotype() &&
	!stereotype.existsValidator() 
		? (	let c = createClass(stereotype.model(), stereotype.xmiGuid + ".validator", stereotype.asValidatorName() ) :
				logTrace("create new validator class for stereotype: " + stereotype.name) ->
				c.processValidator(createExternal( stereotype.model(), "Object" ))
		) : stereotype.model().allValidators().select( v | v.nameS() == stereotype.asValidatorName() ).first();


MClass processValidator(MClass this, MType validationType) :
	logTrace("call processValidator for class: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the validator
	makeComment("Validator for object, property or parameter.") ->
	// add super validator type
	addValidatorType() ->
	// add 'isValid'
	addValidatorIsValid(validationType) ->
	// add stereotype to mark this class as validator
	stereotype.add( 
		makeStereotype( model(), prT3ExtbaseValidator(), prT3ExtbaseValidator() ) 
	) ->
	this;


/**
 * Add the super validator type to the validator class.
 */
Void addValidatorType(MClass this) :
	logTrace("call addValidatorType for validator: " + name) ->
	// checks if the class has a stereotype
	hasT3ExtbaseValidatorStereotype()
		// if true, then create the super validator type which is specified
		? ( let validatorType = getT3ExtbaseValidatorValidatorType() :
				switch {
					case validatorType == prT3ExtbaseValidatorTypeExtbaseValidatorInterface() :
						realization.add( createExternal( model(), validatorType ) )
					case generalization.isEmpty :
						generalization.add( createExternal( model(), validatorType ) )
					default : Void
				}
		)
		// else create the default one
		: ( generalization.isEmpty 
				? generalization.add( createExternal( model(), prT3ExtbaseValidatorTypeExtbaseAbstractValidator() ) )
				: Void 
		);


/**
 * Add the 'isValid' to the validator class.
 */
Void addValidatorIsValid(MClass this, MType validationType) :
	let o = makeOperation("isValid", "public", false, false, false) :
		// add comment to discribe the operation
		o.makeComment("Checks if the given value is valid according to the validator.") ->
		o.parameter.add(
			let p = makeParameter(o, "value", "", "in", validationType) :
				// add comment to discribe the parameter
				p.makeComment("The value that should be validated") ->
				p
		) ->
		o.setReturn(
			let return = makeParameter(o, o.xmiGuid + "." + "return", "", "", "return", validationType) :
				// add comment to discribe the parameter
				return.makeComment("TRUE if the value is valid, FALSE if an error occured") ->
				return
		);
		

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Extbase Plugin additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

MClass makePlugin(MClass domainObject) :
	logTrace("call makePlugin for domain object: " + domainObject.name) ->
	// checks if the plugin doesn't already exists
	domainObject.hasT3ExtbaseDomainObjectCreatePlugin("true") &&
	!domainObject.existsPlugin()
		? (	let i = createInterface( domainObject.model(), domainObject.xmiGuid + ".plugin", domainObject.asPluginName() ) :
				logTrace("create new plugin interface for domain object: " + domainObject.name) ->
				i.processPlugin(domainObject)
		) : domainObject.model().allPlugins().selectFirst( p | p.name() == domainObject.asPluginName() );


MInterface processPlugin(MInterface this, MClass domainObject) :
	logTrace("call processValidator for interface: " + name) ->
	// (visibility, abstract, final)
	processClassifier("public", false, false) ->
	// add comment to discribe the controller
	makeComment("Plugin for a domain object.") ->
	// add stereotype to mark this interface as plugin
	stereotype.add( 
		let s = makeStereotype( model(), prT3ExtbasePlugin(), prT3ExtbasePlugin() ) :
			makeTaggedValue( makeTag( s, prT3ExtbasePluginTitle(), "String" ), domainObject.asPluginName() ) ->
			(	let controller = makeController(domainObject) :
				( 	let ca = makeTag(s, prT3ExtbasePluginCachedActions(), "Operation") :
						controller.operation.select( e | e.isControllerAction() )
							.addPluginControllerAction(ca, this)
				) ->
				( 	let uca = makeTag(s, prT3ExtbasePluginUncachedActions(), "Operation") :
						controller.operation.select( e | e.isControllerAction() && {"createAction", "updateAction", "deleteAction"}.contains(e.name) )
							.addPluginControllerAction(uca, this)
				)
			) ->
			s 
	) ->
	this;


private Void addPluginControllerAction(MOperation controllerAction, MTag controllerActionType, MInterface this) :
	createTaggedValue(controllerActionType, controllerAction.xmiGuid);


		
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 MVC Fluid ViewHelper additions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Model additions for an TYPO3 MVC Fluid view helper.
 */
Void viewHelperAdditions(MClass this) :
	logTrace("call viewHelperAdditions for view helper: " + name) ->
	// add super view helper type
	addViewHelperType();


Void addViewHelperType(MClass this) :
	logTrace("call addViewHelperType for view helper: " + name) ->
	// checks if the class has a stereotype 
	hasT3FluidViewHelperStereotype()
		// if true, then create the super view helper type which is specified
		? ( let viewHelperType = getT3FluidViewHelperViewHelperType() :
				switch {
					case generalization.isEmpty :
						generalization.add( createExternal( model(), viewHelperType ) )
					default : Void
				} 
		) 
		// else create the default one
		: (	generalization.isEmpty 
				? generalization.add( createExternal( model(), prT3FluidViewHelperTypeFluidAbstractViewHelper() ) )
				: Void 
		);


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	Helper functions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

private String nameS(MClassifier this) :
	name( namingContextGeneral() ).split("_").last();
	

private String asControllerName(MClassifier domainElement) :
	domainElement.nameS() + "Controller";
	
	
private String asRepositoryName(MClassifier domainElement) :
	domainElement.nameS() + "Repository";


private String asValidatorName(MClassifier domainElement) :
	domainElement.nameS() + "Validator";


private String asValidatorName(MStereotype this) :
	name.endsWith("Validator") ? name : name + "Validator";
	

private String asPluginName(MClassifier this) :
	name.toFirstUpper();

	

boolean existsController(MClass this) :
	// checks if the controller doesn't already exists
	!model().allControllers().select( c | c.nameS() == asControllerName() ).isEmpty;
	

boolean existsRepository(MClass this) :
	// checks if the respository doesn't already exists
	!model().allRepositories().select( r | r.nameS() == asRepositoryName() ).isEmpty;


boolean existsValidator(MClass this) :
	// checks if the validator doesn't already exists
	!model().allValidators().select( v | v.nameS() == asValidatorName() ).isEmpty;

boolean existsValidator(MStereotype this) :
	// checks if the validator doesn't already exists
	!model().allValidators().select( v | v.nameS() == asValidatorName() ).isEmpty;

boolean existsPlugin(MClass this) :
	// checks if the plugin doesn't already exists
	!model().allPlugins().select( p | p.asPluginName() == asPluginName() ).isEmpty;