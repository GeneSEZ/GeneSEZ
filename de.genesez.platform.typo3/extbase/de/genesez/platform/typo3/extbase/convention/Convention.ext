/**
 * General conventions for TYPO3 Extbase
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-05-11
 */
 
// based on genesez meta model
import gcore;

// use GeneSEZ profile access helper scripts
extension de::genesez::platforms::common::genesez::profile::AccessHelper;

// use TYPO3 Extbase access helper scripts
extension de::genesez::platform::typo3::extbase::scripts::AccessHelper;

// use TYPO3 Extbase workflow global var scripts
extension de::genesez::platform::typo3::extbase::workflow::GlobalVar;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase extension name and key conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of extension name seperator which is added between extension name 
 * sections.
 *
 * @return	the extension name seperator
 */
String extensionNameSeperator() : 
	"_";


/**
 * Getter of the prefix which is added to each extension.
 *
 * @return	the prefix to prepend
 */
String extensionPrefix() : 
	"Tx";


/**
 * Getter of the extension key. 
 * This method is only a wrapper for "globalVarExtensionKey()" 
 * defined in "GlobalVar.ext".
 *
 * @return	the extension key
 */
cached String extensionKey() :
	globalVarExtensionKey();


/**
 * Getter of full qualified extension key.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension key which is "tx_blog_example". 
 *
 * @return	the full qualified extension key
 */
cached String fullQualifiedExtensionKey() :
	extensionPrefix().toLowerCase() + extensionNameSeperator() + extensionKey();


/**
 * Getter of full qualified extension key in short notation.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension key in short notation which is "tx_blogexample". 
 *
 * @return	the full qualified extension key in short notation
 */
cached String fullQualifiedShortExtensionKey() :
	fullQualifiedExtensionName().toLowerCase();


/**
 * Getter of the extension name.
 * The extension name is generated by the defined extension name.
 * The extension name is equals the extension key without underscores and is 
 * written in upper camel case. 
 *
 * @return	the extension name
 */
cached String extensionName() :
	extensionName( extensionKey() );


/**
 * Getter of the extension name.
 * This method calls the Java method to remove the underscores and transform
 * the extension key in upper camel case.
 *
 * @return	the extension name
 */
private String extensionName(String extensionKey) :
		JAVA de.genesez.platform.typo3.extbase.convention.Convention.extensionName(java.lang.String);


/**
 * Getter of full qualified extension name.
 * For instance: The extension key is "blog_example" this method returns the
 * full qualified extension name which is "Tx_BlogExample". 
 *
 * @return	the full qualified extension name
 */
cached String fullQualifiedExtensionName() :
	extensionPrefix() + extensionNameSeperator() + extensionName();


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase file name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter for the separator within a file name.
 *
 * @return	the separator for directories in file names
 */
String fileSeparator() : 
	"/";


/**
 * Getter of the PHP file extension including the beginning dot.
 *
 * @return	the file extension for php artefacts ('.php')
 */
String fileExtensionPHP() : 
	".php";


/**
 * Getter of the SQL file extension including the beginning dot.
 *
 * @return	the file extension for sql artefacts ('.sql')
 */
String fileExtensionSQL() : 
	".sql";


/**
 * Getter of the TypoScript file extension including the beginning dot.
 *
 * @return	the file extension for TypoScript artefacts ('.txt')
 */
String fileExtensionTS() : 
	".txt";


/**
 * Getter of the XML file extension including the beginning dot.
 *
 * @return	the file extension for XML artefacts ('.xml')
 */
String fileExtensionXML() : 
	".xml";


String extEmconfPHPFileName() :
	"ext_emconf" + fileExtensionPHP();


String extLocalconfPhpFileName() :
	"ext_localconf" + fileExtensionPHP();


String extTablesPHPFileName() :
	"ext_tables" + fileExtensionPHP();


String extTablesSQLFileName() :
	"ext_tables" + fileExtensionSQL();


String setupTxtFileName() :
	"setup" + fileExtensionTS();
	

String constantsTxtFileName() :
	"constants" + fileExtensionTS();


String locallangXmlFileName() :
	"locallang" + fileExtensionXML();


String locallangDbXmlFileName() :
	"locallang_db" + fileExtensionXML();


String locallangCshXmlFileNamePrefix() :
	"locallang_csh_"; 

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase directory structure conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - Classes - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String classesPath() :
	"Classes";


String classesControllerPath() :
	"Classes/Controller";


String classesDomainPath() :
	"Classes/Domain";


String classesDomainModelPath() :
	"Classes/Domain/Model";
	
	
String classesDomainRepositoryPath() :
	"Classes/Domain/Repository";


String classesDomainServicePath() :
	"Classes/Domain/Service";
	
	
String classesDomainValidatorPath() :
	"Classes/Domain/Validator";


String classesViewHelpersPath() :
	"Classes/ViewHelpers";


/*
- - Configuration - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String configurationPath() :
	"Configuration";


String configurationFlexFormsPath() :
	"Configuration/FlexForms";


String configurationTCAPath() :
	"Configuration/TCA";


String configurationTypoScriptPath() :
	"Configuration/TypoScript";


/*
- - Documentation - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String documentationPath() :
	"Documentation";


String documentationManualPath() :
	"Documentation/Manual";
	

/*
- - Resources - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
*/

String resourcesPath() :
	"Resources";
	

String resourcesPrivatePath() :
	"Resources/Private";


String resourcesPrivateBackendPath() :
	"Resources/Private/Backend";


String resourcesPrivateBackendLayoutsPath() :
	"Resources/Private/Backend/Layouts";


String resourcesPrivateBackendPartialsPath() :
	"Resources/Private/Backend/Partials";


String resourcesPrivateBackendTemplatesPath() :
	"Resources/Private/Backend/Templates";


String resourcesPrivateLanguagePath() :
	"Resources/Private/Language";


String resourcesPrivateLayoutsPath() :
	"Resources/Private/Layouts";


String resourcesPrivatePartialsPath() :
	"Resources/Private/Partials";
	

String resourcesPrivateTemplatesPath() :
	"Resources/Private/Templates";


String resourcesPublicPath() :
	"Resources/Public";
	
String resourcesPublicIconsPath() :
	"Resources/Public/Icons";


/*
- - Tests - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -    
*/

String testsPath() :
	"Tests";


String testsControllerPath() :
	"Tests/Controller";


String testsDomainPath() :
	"Tests/Domain";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase classifier name base conventions (first two sections)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of name seperator which is added between classifier name sections.
 *
 * @return	the classifier name seperator
 */
String classifierNameSeperator() : 
	"_";


/**
 * Getter of name base which is prepend to the classifier name.
 * This method is only a wrapper for "fullQualifiedExtensionName()" 
 * defined inside this file. Actually it is only for semantic usage.
 *
 * @return	the classifier name base to prepend
 */
cached String classifierNameBase() :
	fullQualifiedExtensionName();

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase classifier name path conventions (middle sections)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of name path which is prepend to the name of a classifier.
 *
 * @return	the classifier name path to prepend
 */
String classifierNamePath(MClassifier this) :
	// The path depends on the TYPO3 extbase type.
	switch {
		// checks if the classifier is an TYPO3 Extbase controller package element
		case isControllerPackageElement() :
			convertToClassifierNamePath( classesControllerPath() )
		// checks if the classifier is an TYPO3 Extbase model package element
		case isModelPackageElement() :
			convertToClassifierNamePath( classesDomainModelPath() )
		// checks if the classifier is an TYPO3 Extbase repository package element
		case isRepositoryPackageElement() :
			convertToClassifierNamePath( classesDomainRepositoryPath() )
		// checks if the classifier is an TYPO3 Extbase service package element
		case isServicePackageElement() :
			convertToClassifierNamePath( classesDomainServicePath() )
		// checks if the classifier is an TYPO3 Extbase validator package element
		case isValidatorPackageElement() :
			convertToClassifierNamePath( classesDomainValidatorPath() )
		// checks if the classifier is an TYPO3 Fluid view helper package element
		case isViewHelperPackageElement() :
			convertToClassifierNamePath( classesViewHelpersPath() )
		default :
			""
	};


/**
 * Converts the path name to the classifier name path.
 *
 * @param	pathName	the path of the classifier
 * @return	the name path of the classifier
 */
private String convertToClassifierNamePath(String pathName) :
	pathName.replaceFirst( classesPath() + fileSeparator(), "" ).replaceAll( fileSeparator(), classifierNameSeperator() );


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase classifier name conventions (last section)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the prefix which is added to the name of a class.
 *
 * @return	the prefix to prepend
 */
String classifierNamePrefix(MClass this) : 
	switch {
		// checks if class is abstract and doesn't already starts with "Abstract" 
		case abstract && !name.startsWith("Abstract") : 
			"Abstract"
		default : ""
	};


/**
 * Getter of the suffix which is added to the name of a class.
 *
 * @return	the suffix to append
 */
String classifierNameSuffix(MClass this) : 
	switch {
		// checks if class is an TYPO3 Extbase controller and doesn't already ends with "Controller"
		case isController() && !name.endsWith("Controller") :
			"Controller"
		// checks if class is an TYPO3 Extbase repository and doesn't already ends with "Repository" 
		case isRepository() && !name.endsWith("Repository") :
			"Repository"
		case isValidator() && !name.endsWith("Validator") :
			"Validator"
		// checks if class is an TYPO3 Fluid view helper and doesn't already ends with "ViewHelper" 
		case isViewHelper() && !name.endsWith("ViewHelper") :
			"ViewHelper"
		default : 
			""
	};


/**
 * Getter of the prefix which is added to the name of an interface.
 *
 * @return	the prefix to prepend
 */
String classifierNamePrefix(MInterface this) : 
	"";


/**
 * Getter of the suffix which is added to the name of an interface.
 *
 * @return	the suffix to append
 */
String classifierNameSuffix(MInterface this) : 
	switch {
		// checks if interface doesn't already starts with "Interface" 
		case !name.endsWith("Interface") : 
			"Interface"
		default : ""
	};


/**
 * Getter of the prefix which is added to the name of a classifier.
 * Just there for error free templates.
 * 
 * @return	an empty string
 */
String classifierNamePrefix(MClassifier this) : 
	"";


/**
 * Getter of the suffix which is added to the name of an classifier.
 * Just there for error free templates.
 * 
 * @return	an empty string
 */
String classifierNameSuffix(MClassifier this) : 
	"";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase attribute name + accessor conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the prefix which is added to the name of a getter for an attribute.
 *
 * @return	the prefix to prepend
 */
String getterNamePrefix(MAttribute this) : 
	"get";


/**
 * Getter of the prefix which is added to the name of a setter for an attribute.
 *
 * @return	the prefix to prepend
 */
String setterNamePrefix(MAttribute this) :
	hasDiSetter("true")
		? "inject"
		: "set";


/**
 * Getter of the prefix which is added to the name of an inserIn for an attribute.
 *
 * @return	the prefix to prepend
 */
String insertInNamePrefix(MAttribute this) : 
	"add";


/**
 * Getter of the prefix which is added to the name of a removeFrom for an attribute.
 *
 * @return	the prefix to prepend
 */
String removeFromNamePrefix(MAttribute this) : 
	"remove";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase association role name + accessor conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the prefix which is added to the name of a getter for an association role.
 *
 * @return	the prefix to prepend
 */
String getterNamePrefix(MAssociationRole this) : 
	"get";


/**
 * Getter of the prefix which is added to the name of a setter for an association role.
 *
 * @return	the prefix to prepend
 */
String setterNamePrefix(MAssociationRole this) : 
	"set";


/**
 * Getter of the prefix which is added to the name of an inserIn for an association role.
 *
 * @return	the prefix to prepend
 */
String insertInNamePrefix(MAssociationRole this) : 
	"add";


/**
 * Getter of the prefix which is added to the name of a removeFrom for an association role.
 *
 * @return	the prefix to prepend
 */
String removeFromNamePrefix(MAssociationRole this) : 
	"remove";


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase operation name conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * Getter of the suffix which is added to the name of an operation.
 *
 * @return	the suffix to append
 */
String operationNameSuffix(MOperation this) : 
	switch {
		// checks if operation is an TYPO3 Extbase Controller Action and doesn't already ends with "Action"
		case isControllerAction() && !name.endsWith("Action") :
			"Action"
		default : 
			""
	};


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase Plugin and Module conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

String pluginTypePlugin() :
	"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_PLUGIN";


String pluginTypeContentElement() :
	"Tx_Extbase_Utility_Extension::PLUGIN_TYPE_CONTENT_ELEMENT";

	
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	GENERAL TYPO3 Extbase TypoScript conventions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/




