/**
 * Naming modifications of the model before generation of source code.  
 *  
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de>
 * @date	2011-04-27
 */

//	based on genesez meta model
import gcore;

// use TYPO3 Extbase profile access helper scripts
extension de::genesez::platform::typo3::extbase::profile::AccessHelper;

// use TYPO3 Extbase naming scripts
extension de::genesez::platform::typo3::extbase::convention::Naming;

// use TYPO3 Extbase access helper scripts which overrides
// PHP access helper scripts  which angain overrides
// common access helper scripts if script name is equal 
extension de::genesez::platform::typo3::extbase::scripts::AccessHelper;
extension de::genesez::platforms::php::scripts::AccessHelper;
extension de::genesez::platforms::common::AccessHelper;

// use common type mapping scripts
extension de::genesez::platforms::common::typemapping::TypeMappingNew;


/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 Extbase basic naming modifications 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - MPackage (MModel) - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void basicModelNaming(MModel this) :
	basicPackageNaming();
	

Void basicPackageNaming(MPackage this) :
	// perform basic naming modifications for all nested packages
	nestedPackage.basicPackageNaming() ->
	// perform basic naming modifications for all classifier; reject configuration
	classifier.select( e | e.isControllerPackageElement() || e.isModelPackageElement() || e.isRepositoryPackageElement() || e.isServicePackageElement() || e.isValidatorPackageElement() ).basicClassifierNaming() ->
	// perform basic naming modifications for all plugins and modules; reject classes
	classifier.typeSelect(MInterface).select( e | e.hasT3ExtbasePluginStereotype() ).basicPluginNaming() ->
	classifier.typeSelect(MInterface).select( e | e.hasT3ExtbaseModuleStereotype() ).basicModuleNaming();


/*
- - MClassifier - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/
	
Void basicClassifierNaming(MClass this) :
	// change name to TYPO3 Extbase complaint name
	setName( asTypeName() ) ->
	
	// perform basic naming modifications for all attributes and association roles
	property.typeSelect(MAttribute).basicAttributeNaming() ->
	property.typeSelect(MAssociationRole).basicAssociationRoleNaming() ->
	
	// perform basic naming modifications for all operations
	operation.basicOperationNaming();


Void basicClassifierNaming(MInterface this) :
	// change name to TYPO3 Extbase complaint name
	setName( asTypeName() ) ->
	
	// perform basic naming modifications for all operations
	operation.basicOperationNaming();


Void basicClassifierNaming(MClassifier this) :
	Void;


Void basicPluginNaming(MInterface this) :
	setName( asPluginName() );

	
Void basicModuleNaming(MInterface this) :
	setName( asModuleName() );

/*
- - MAttribute  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void basicAttributeNaming(MAttribute this) :
	// change name to TYPO3 Extbase complaint name 
	final && static && hasDefaultValue()
		? setName( asConstantName() )
		: setName( asAttributeName() );
	

/*
- - MAssociationRole  - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void basicAssociationRoleNaming(MAssociationRole this) :
	// change name to TYPO3 Extbase complaint name
	setName( asAttributeName() );
	
	
/*
- - MOperation  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void basicOperationNaming(MOperation this) :
	// change name to TYPO3 Extbase complaint name, 
	// if it is no a constructor or destructor 
	!isConstructor() && !isDestructor()
		? setName( asOperationName() )
		: Void ->
	
	// perform basic naming modifications for all parameters
	parameter.basicParameterNaming();


/*
- - MParameter  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

Void basicParameterNaming(MParameter this) :
	// change name to TYPO3 Extbase complaint name
	setName( asParameterName() );
	
	
/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TYPO3 Extbase configuration naming modifications 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
- - MPackage (MModel) - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
Void configurationModelNaming(MModel this) :
	configurationPackageNaming();
	

Void configurationPackageNaming(MPackage this) :
	// perform configuration naming modifications for all nested packages
	nestedPackage.configurationPackageNaming() ->
	// perform configuration naming modifications for all entities and value object
	classifier.select( e | e.isModelPackageElement() ).configurationClassifierNaming();
*/

/*
- - MClassifier - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*	
Void configurationClassifierNaming(MClass this) :
	// change name to TYPO3 Extbase complaint name
	//setName( asConfigurationTypeName() ) ->
	
	// perform configuration naming modifications for all attributes and association roles
	property.typeSelect(MAttribute).configurationAttributeNaming() ->
	property.typeSelect(MAssociationRole).configurationAssociationRoleNaming();


Void configurationClassifierNaming(MInterface this) :
	Void;


Void configurationClassifierNaming(MClassifier this) :
	Void;
*/

/*
- - MAttribute  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
Void configurationAttributeNaming(MAttribute this) :
	// change name to TYPO3 Extbase complaint name 
	final && static && hasDefaultValue()
		? Void
		: setName( asConfigurationAttributeName() );
*/	

/*
- - MAssociationRole  - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/*
Void configurationAssociationRoleNaming(MAssociationRole this) :
	// change name to TYPO3 Extbase complaint name
	setName( asConfigurationAttributeName() );
*/
