/**
 * Adds operation definitions to non abstract classes based on operation declarations 
 * in the generalization tree or realization tree.
 * 
 * The context is any classifier.
 * A list of operation definitions is collected from the whole generalization tree. This list
 * does NOT include constructors, destructors and abstract operations.
 * Realizable operation declarations are collected from the whole generalization tree (abstract operations) 
 * and the whole realization tree.
 * Both are checked for matches and all realizable operations which does not match are realized 
 * on the context classifier.
 * 
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
import gcore;

extension org::genesez::util::logging::Logging;
extension org::genesez::metamodel::core::util::AccessHelper;
extension org::genesez::metamodel::core::util::CloneElement;
extension org::genesez::metamodel::core::util::Conversion;

/**
 * Performs the model transformation to add operations of interfaces to classes.
 */
MPackage realize(MPackage this) :
	useLogger("org.genesez.metamodel.core.util.m2m.Realization") ->
	nestedPackage.realize() ->
	classifier.check() ->
	this;

/**
 * Processes the realization of operations of a classifier.
 */
MClassifier check(MClassifier this) :
	logDebug("Realize operations for " + fqmn()) ->
	metaType == MClass && !abstract
		? allRealizableOperations().realize( this, allRealizedOperations() )
		: this ->
	this;

/**
 * Realizes the specified operation on the specified classifier if not already realized.
 */
MClassifier realize(MOperation realizable, MClassifier this, List[MOperation] realized) :
	realized.exists( o|o.isRealized(realizable) ).logDebug("Realization check for '" + realizable.fqmn() + "' resolved: ") == true
		? this
		: realizable.cloneOperation( this ).setAbstract( false ) ->
	this;

/**
 * Checks if the first operation is an realization of the second operation.
 * 
 * Note: The realization is NOT conserned with any particular programming lanugage but rather specific to MOperation
 * and depends on a subset their features. This check includes:
 * - the name of the operation
 * - the count of parameters and their type
 * - the existence and if the type of the return parameter
 * You may use AOP functionality to adjust this behaviour to your needs.
 * 
 * @return	True, if the first operation is a realization of the second operation, otherwise false.
 */
boolean isRealized(MOperation realization, MOperation realizable) :
	realization.name == realizable.name
	&& realization.parameter.size == realizable.parameter.size
	&& realization.hasReturn() == realizable.hasReturn()
	&& realization.return.type == realizable.return.type
	&& realization.parameter.type == realizable.parameter.type;
