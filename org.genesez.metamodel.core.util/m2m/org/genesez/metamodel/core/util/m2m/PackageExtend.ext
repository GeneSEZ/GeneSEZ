/**
 * Extends specific package names to package hierarchy structures.
 * 
 * For example, given token = '.' and tokenRegExp = '\\.' and a package with name 'org.genesez.workflow',
 * the package structure:
 * - <container>
 *   - org.genesez.workflow
 *     ...
 * is modified to as follows:
 * - <container>
 *   - org
 *     - genesez
 *       - workflow
 *         ...
 * 
 * @author tobias haubold
 */
import gcore;

extension org::genesez::util::logging::Logging;
extension org::genesez::platform::common::Conversion;
extension org::genesez::platform::common::m2m::CreateTemplate;

/**
 * Finds and extends all extendible packages under the specified package hierarchy.
 * Note: the specified package is not extended!
 */
MPackage extend(MPackage this, String token, String tokenRegExp) :
	useLogger("org.genesez.metamodel.core.util.m2m.PackageExtend") ->
	nestedPackage.extendibles( token, {} )
		.toSet()
		.process( tokenRegExp ) ->
	this;

/**
 * Returns all packages to be extended.
 */
List[MPackage] extendibles(MPackage this, String token, List[MPackage] list) :
	isExtendible( token )
		? list.add( this )
		: this ->
	// walk tree
	nestedPackage.extendibles( token, list ) ->
	list;

/**
 * Returns true if this package is extendible, otherwise false.
 */
boolean isExtendible(MPackage this, String token) :
	name.contains( token );

/**
 * Extends the specified package using the specified regex to split its name into the package names.
 */
MPackage process(MPackage this, String tokenRegExp) :
	logDebug( "Extending package: " + fqn() ) ->
	( let parts = name.split( tokenRegExp ).trim() :
		buildHierarchy( parts.first(), parts.withoutFirst() )
	) ->
	this;

/**
 * Modifies the package hierarchy for the specified package.
 * It inserts a new package with the specified name into this and its nestingPackage.
 * It calls itself recursively with all specified remaining packages except the last.
 * The last entry of the specified remaining is used to rename the specified package.
 */
MPackage buildHierarchy(MPackage this, String name, List[String] remaining) :
	logDebug( "manipulate: " + fqn() + " with " + name) ->
	remaining.isEmpty
		? setName( name )
		: buildHierarchy(
			build( name ),
			remaining.first(),
			remaining.withoutFirst()
		) ->
	this;

MPackage build(MPackage this, String name) :
	nestingPackage.createPackage( this.xmiGuid + "_" + name, name ).nestedPackage.add( this ) ->
	this;
