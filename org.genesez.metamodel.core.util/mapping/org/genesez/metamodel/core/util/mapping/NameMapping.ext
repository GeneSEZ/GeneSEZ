/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;

/**
 * Frontend for gcore specific name mapping support inclusive type mapping.
 * It is sufficient to include this Xtend file for name and type mapping support.
 * 
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

extension org::genesez::mapping::name::NameMapping reexport;
extension org::genesez::metamodel::core::util::mapping::TypeMapping reexport;


// -- Model elements which are mapped by the internal name mapping and Xtend facade -------------------------


/**
 * Maps the name of an element using the internal name mapping and Xtend facade. 
 * 
 * @param	this	The element to map.
 * @return	The name of the element according internal name mapping.
 */
String name(MElement this) :
	mapInternalElementName();

/**
 * Maps the name of an element using the specified internal name mapping and Xtend facade. 
 * 
 * @param	this					The element to map.
 * @param	internalNamingContext	The internal naming context in which the element shall be mapped.
 * @return	The name of the element according specified internal name mapping.
 */
String name(MElement this, String internalNamingContext) :
	mapElementName( this, internalNamingContext );

/**
 * Maps the name of an element using the specified internal name mapping and Xtend facade. 
 * 
 * @param	this					The element to map.
 * @param	internalNamingContext	The internal naming context in which the element shall be mapped.
 * @param	externalNamingContext	The external naming context which has no effect for this script.
 * @return	The name of the element according specified internal name mapping.
 */
String name(MElement this, String internalNamingContext, String externalNamingContext) :
	mapElementName( this, internalNamingContext );


/**
 * Maps the name of a classifier using the internal name mapping and Xtend facade. 
 * 
 * @param	this	The classifier to map.
 * @return	The name of the classifier according internal name mapping.
 */
String name(MClassifier this) :
	mapInternalElementName();

/**
 * Maps the name of a classifier using the specified internal name mapping and Xtend facade. 
 * 
 * @param	this					The classifier to map.
 * @param	internalNamingContext	The internal naming context in which the classifier shall be mapped.
 * @return	The name of the classifier according specified internal name mapping.
 */
String name(MClassifier this, String internalNamingContext) :
	mapElementName( this, internalNamingContext );

/**
 * Maps the name of a classifier using the specified internal name mapping and Xtend facade. 
 * 
 * @param	this					The classifier to map.
 * @param	internalNamingContext	The internal naming context in which the classifier shall be mapped.
 * @param	externalNamingContext	The external naming context which has no effect for this script.
 * @return	The name of the classifier according specified internal name mapping.
 */
String name(MClassifier this, String internalNamingContext, String externalNamingContext) :
	mapElementName( this, internalNamingContext );


// -- Model elements which are mapped by the external name mapping and type mapping -------------------------

/**
 * Maps the name of an external using the external name mapping and type mapping. 
 * 
 * @param	this	The external to map.
 * @return	The name of the external according external name mapping.
 */
String name(MExternal this) :
	mapName( this, getExternalNamingContext() );

/**
 * Maps the name of an external using the external name mapping and type mapping. 
 * 
 * @param	this					The external to map.
 * @param	internalNamingContext	The internal naming context which has no effect for this script.
 * @return	The name of the external according external name mapping.
 */
String name(MExternal this, String internalNamingContext) :
	mapName( this, getExternalNamingContext() );

/**
 * Maps the name of an external using the specified external name mapping and type mapping. 
 * 
 * @param	this					The external to map.
 * @param	internalNamingContext	The internal naming context which has no effect for this script.
 * @param	externalNamingContext	The external naming context in which the external shall be mapped.
 * @return	The name of the external according specified external name mapping.
 */
String name(MExternal this, String internalNamingContext, String externalNamingContext) :
	mapName( this, externalNamingContext );


// -- Model elements which are not mapped by the name mapping and Xtend facade nor type mapping -------------

/**
 * The name of generics are not mapped by the name mapping.
 *
 * @param	this	The generic.
 * @return	The name (specification) of the specified generic.
 */
String name(MGeneric this) :
	this.specification;

/**
 * The name of generics are not mapped by the name mapping.
 *
 * @param	this					The generic.
 * @param	internalNamingContext	The internal naming context which has no effect for this script.
 * @return	The name (specification) of the specified generic.
 */
String name(MGeneric this, String internalNamingContext) :
	this.specification;

/**
 * The name of generics are not mapped by the name mapping.
 *
 * @param	this					The generic.
 * @param	internalNamingContext	The internal naming context which has no effect for this script.
 * @param	externalNamingContext	The external naming context which has no effect for this script.
 * @return	The name (specification) of the specified generic.
 */
String name(MGeneric this, String internalNamingContext, String externalNamingContext) :
	this.specification;


/**
 * The name of types are not mapped by the name mapping.
 * This script is just there for error free templates.
 *
 * @param	this	The type.
 * @return	The string represenation of the specified type.
 */
String name(MType this) :
	this;

/**
 * The name of types are not mapped by the name mapping.
 * This script is just there for error free templates.
 *
 * @param	this					The type.
 * @param	internalNamingContext	The internal naming context which has no effect for this script.
 * @return	The string represenation of the specified type.
 */
String name(MType this, String internalNamingContext) :
	this;

/**
 * The name of types are not mapped by the name mapping.
 * This script is just there for error free templates.
 *
 * @param	this					The type.
 * @param	internalNamingContext	The internal naming context which has no effect for this script.
 * @param	externalNamingContext	The external naming context which has no effect for this script.
 * @return	The string represenation of the specified type.
 */
String name(MType this, String internalNamingContext, String externalNamingContext) :
	this;