/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */


/**
 * Helper scripts to simplifies access to global variables of workflow information.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */


// -- Model and Package Information -------------------------------------------------------------------------


/**
 * Getter for the global variable 'useModelNameAsBasePackage' which is configured inside a workflow file and
 * returns the boolean value if the name of a model should be used as base package name.
 * Otherwise, if it is not configured, the boolean value 'false' will be returned as default.
 * 
 * @return	The value of the global variable, otherwise false.
 */
boolean globalVarUseModelNameAsBasePackage() : 
	GLOBALVAR useModelNameAsBasePackage != null 
		? GLOBALVAR useModelNameAsBasePackage
		: false;


/**
 * Getter for the global variable 'excludePackage' which is configured inside a workflow file and
 * returns the string representation of excluded packages during generation.
 * Otherwise, if it is not configured, an empty string will be returned as default.
 * 
 * @return	The value of the global variable, otherwise an empty string.
 * @todo:	Should be renamed to excludePackage(s).
 */
String globalVarIgnoredPackages() :
	GLOBALVAR excludePackage != null
		? GLOBALVAR excludePackage
		: "";


/**
 * Getter for the global variable 'excludeContentPackage' which is configured inside a workflow file and
 * returns the string representation of excluded content packages during generation.
 * Otherwise, if it is not configured, an empty string will be returned as default.
 * 
 * @return	The value of the global variable, otherwise an empty string.
 * @todo:	Should be renamed to excludeContentPackage(s).
 */
String globalVarIgnoredContentPackages() : 
	GLOBALVAR excludeContentPackage != null
		? GLOBALVAR excludeContentPackage
		: "";


// -- Properties and Property Accessors ---------------------------------------------------------------------


/**
 * Getter for the global variable 'usePropertyVisibilityForAccessors' which is configured inside a workflow file and
 * returns the boolean value if the visibility of a property should be used for the visibility of their accessor methods.
 * Otherwise, if it is not configured, the boolean value 'false' will be returned as default.
 * 
 * @return	The value of the global variable, otherwise false.
 */
boolean globalVarUsePropertyVisibilityForAccessors() : 
	GLOBALVAR usePropertyVisibilityForAccessors != null 
		? GLOBALVAR usePropertyVisibilityForAccessors
		: false;


/**
 * Getter for the global variable 'accessorsForStereotypes' which is configured inside a workflow file and
 * returns the string representation of stereotypes that should be used for controlling the generation of accessor methods.
 * That means, if a classifier has one of the stereotypes assigned, accessor methods of all owning properties are generated.
 * Otherwise, if it is not configured, the string representation of the stereotype 'entity' will be returned as default.
 * 
 * @return	The value of the global variable, otherwise the string 'accessor'.
 */
String globalVarAccessorsForStereotypes() : 
	GLOBALVAR accessorsForStereotypes != null 
		? GLOBALVAR accessorsForStereotypes
		: "entity";


// -- Association Handling ----------------------------------------------------------------------------------


/**
 * Getter for the global variable 'newAssociationHandling' which is configured inside a workflow file and
 * returns the boolean value if the new association handling should be used.
 * Otherwise, if it is not configured, the boolean value 'true' will be returned as default.
 * 
 * @return	The value of the global variable, otherwise true.
 * @todo:	Should be moved to Java platform.
 */
boolean globalVarNewAssociationHandling() : 
	GLOBALVAR newAssociationHandling != null 
		? GLOBALVAR newAssociationHandling
		: true;


// -- Description is missing --------------------------------------------------------------------------------


/**
 * Getter for the global variable 'fieldAccess' which is configured inside a workflow file and
 * returns the boolean value if annotations should be generated at a property or their accessor methods.
 * Otherwise if it is not configured, the boolean value 'true' will be returned as default.
 * 
 * @return	The value of the global variable, otherwise true.
 * @todo:	Should be moved to Java platform.
 * @todo: 	Should be removed.
 */
boolean globalVarFieldAccess() : 
	GLOBALVAR fieldAccess != null 
		? GLOBALVAR fieldAccess
		: true;


// -- Section Comments --------------------------------------------------------------------------------------


/**
 * Getter for the global variable 'generateSectionComments' which is configured inside a workflow file and
 * returns the boolean value if section comments should be generated.
 * Otherwise if it is not configured, the boolean value 'true' will be returned as default.
 * 
 * @return	The value of the global variable, otherwise true.
 * @todo: should be set to false
 */
boolean generateSectionComments() : 
	GLOBALVAR generateSectionComments != null 
		? GLOBALVAR generateSectionComments
		: true;
