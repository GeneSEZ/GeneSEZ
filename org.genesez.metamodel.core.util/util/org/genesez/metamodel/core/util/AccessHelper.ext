/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */

import gcore;


/**
 * Helper scripts to simplifies access to GeneSEZ Core meta model elements and
 * makes working with them more easier.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 * @author	Andre Pfl√ºger <andre.pflueger@fh-zwickau.de>
 */

extension org::genesez::metamodel::core::util::ExtensionMechanism;
extension org::genesez::metamodel::core::util::ModelNavigation;
extension org::genesez::util::logging::Logging;


// -- Multiplicity Elements (Properties, Parameters, Operations) --------------------------------------------


/**
 * Checks if a multiplicity is single-valued.
 * 
 * @return	True if the multiplicity is single-valued, otherwise false.
 * @api
 */
boolean isSingleValued(MMultiplicity this) :
	upperBound == 0 || upperBound == 1;


/**
 * Checks if a multiplicity is multi-valued.
 * 
 * @return	True if the multiplicity is multi-valued, otherwise false.
 * @api
 */
boolean isMultiValued(MMultiplicity this) :
	upperBound == -1 || upperBound > 1;


/**
 * Checks if a multiplicity has a fixed lower count of values.
 * 
 * @return	True if the multiplicity has a fixed lower count of values, otherwise false.
 * @api
 */
boolean hasFixedLowerBoundMultiplicity(MMultiplicity this) : 
	lowerBound > -1;


/**
 * Checks if a multiplicity has a fixed upper count of values.
 * 
 * @return	True if the multiplicity has a fixed upper count of values, otherwise false.
 * @api
 */
boolean hasFixedUpperBoundMultiplicity(MMultiplicity this) : 
	upperBound > -1;


// -- Packages ----------------------------------------------------------------------------------------------


// -- Getter for a Package --


/**
 * Returns the nested package tree of a package, i.e. nested packages and their nested packages.
 *
 * @return 	The list of nested packages of the package, otherwise an empty list.
 * @api
 */
List[MPackage] allNestedPackages(MPackage this) :
	{ nestedPackage }.addAll(
		nestedPackage.allNestedPackages()
	);


// -- Types -------------------------------------------------------------------------------------------------


// -- Getter for a Type --


/**
 * Returns the generalization tree of a classifier, i.e. super types and there super types.
 * 
 * @return 	The list of generalizations of the classifier, otherwise an empty list.
 * @api
 */
List[MType] allGeneralizations(MClassifier this) :
	{}.addAll(
		generalization.allGeneralizations()
	).addAll( generalization );


/**
 * Just there for error free templates.
 * Just called if a generalization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allGeneralizations(MClassifier)
 */
private List[MType] allGeneralizations(MType this) : 
	{};


// -- Checks for a Type --


/**
 * Checks if a type is a classifier.
 * 
 * @return	True if the type is a classifier, otherwise false.
 * @api
 */
boolean isClassifier(MType this) : 
	MClassifier.isInstance(this);


/**
 * Checks if a type is a class.
 * 
 * @return	True if the type is a class, otherwise false.
 * @api
 */
boolean isClass(MType this) : 
	metaType == MClass;


/**
 * Checks if a type is an interface.
 * 
 * @return	True if the type is an interface, otherwise false.
 * @api
 */
boolean isInterface(MType this) : 
	metaType == MInterface;


/**
 * Checks if a type is a data type.
 * 
 * @return	True if the type is a data type, otherwise false.
 * @api
 */
boolean isDataType(MType this) : 
	metaType == MDataType;


/**
 * Checks if a type is an enumeration.
 * 
 * @return	True if the type is an enumeration, otherwise false.
 * @api
 */
boolean isEnumeration(MType this) : 
	metaType == MEnumeration;


/**
 * Checks if a type is an external type.
 * 
 * @return	True if the type is an external type, otherwise false.
 * @api
 */
boolean isExternalType(MType this) : 
	metaType == MExternal;


/**
 * Checks if a type is a generic.
 *
 * @return	True if the type is a generic, otherwise false.
 * @api
 */
boolean isGenericType(MType this) : 
	metaType == MGeneric;


/**
 * Returns the name or the specification of a type.
 * 
 * @return	The name or specification of the type.
 * @todo: Check if this script is used after refactoring?
 */
String name(MType this) :
	switch (metaType) {
		case MExternal : ((MExternal) this).name
		case MGeneric : ((MGeneric) this).specification
		default : ((MClassifier) this).name
	};


// -- Classifiers -------------------------------------------------------------------------------------------


// -- Getter for a Package --

 
/**
 * Returns the list of classifier which are nested inside a package or its nested package tree.
 *
 * @return 	The list of nested classifier of the package, otherwise an empty list.
 * @api
 */
List[MClassifier] allNestedClassifiers(MPackage this) :
	{ classifier }.addAll(
		nestedPackage.allNestedClassifiers()
	);
	

// -- Getter for a Type --

 
/**
 * Returns the specialization tree of a type, i.e. sub classifier and there sub classifier.
 * 
 * @return 	The list of specializations of the type, otherwise an empty list.
 * @api
 */
List[MClassifier] allSpecializations(MType this):
	{ owningSpecializations() }.addAll(
		owningSpecializations().allSpecializations()
	);


/**
 * Returns the list of owning specializations of a type.
 * 
 * @return	The list of specializations of the classifier, otherwise an empty list.
 * @todo:	make unidirectional association between generalization and spezialization bidirectional to avoid this script.
 * @api
 */
List[MClassifier] owningSpecializations(MType this) :
	navModel().allNestedClassifiers().select( c | 
		c.generalization.contains( this ) 
	);


// -- Properties --------------------------------------------------------------------------------------------


// -- Getter for a Classifier --


/**
 * Returns the list of inherited and owning properties of an classifier.
 *
 * @return 	The list of properties of the classifier, otherwise an empty list.
 * @see allAttributes(MClassifier)
 * @see allAssociationRoles(MClassifier)
 * @api
 */
List[MProperty] allProperties(MClassifier this) :
	{ allAttributes() }.addAll(
		allAssociationRoles()
	);


/**
 * Returns the list of inherited and owning initializable properties of an classifier.
 * 
 * @return	The list of initializable properties of the classifier, otherwise an empty list.
 * @see allInitializableAttributes(MClassifier)
 * @see allInitializableAssociationRoles(MClassifier)
 */
List[MProperty] allInitializableProperties(MClassifier this) :
	{ allInitializableAttributes() }.addAll(
		allInitializableAssociationRoles()
	);


/**
 * Returns the list of owning initializable properties of an classifier.
 * 
 * @return	The list of initializable properties of the classifier, otherwise an empty list.
 * @see owningInitializableAttributes(MClassifier)
 * @see owningInitializableAssociationRoles(MClassifier)
 * @api
 */
List[MProperty] owningInitializableProperties(MClassifier this) :
	{ owningInitializableAttributes() }.addAll(
		owningInitializableAssociationRoles() 
	);


// -- Attributes --------------------------------------------------------------------------------------------


// -- Checks for a Classifier --

/**
 * Checks if a classifier has owning attributes.
 * 
 * @return	True if the classifier has owning attributes, otherwise false.
 * @api
 */
boolean hasAttributes(MClassifier this) : 
	property.exists( a | a.metaType == MAttribute );


/**
 * Checks if a classifier has owning initializable attributes.
 *
 * @return	True if the classifier has owning initializable attributes, otherwise false.
 */
boolean hasInitializableAttributes(MClassifier this) : 
	property.typeSelect( MAttribute ).exists( a | !a.static && !a.derived && !( a.final && a.hasDefaultValue() ) );


/**
 * Checks if a classifier has owning derived attributes.
 * 
 * @return	True if the classifier has derived attributes, otherwise false.
 * @api
 */
boolean hasDerivedAttributes(MClassifier this) : 
	property.typeSelect( MAttribute ).exists( a | a.derived );


// -- Getter for a Classifier --


/**
 * Returns the list of inherited and owning attributes of an classifier.
 *
 * @return 	The list of attributes of the classifier, otherwise an empty list.
 * @api
 */
List[MAttribute] allAttributes(MClassifier this) :
	{}.addAll(
		generalization.allAttributes()
	).addAll(
		realization.allAttributes()
	).addAll( property.typeSelect( MAttribute) );


/**
 * Just there for error free templates.
 * Just called if a generalization or realization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allAttributes(MClassifier)
 */
private List[MAttribute] allAttributes(MType this) : 
	{};


/**
 * Returns the list of inherited and owning initializable attributes of an classifier which 
 * are neither final nor derived.
 *
 * @return	The list of initializable attributes of the classifier, otherwise an empty list.
 * @api
 */
List[MAttribute] allInitializableAttributes(MClassifier this) :
	{}.addAll(
		generalization.allInitializableAttributes()
	).addAll( owningInitializableAttributes() );


/**
 * Just there for error free templates.
 * Just called if a generalization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allInitializableAttributes(MClassifier)
 */
private List[MAttribute] allInitializableAttributes(MType this) : 
	{};


/**
 * Returns the list of owning initializable attributes of an classifier which
 * are neither final nor derived.
 * 
 * @return	The list of initializable attributes of the classifier, otherwise an empty list.
 * @api
 */
List[MAttribute] owningInitializableAttributes(MClassifier this) :
	property.typeSelect(MAttribute).select( a | 
		!a.static && !a.derived && !( a.final && a.hasDefaultValue() )
	);


// -- Checks for an Attribute --


/**
 * Checks if an attribute has a default value
 * 
 * @return	True if the attribute has a default value, otherwise false.
 * @api
 */
boolean hasDefaultValue(MAttribute this) :
	defaultvalue.length > 0;


// -- Association Roles -------------------------------------------------------------------------------------


// -- Checks for a Classifier --


/**
 * Checks if a classifier has owning association roles.
 * 
 * @return	True if the classifier has owning association roles, otherwise false.
 * @api
 */
boolean hasAssociationRoles(MClassifier this) : 
	property.exists( ar | ar.metaType == MAssociationRole );


/**
 * Checks if a classifier has owning initializable association roles.
 *
 * @return	True if the classifier has owning initializable association roles, otherwise false.
 * @api
 */
boolean hasInitializableAssociationRoles(MClassifier this) : 
	property.typeSelect( MAssociationRole ).exists( ar | !ar.derived );


// -- Getter for a Classifier --


/**
 * Returns the list of inherited and owning association roles of an classifier.
 *
 * @return 	The list of association roles of the classifier, otherwise an empty list.
 * @api
 */
List[MAssociationRole] allAssociationRoles(MClassifier this) :
	{}.addAll(
		generalization.allAssociationRoles()
	).addAll(
		realization.allAssociationRoles()
	).addAll( property.typeSelect(MAssociationRole) );


/**
 * Just there for error free templates.
 * Just called if a generalization or realization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allAssociationRoles(MClassifier)
 */
private List[MAssociationRole] allAssociationRoles(MType this) : 
	{};


/**
 * Returns the list of inherited and owning initializable association roles of an classifier which 
 * are not derived.
 *
 * @return	The list of initializable association roles of the classifier, otherwise an empty list.
 * @api
 */
List[MAssociationRole] allInitializableAssociationRoles(MClassifier this) :
	{}.addAll(
		realization.allInitializableAssociationRoles()
	).addAll( owningInitializableAssociationRoles() );


/**
 * Just there for error free templates.
 * Just called if a realization of a classifier is no classifier.
 * 
 * @return	An empty list.
 * @see		allInitializableAssociationRoles(MClassifier)
 */
private List[MAssociationRole] allInitializableAssociationRoles(MType this) : 
	{};


/**
 * Returns the list of owning initializable association roles of an classifier which
 * are not derived.
 * 
 * @return	The list of initializable association roles of the classifier, otherwise an empty list.
 * @api
 */
List[MAssociationRole] owningInitializableAssociationRoles(MClassifier this) :
	property.typeSelect(MAssociationRole).select( ar | 
		!ar.derived
	);


// -- Checks for an Association Role --


/**
 * Checks if an association role has an opposite.
 * 
 * @return	True if the association role has an opposite, otherwise false.
 * @api
 */
boolean hasOpposite(MAssociationRole this) : 
	opposite != null;


/**
 * Checks if an association role has a qualifier.
 * 
 * @return	True if the association role has a qualifier, otherwise false.
 * @api
 */
boolean hasQualifier(MAssociationRole this) : 
	qualifier != null;


/**
 * Checks if the opposite of an association role has a qualifier.
 * 
 * @return	True if the opposite of the association role has a qualifier, otherwise false.
 * @api
 */
boolean hasOppositeQualifier(MAssociationRole this) :
	hasOpposite() && opposite.hasQualifier();


/**
 * Checks if an association role belongs to an association class.
 * It returns true, if the association role belongs to and acco
 * 
 * @return	True if the association role belongs to an association class, otherwise 
 * 			false if it is a plain association role and does not belongs to an association class.
 * @api
 */
boolean hasAssociationClass(MAssociationRole this) :
	association.associationClass != null;


/**
 * Returns the association class of an association role.
 * 
 * @return	The association class of the association role or 
 * 			null if the association role is a plain association and does not belongs to an association class.
 * @todo do we really need this?
 */
MClass getAssociationClass(MAssociationRole this) :
	association.associationClass;


/**
 * Check if a class is an association class.
 * 
 * @return	True if the class is an association class, otherwise false.
 * @api
 */
boolean isAssociationClass(MClass this) : 
	ownedAssociation != null;


/**
 * Check if a classifier is an association class.
 * 
 * @return	False.
 * @see		isAssociationClass(MClass)
 */
boolean isAssociationClass(MClassifier this) : 
	false;


// -- Operation ---------------------------------------------------------------------------------------------


// -- Checks for a Classifier --


/**
 * Checks if a classifier has owning operations including constructors and destructors.
 * 
 * @return	True if the classifier has owning operations, otherwise false.
 * @api
 */
boolean hasOperations(MClassifier this) : 
	!operation.isEmpty;


/**
 * Checks if a classifier has owning declared operations excluding constructors and destructors.
 * 
 * @return	True if the classifier has declared operations, otherwise false
 * @api
 */
boolean hasDeclaredOperations(MClassifier this) :
	operation.exists( o | !o.isConstructor() && !o.isDestructor() && o.abstract );


/**
 * Checks if a classifier has one or more constructors.
 * 
 * @return	True if the classifier has at least one constructors, otherwise false.
 * @see		isConstructor(MOperation)
 * @api
 */
boolean hasConstructors(MClassifier this) : 
	operation.exists( o | o.isConstructor() );


/**
 * Checks if a classifier has one or more destructors.
 * 
 * @return	True if the classifier has at least one destructors, otherwise false.
 * @see		isDestructor(MOperation)
 * @api
 */
boolean hasDestructors(MClassifier this) : 
	operation.exists( o | o.isDestructor() );


// -- Checks for an Operation --


/**
 * Checks if an operation is a constructor of a classifier, whereas the following properties are checked:
 *   - is the stereotype "Create" starting with a capital letter assigned to the specified operation or
 *   - is the stereotype "create" starting with a small letter assigned to the specified operation or
 *   - is the name of the classifier equals to the name of the specified operation
 * 
 * @return	True if the operation is a constructor of a classifier, otherwise false.
 * @api
 */
boolean isConstructor(MOperation this) :
	emHasStereotype("Create") || emHasStereotype("create") || classifier.name == name;


/**
 * Checks if an operation is a destructor of a classifier, whereas the following properties are checked:
 *   - is the stereotype "Destroy" starting with a capital letter assigned to the specified operation or
 *   - is the stereotype "destroy" starting with a small letter assigned to the specified operation or
 *   - does the name of the specified operation starting with the "~" character
 * 
 * @return	True if the operation is a destructor of a classifier, otherwise false.
 * @api
 */
boolean isDestructor(MOperation this) :
	emHasStereotype("Destroy") || emHasStereotype("destroy") || name.startsWith("~");


/**
 * Checks if an operation has a return parameter which is likewise not "void".
 * 
 * @return	True if the operation has a return parameter, otherwise false.
 * @todo:	Check if the void check is necessary.
 * @api
 */
boolean hasReturn(MOperation this) :
	return != null && return.type.name().toLowerCase() != "void";


/**
 * Checks if an operation has exceptions that can be thrown.
 * 
 * @return	True if the operation has exceptions, otherwise false.
 * @api
 */
boolean hasExceptions(MOperation this) : 
	!raisedException.isEmpty;


// -- Checks for a Parameter --


/**
 * Checks if a parameter has a default value.
 * 
 * @return	True if the parameter has a default value, otherwise false.
 * @api
 */
boolean hasDefaultValue(MParameter this) :
	defaultvalue.length > 0;


// -- Comments ----------------------------------------------------------------------------------------------


// -- Checks for an Element --


/**
 * Checks if an element has one or more comments.
 * 
 * @return	True if the element has at least one comment, otherwise false.
 * @api
 */
boolean hasComment(MElement this) :
	!ownedComment.isEmpty;
	

// -- Generics ----------------------------------------------------------------------------------------------


/**
 * Checks if a classifier has one or more generic parameters.
 * 
 * @return	True if the classifier has at least one generic parameter, otherwise false.
 * @api
 */
boolean hasGenericParameter(MClassifier this) :
	genericParameter.size > 0;


/**
 * Checks if an external type has one or more generic parameters.
 * 
 * @return	True if the external type has at least one generic parameter, otherwise false.
 * @api
 */
boolean hasGenericParameter(MExternal this) :
	genericParameter.size > 0;


/**
 * Checks if an operation has one or more generic parameter.
 * 
 * @return	True if the operation has at least one generic parameter, otherwise false.
 * @api
 */
boolean hasGenericParameter(MOperation this) :
	genericParameter.size > 0;


/**
 * Checks if a property has one or more generic realizations.
 * 
 * @return	True if the property has at least one generic realization, otherwise false.
 * @api
 */
boolean hasGenericRealization(MProperty this) :
	genericRealization.size > 0;
	

/**
 * Checks if a parameter has one or more generic realizations.
 * 
 * @return	True if the parameter has at least one generic realizations, otherwise false.
 * @api
 */
boolean hasGenericRealization(MParameter this) :
	genericRealization.size > 0;
