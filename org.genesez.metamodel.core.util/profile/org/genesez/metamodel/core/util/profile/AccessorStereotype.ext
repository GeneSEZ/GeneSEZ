/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides utility functions for the GeneSEZ uml profile.
 * 
 * @author	tobias haubold <toh@fh-zwickau.de> (maintainer)
 */
extension org::genesez::metamodel::core::util::Conversion;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::Helper;
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::profile::GenesezStandardProfile;
extension org::genesez::metamodel::core::util::profile::GenesezStandardAccessElement;
extension org::genesez::metamodel::core::util::GlobalVar;
extension org::genesez::util::logging::Logging;


/**
 * Returns true if a get access operation should be generated, otherwise false
 */
boolean emGenerateGetAccess(MAttribute this) :
	emGenerateAccessOperation( prAccessorGetter() );

/**
 * Returns true if a set access operations should be generated, otherwise false
 */
boolean emGenerateSetAccess(MAttribute this) :
	emGenerateAccessOperation( prAccessorSetter() );

/**
 * Returns true if a add access operation should be generated, otherwise false.
 */
boolean emGenerateAddAccess(MAttribute this) :
	emGenerateAccessOperation( prAccessorAdd() );

/**
 * Returns true if the property access operation remove should be generated for the specified property, otherwise false.
 */
boolean emGenerateRemoveAccess(MAttribute this) :
	emGenerateAccessOperation( prAccessorRemove() );

/**
 * Returns true if a get access operation should be generated, otherwise false
 */
boolean emGenerateGetAccess(MAssociationRole this) :
	!emHasStereotypeAssignment( prAccessor() ) || emGetTaggedBooleanValue( prAccessor(), prAccessorGetter() );

/**
 * Returns true if a set access operations should be generated, otherwise false
 */
boolean emGenerateSetAccess(MAssociationRole this) :
	multiplicity.isSingleValued()
		? !emHasStereotypeAssignment( prAccessor() ) || emGetTaggedBooleanValue( prAccessor(), prAccessorSetter() )
		: emGetTaggedBooleanValue( prAccessor(), prAccessorSetter() );

/**
 * Returns true if a add access operation should be generated, otherwise false.
 */
boolean emGenerateAddAccess(MAssociationRole this) :
	multiplicity.isMultiValued()
		? !emHasStereotypeAssignment( prAccessor() ) || emGetTaggedBooleanValue( prAccessor(), prAccessorAdd() )
		: false;

/**
 * Returns true if the property access operation remove should be generated for the specified property, otherwise false.
 */
boolean emGenerateRemoveAccess(MAssociationRole this) :
	multiplicity.isMultiValued()
		? !emHasStereotypeAssignment( prAccessor() ) || emGetTaggedBooleanValue( prAccessor(), prAccessorRemove() )
		: false;

/**
 * Returns false, just here for error free caller script.
 */
boolean emGenerateGetAccess(MProperty this) :
	false;

/**
 * Returns false, just here for error free caller script.
 */
boolean emGenerateSetAccess(MProperty this) :
	false;

/**
 * Returns false, just here for error free caller script.
 */
boolean emGenerateAddAccess(MProperty this) :
	false;

/**
 * Returns false, just here for error free caller script.
 */
boolean emGenerateRemoveAccess(MProperty this) :
	false;

/**
 * Checks if the specified access operation type should be generated for the specified property.
 * 
 * 1) if the property has the accessor stereotype, it is evaluated
 * 2) if the classifier has the accessor stereotype, it is evaluated and used for all properties
 * 3) if the classifier has a stereotype for which accessors should be generated, accessors are generated
 * 4) if the classifier is a MDataType and the accessor type is "get access", true is returned
 * 5) else no access operations are generated
 * 
 * @return	true, if an access operation should be generated, otherwise false
 */
boolean emGenerateAccessOperation(MProperty this, String accessOperationType):
	emHasAccessorStereotype()
		? emGetTaggedBooleanValue( prAccessor(), accessOperationType )
		: ( classifier.emHasAccessorStereotype()
			? classifier.emGetTaggedBooleanValue( prAccessor(), accessOperationType )
			: ( classifier.stereotype.exists( s|globalVarAccessorsForStereotypes().convertToList().contains( s.name ) )
				? true
				: (	classifier.metaType == MDataType && accessOperationType == prAccessorGetter()
					? true
					: false
				)
			)
		);


/**
 * Assigns the «accessor» stereotype and creates the specified tagged values.
 * 
 * @return	The property owning the tagged values.
 */
MProperty emAssignGeneSezAccessorStereotype(MProperty this, boolean get, boolean set, boolean add, boolean remove) :
	emDoAssignGeneSezAccessorStereotype( get, set, add, remove );

/**
 * Assigns the «accessor» stereotype and creates the specified tagged values.
 * 
 * @return	The classifier owning the tagged values.
 */
MClassifier emAssignGeneSezAccessorStereotype(MClassifier this, boolean get, boolean set, boolean add, boolean remove) :
	emDoAssignGeneSezAccessorStereotype( get, set, add, remove );

/**
 * Assigns the specified values to the tags of the «accessor» stereotype.
 * 
 * @return	The element owning the tagged values.
 */
private MElement emDoAssignGeneSezAccessorStereotype(MElement this, boolean get, boolean set, boolean add, boolean remove) :
	ensureTaggedValueExistence(
		navModel().emEnsureGeneSezAccessorStereotype().property.selectFirst( p|p.name == prAccessorGetter() ), get.toString()
	).owningElement
	.ensureTaggedValueExistence(
		navModel().emEnsureGeneSezAccessorStereotype().property.selectFirst( p|p.name == prAccessorSetter() ), set.toString()
	).owningElement
	.ensureTaggedValueExistence(
		navModel().emEnsureGeneSezAccessorStereotype().property.selectFirst( p|p.name == prAccessorAdd() ), add.toString()
	).owningElement
	.ensureTaggedValueExistence(
		navModel().emEnsureGeneSezAccessorStereotype().property.selectFirst( p|p.name == prAccessorRemove() ), remove.toString()
	).owningElement;

/**
 * Returns the «accessor» stereotype of the GeneSEZ profile with all of its tags.
 * It checks if the stereotype already exists and creates it if needed.
 */
MStereotype emEnsureGeneSezAccessorStereotype(MModel this) :
	anyStereotype.exists( s|s.name == prAccessor() )
		? anyStereotype.selectFirst( s|s.name == prAccessor() ).emEnsureGeneSezAccessorTags()
		: emEnsureGeneSezAccessorTags(
			ensureStereotypeExistence( prAccessorXmiGuid(), prAccessor() )
		);

/**
 * Ensures the existence of all tags of the «accessor» stereotype.
 * 
 * @return	The «accessor» stereotype.
 */
private MStereotype emEnsureGeneSezAccessorTags(MStereotype this) :
	ensureTagExistence( prAccessorGetter(), "Boolean" ).stereotype
		.ensureTagExistence( prAccessorSetter(), "Boolean" ).stereotype
		.ensureTagExistence( prAccessorAdd(), "Boolean" ).stereotype
		.ensureTagExistence( prAccessorRemove(), "Boolean" ).stereotype;

/**
 * Returns the xmi guid of the «accessor» stereotype.
 */
private String prAccessorXmiGuid() : "org.genesez.adapter.uml2.profile.accessor";

