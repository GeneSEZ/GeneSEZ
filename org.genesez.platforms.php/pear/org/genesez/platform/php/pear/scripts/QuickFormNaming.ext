/**
 * Naming conventions for source code, generated using the PEAR::HTML_QuickForm package
 * 
 * @author	tobias haubold
 * @date	2008-04-17
 */

// based on genesez meta model
import gcore;

extension org::genesez::platform::common::AccessHelper;
extension org::genesez::platform::common::Conversion;
extension org::genesez::platform::common::m2t::Helper;
extension org::genesez::platform::php::scripts::Naming reexport;
extension org::genesez::platform::php::scripts::Import;

/**
 * returns the relative file path + name for a form
 * @return	relative filepath with name of the file
 */
String asQuickFormFileName(MClassifier this) : basePath() + "/" + asQuickFormTypeName() + fileExtension();

/**
 * returns the type name of the form class
 * @context	the classifier to build a form class name from
 * @return	type name of the form class
 */
String asQuickFormTypeName(MClassifier this) : asTypeName() + "Form";

/**
 * returns the include path + filename
 * @return	include path with filename of the used classifier
 */
String asInclude(MClassifier this) : 
	includeBase()
		+ (includeBase().length == 0 ? "" : "/") + 
	dirPath()
		+ (dirPath().length == 0 ? "" :  "/") + 
	asTypeName() + fileExtension();

/**
 * returns the name of the create method of the form class
 * @return	the name of the create method
 */
String asQuickFormCreateMethodName() : "create";

/**
 * returns the name of the default values parameter of the create method of the form class
 * @return	the name of the default values parameter
 */
String asQuickFormCreateMethodDefaultValueParameterName() : "defaultValues";

/**
 * returns the name of the build object method of the form class
 * @return	the name of the build object method
 */
String asQuickFormBuildObjectMethodName(MClassifier this) : "build" + asTypeName();

/**
 * returns the name of the form parameter of the build object method of the form class
 * @return	the name of the form parameter
 */
String asQuickFormBuildObjectMethodFormParameterName() : "form";

/**
 * returns the name of the object parameter of the build object method of the form class
 * @return	name of the build object parameter
 */
String asQuickFormBuildObjectMethodObjectParameterName(MClassifier this) : name.toFirstLower();

/**
 * returns the name of the addCustomDefinition method of the form class
 * @return	name of the addCustomDefinition method
 */
String asQuickFormAddCustomDefinitionMethodName() : "addCustomDefinition";

/**
 * returns the name of the form parameter of the build object method of the form class
 * @return	name of the form parameter
 */
String asQuickFormAddCustomDefinitionMethodFormParameterName() : "form";

/**
 * returns the name of the html form
 * @context	the classifier to build an html formular name from
 * @return	name of the html form element
 */
String asQuickFormName(MClassifier this) : asQuickFormTypeName().toFirstLower();

/**
 * returns the html element name of a property
 * @context	the property to build an html element name from
 * @return	name of the html element
 */
String asQuickFormElementName(MProperty this) :	name.toFirstLower();
	
/**
 * returns the html element label of a property
 * @return	label of the html element
 */
String asQuickFormElementLabel(MProperty this) : name.toFirstLower() + labelSuffix();

/**
 * returns the name of an html password element for repeated input of the password
 * @return	name of the html password element for retyping
 */
String asQuickFormPasswordRepeatElementName(MProperty this) : name.toFirstLower() + retyped();

/**
 * returns the label of an html password element for repeated input of the password
 * @return	label of the html password element for retyping
 */
String asQuickFormPasswordRepeatLabel(MProperty this):
	retyped() + " " + name.toFirstLower() + labelSuffix();

/**
 * checks if a property is an html password element
 */
boolean isPasswordElement(MProperty this) : hasTaggedValue("html", "type", "PASSWORD");

/**
 * suffix for retyped elements names or prefix for retyped element labels
 */
private String retyped() : "Repeat";

/**
 * suffix for element labels
 */
private String labelSuffix() : ":";
