<?xml version="1.0" encoding="utf-8"?>

<workflow>
	
	<!-- 
		performs a model-to-text transformation (code generation)
		- includes beautifier for java + xml
		
		@deprecated		use the Java class {@link de.genesez.platforms.java.workflow.JavaGenerator} instead
		
		following parameters are required:
		==================================
		
		$rootTemplate		the root xpt-file where the generation starts
		$outputDir 			the path where the generated file are produced
		$proRegDir 			the path where the protected reagions are found
							(usually the same as the output directory
		
		$aspectTemplates	comma separated list of templates with aspect advices for XPand AOP
		$aspectScripts		comma separated list of scripts with aspect advices for Xtend AOP
		
		$typeMappingFile	name of the xml type mapping file
		$excludePackages	comma or semicola separated list with packages to exclude from code generation
							(full qualified package names, ', ' or '; ' are also permitted)
		$useModelNameAsBasePackage	boolean which indicates if the model name is used as base package
		$basePackage		the base package for source code artefacts
		$generateSectionComments	boolean flag which indicates if section comments are generated or not
		$disableAccessors	boolean which indicates if accessor methods are generated or not
		$useAccessorStereotype	boolean which indicates if the «accessor» stereotype is used to 
							distinct the generation of accessor methods
		$usePropertyVisibilityForAccessors	boolean which indicates if properties should be always private and 
							the visibility of the property is used as the visibility of the accessor method
		
		$configFile			xml file for configuration settings
	-->
	
	<property name="newAssociationHandling" value="true" />
	<property name="fieldAccess" value="true" />
	
	<!-- working with genesez models requires the genesez meta model -->
	<bean id="gcore" class="oaw.type.emf.EmfMetaModel">
		<metaModelPackage value="de.genesez.metamodel.gcore.GcorePackage" />
	</bean>
	<!-- bean id="gcore" class="org.eclipse.m2t.type.emf.EmfRegistryMetaModel" / -->
	<!-- bean id="gcore" class="oaw.type.emf.EmfMetaModel">
		<metaModelFile value="gcore.ecore" />
	</bean-->
	
	
	<component id="performM2T" class="de.genesez.platforms.common.workflow.xpand2.Generator" skipOnErrors="true">
		
		<metaModel idRef="gcore" />
		
		<!-- Template files are written in the utf-8 charset. -->
		<fileEncoding value="utf-8" />
		
		<!-- Define the type mapping file -->
		<typeMappingFile value="${typeMappingFile}" />
		
		<!-- exclude packages from code gen -->
		<globalVarDef name="excludePackages" value="'${excludePackages}'"/>
		
		<!-- boolean which indicates if the model name is used as base package -->
		<globalVarDef name="useModelNameAsBasePackage" value="${useModelNameAsBasePackage}"/>
		
		<!-- base package to use for generated artefacts -->
		<globalVarDef name="basePackage" value="'${basePackage}'"/>
		
		<!-- boolean which indicates if section comments are generated or not -->
		<globalVarDef name="generateSectionComments" value="${generateSectionComments}"/>
		
		<!-- boolean which indicates if old or new association handling is used -->
		<globalVarDef name="newAssociationHandling" value="${newAssociationHandling}"/>
		
		<!-- boolean which indicates if field or property access is used -->
		<globalVarDef name="fieldAccess" value="${fieldAccess}"/>
		
		<globalVarDef name="disableAccessors" value="${disableAccessors}"/>
		<globalVarDef name="useAccessorStereotype" value="${useAccessorStereotype}"/>
		<globalVarDef name="usePropertyVisibilityForAccessors" value="${usePropertyVisibilityForAccessors}"/>
		
		<!-- make config file accessible as global variable -->
		<globalVarDef name="configFile" value="'${configFile}'"/>
		
		<expand value="${rootTemplate}" />
		<genPath value="${outputDir}" />
		
		<!-- config AOP features -->
		<advices value="${aspectTemplates}"/>
		<extensionAdvices value="${aspectScripts}" />
		
		<!-- Config the protected regions resolver. -->
		<prSrcPaths value="${proRegDir}" />
		<prDefaultExcludes value="false" />
		<prExcludes value=".svn" />
		
		<!-- Use some beautifiers to beautify the generated code. -->
		<!-- beautifier 
			class="org.hybridlabs.source.formatter.JavaImportBeautifier"
			conventionFilePath="-filename-"
			organizeImports="true"
			format="true" -->
		<!-- use eclipse beautifier with eclipse settings -->
		<beautifier
			class="org.openarchitectureware.xpand2.output.JavaBeautifier"
			configFile="de/genesez/platforms/java/workflow/eclipse.java.formatter.settings.xml" />
		<beautifier
			class="de.genesez.platforms.java.m2t.JavaImportBeautifier" />
		<beautifier
			class="org.openarchitectureware.xpand2.output.XmlBeautifier" />
		
	</component>

</workflow>
