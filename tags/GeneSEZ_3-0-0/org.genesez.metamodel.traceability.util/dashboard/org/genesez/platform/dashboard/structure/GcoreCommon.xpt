«IMPORT gcore»

«REM»
	Provides templates to represent structural model elements, particularly by it's qualified name.
	@author tobias haubold
«ENDREM»

«EXTENSION org::genesez::metamodel::navigation::RequirementsTraceability»

«EXTENSION org::genesez::metamodel::core::util::AccessElement»
«EXTENSION org::genesez::metamodel::core::util::NavigateElement»

«EXTENSION org::genesez::platform::dashboard::AccessHelper»
«EXTENSION org::genesez::platform::dashboard::Dashboard»
«EXTENSION org::genesez::platform::dashboard::Naming»


«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«DEFINE Definition(String kind) FOR List[MType] -»
«IF size > 0 -»
	<dt>«kind»</dt>
	<dd>
		<div class="list">
		«EXPAND DefinitionEntry FOREACH this -»
		</div>
	</dd>
«ENDIF -»
«ENDDEFINE»

«DEFINE DefinitionEntry FOR MClassifier -»
<div class="entry">
	<div class="id"><a href="«linkTo()»" onclick="«clickOn()»">«name»</a></div>
	<div class="content">
		<div class="truncating">Scenarios («scenario().size»), Requirements («requirement().size»)</div>
	</div>
</div>
«ENDDEFINE»

«DEFINE DefinitionEntry FOR MType -»
<div class="entry">
	<div class="id">«name()»</div>
</div>
«ENDDEFINE»


«DEFINE ListItem FOR MElement -»
«EXPAND ListItem(false) -»
«ENDDEFINE»

«DEFINE ListItem(boolean withMetaType) FOR MElement -»
<div class="entry">
	«IF withMetaType -»<div class="id">«asMetaTypeNameSingular()»</div>«ENDIF -»
	<div class="content">
		<div class="truncating">«EXPAND QualifiedName -»</div>
	</div>
</div>
«ENDDEFINE»

«DEFINE Name FOR MPackage -»
	<a href="«linkTo()»" onclick="«clickOn()»">«name»</a>
«ENDDEFINE»

«DEFINE QualifiedName FOR MPackage -»
	«FOREACH packages() AS p -»
	<a href="«linkTo(p)»" onclick="«clickOn(p)»">«p.name»</a>
	<span class="separator">::</span>
	«ENDFOREACH -»
	«EXPAND Name -»
«ENDDEFINE»

«DEFINE Name FOR MClassifier -»
	<a href="«linkTo()»" onclick="«clickOn()»">«name»</a>
«ENDDEFINE»

«DEFINE QualifiedName FOR MClassifier -»
	«EXPAND QualifiedName FOR navPackage() -»
	<span class="separator">::</span>
	«EXPAND Name -»
«ENDDEFINE»

«DEFINE Name FOR MAssociationRole -»
	<span class="association">
	«EXPAND _SignatureName FOR name -»
	«EXPAND _SignatureType FOR type -»
	«EXPAND _SignatureMultiplicity FOR multiplicity -»
	</span>
	«IF hasQualifier() -»
		<span class="bracket">(</span>
		«EXPAND _SignatureName FOR "qualifier" -»
		«EXPAND _SignatureType FOR qualifier -»
		«EXPAND _SignatureMultiplicity FOR qualifierMultiplicity -»
		<span class="bracket">)</span>
	«ENDIF -»
	«IF hasAssociationClass() -»(
	<span class="name">association class</span>
	<span class="colon">:</span>
	<span class="type">
		«FOREACH association.associationClass.packages() AS p -»
		<a href="«linkTo(p)»" onclick="«clickOn(p)»">«p.name»</a>
		<span class="separator">::</span>
		«ENDFOREACH -»
		<a href="«association.associationClass.linkTo()»" onclick="«association.associationClass.clickOn()»">«association.associationClass.name»</a>
	</span>
	«ENDIF -»
«ENDDEFINE»

«DEFINE QualifiedName FOR MAssociationRole -»
	«EXPAND QualifiedName FOR classifier -»
	<span class="separator">::</span>
	«EXPAND Name -»
«ENDDEFINE»

«DEFINE QualifiedName FOR MOperation -»
	«FOREACH classifier.packages() AS p -»
	<a href="«linkTo(p)»" onclick="«clickOn(p)»">«p.name»</a>
	<span class="separator">::</span>
	«ENDFOREACH -»
	<a href="«linkTo(classifier)»" onclick="«clickOn(classifier)»">«classifier.name»</a>
	<span class="separator">::</span>
	«IF name == "" || name == null -»
	<span class="unnamedOperation">unnamed</span>
	«ELSE -»
	<span class="operation">«name»</span>
	«ENDIF -»
	<span class="bracket">(</span>
	«FOREACH parameter AS p SEPARATOR "<span class=\"separator\">, </span>" -»
		«EXPAND _SignatureName FOR p.name -»
		«EXPAND _SignatureType FOR p.type -»
		«EXPAND _SignatureMultiplicity FOR p.multiplicity -»
	«ENDFOREACH -»
	<span class="bracket">)</span>
	<span class="colon">:</span>
	«IF hasReturn() -»
		«EXPAND _SignatureType FOR return.type -»
	«ENDIF -»
«ENDDEFINE»

«DEFINE Name FOR MParameter -»
	«EXPAND _SignatureName FOR name -»
	«EXPAND _SignatureType FOR type -»
	«EXPAND _SignatureMultiplicity FOR multiplicity -»
«ENDDEFINE»

«DEFINE QualifiedName FOR MParameter -»
	«EXPAND QualifiedName FOR operation.classifier -»
	<span class="separator">::</span>
	«IF operation.name == "" || operation.name == null -»
	<span class="noname">unnamed</span>
	«ELSE -»
	<span class="name">«operation.name»</span>
	«ENDIF -»
	<span class="bracket">(</span>
	«FOREACH operation.parameter AS param SEPARATOR "<span class=\"separator\">, </span>" -»
		<span class="«IF this == param -»parameter«ENDIF -»">
		«EXPAND _SignatureName FOR param.name -»
		«EXPAND _SignatureType FOR param.type -»
		«EXPAND _SignatureMultiplicity FOR param.multiplicity -»
		</span>
	«ENDFOREACH -»
	<span class="bracket">)</span>
	<span class="colon">:</span>
	«IF operation.hasReturn() -»
		«EXPAND _SignatureType FOR operation.return.type -»
	«ENDIF -»
«ENDDEFINE»

«DEFINE Name FOR MAttribute -»
	<span class="attribute">
	«EXPAND _SignatureName FOR name -»
	«EXPAND _SignatureType FOR type -»
	«EXPAND _SignatureMultiplicity FOR multiplicity -»
	</span>
«ENDDEFINE»

«DEFINE QualifiedName FOR MAttribute -»
	«EXPAND QualifiedName FOR classifier -»
	<span class="separator">::</span>
	«EXPAND Name -»
«ENDDEFINE»

«DEFINE QualifiedName FOR MElement -»
	<span class="name">MElement «name»</span>
«ENDDEFINE»

«DEFINE Name FOR MProperty -»
	«REM» marker for error free templates «ENDREM»
«ENDDEFINE»


«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«DEFINE _SignatureName FOR String -»
		<span class="name">«this»</span>
		<span class="colon">:</span>
«ENDDEFINE»

«DEFINE _SignatureType FOR MClassifier -»
		«FOREACH packages() AS p -»
		<a href="«linkTo(p)»" onclick="«clickOn(p)»">«p.name»</a>
		<span class="separator">::</span>
		«ENDFOREACH -»
		<span class="type"><a href="«linkTo(this)»">«name»</a></span>
«ENDDEFINE»

«DEFINE _SignatureType FOR MType -»
		<span class="type">«name()»</span>
«ENDDEFINE»

«DEFINE _SignatureMultiplicity FOR MMultiplicity -»
		«IF upperBound == -1 -»
		<span class="multiplicity">[«lowerBound»..*]</span>
		«ELSEIF upperBound != 1 -»
		<span class="multiplicity">[«lowerBound»..«upperBound»]</span>
		«ELSE -»
		«REM» no multiplicity for 1 «ENDREM»
		«ENDIF -»
«ENDDEFINE»
