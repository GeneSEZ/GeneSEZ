import uml;
import ecore;

/**
 * Begin of the model generation, it sets also a start time
 */
Model start() :
	startTime() ->
	createStructure();

/**
 * Creates the complete model with its structure
 */
private Model createStructure() :
	let m = createModel() :
	m.setName( (String) GLOBALVAR name ) ->
	getInterfaces().forAll(e|createInterfaceRealization(e, getNumber(rPi()))) ->
	createHierarchy(getNumber(cHt()), getNumber(sPc()), getNumber(cHd()), false) ->
	createHierarchy(getNumber(iHt()), getNumber(sPi()), getNumber(iHd()), true) ->
	createReferences(getNumber(references()), getNumber(rPc())) ->
	getClassesForAssociationClasses(getNumber(aC())).forAll(e|createAssociationClass(e)) ->
	output() ->
	m;
		
/**
 * creates the MODEL recursively
 */
private create Model createModel() :
	createPackage(this, getNumber(packages()), getNumber(pHd())+1) ->
	this;

// -- Contained in Model/Packages: PACKAGES -- //

/*
 * Checks whether i and d are greater than zero, if so it creates a package
 * @param p the current Package
 * @param i the amount of packages to create on this hierarichal level
 * @param d the depth available for packages
 * @return true if i or d is zero
 */
private Boolean createPackage( Package p, Integer i, Integer d ) :
	i > 0 && d > 0 ?
		(p.nestedPackage.add( createPackage(getName("packages"), d) ) ->
		createPackage(p, i-1, d)) : true;
	
/*
 * Creates a package
 * @param name the name of the package
 * @param d, the current package depth
 * @return a package with the given name and maybe subpackages, subclasses and interfaces
 */	
private create Package createPackage(String name, Integer d) :
	setName( name ) ->
	// addPackage( this ) ->
	createClass(this, getNumber(cPp())) ->
	createInterface(this, getNumber(iPp())) ->
	createPackage(this, getNumber(pPp()), d-1) ->
	this;

// -- Contained in packages: CLASSES -- //

/**
 * Checks whether i is greater than zero, if so it creates a class
 * @param p the current Package
 * @param i the amount of classes to create in this package
 * @return true, if i is zero.
 */
private Boolean createClass(Package p, Integer i) :
	i > 0 ?
		(p.createOwnedClass(getName("classes"), false).describeClass() ->
		createClass(p, i-1)) : true;

/**
 * Used to create an association class for each element in a list.
 * @param c the start class for the association class
 * @return true
 */
private Boolean createAssociationClass(StructuredClassifier c) :
	createAssociationClass(getName("associationClasses"), c) ->
	true;

/**
 * Creates the actual association class and describes it (operations and attributes)
 * @param name the name of the association class
 * @param c the start Class for the association class
 */ 
private create AssociationClass createAssociationClass(String name, StructuredClassifier c) :
	setName( name ) ->
	setupAssociation(this, c) ->
	// createAttribute(this, getNumber(aPc())) ->
	describeClass(this) ->
	this;

/**
 * Creates attributes and operations on the class
 * @param class the Class to describe
 */ 
private describeClass(Class class) :
	addType(class) ->
	createAttribute(class, getNumber(aPc())) ->
	createOperation(class, getNumber(oPc()));
	
// -- Contained in packages: INTERFACES -- //

/**
 * Checks whether i is greater than zero, if so it creates an interface
 * @param p the current Package
 * @param i the amount of interfaces to create in this package
 * @return true, if i is zero.
 */
private Boolean createInterface(Package p, Integer i) :
	i > 0 ?
		(p.createOwnedInterface(getName("interfaces")).describeInterface() ->
		createInterface(p, i-1)) : true;

/**
 * Creates operations on the interface and creates interface realizations
 * @param interface the Interface to describe
 */ 
private describeInterface (Interface interface) :
	addInterface(interface) ->
	createOperation(interface, getNumber(oPc()));// ->

// -- used with Interfaces: INTERFACE_REALIZATIONS -- //

/**
 * Checks whether i is greater than zero, if so it creates an interface realization
 * @param p the current Package
 * @paren in the interface that should be realized
 * @param i the amount of interface realizations for this interface.
 * @return true, if i is zero.
 */
private Boolean createInterfaceRealization(Interface in, Integer i) :
	i > 0 ?
		(createInterfaceRealization( getName("realizations"), in) ->
		createInterfaceRealization(in, i-1)) : true;

/**
 * Creates an interface-realization on an existing class,
 * if not enough classifier exist it creates a new one
 * @param name the name of the realization
 * @param p the current package
 * @param in the interface that should be realized
 * @param i the amount of interface realizations for this interface
 */		
private create InterfaceRealization createInterfaceRealization(String name, Interface in) :
	setImplementingClassifier(getRealizationClass(name, in)) ->
	setContract(in) ->
	this;

// -- Contained in classes: ATTRIBUTES -- //

/**
 * Checks whether i is greater than zero, if so it creates an attribute
 * @param c the current class
 * @param i the amount of attributes to create in this class
 * @return true, if i is zero.
 */
private Boolean createAttribute(Class c, Integer i) :
	i > 0 ?
		(c.ownedAttribute.add( createAttribute(getName("attributes")) ) ->
		createAttribute(c, i-1)) : true;		

/**
 * Creates an attribute
 * @param name the name of the attribute
 * @return the attribute with random type (void not possible)
 */	
private create Property createAttribute(String name) :
	setName( name ) ->
	setType( getType(false) ) ->
	this;

// -- Contained in classes/interfaces: OPERATIONS -- //

/**
 * Checks whether i is greater than zero, if so it creates an operation
 * @param in the current interface
 * @param i the amount of attributes to create in this interface
 * @return true, if i is zero.
 */
private Boolean createOperation(Interface in, Integer i) :
	i > 0 ?
		(in.ownedOperation.add( createOperation(getName("operations")) ) ->
		createOperation(in, i-1)) : true;

/**
 * Same as {@link #createOperation(Interface,Integer)} but for classes
 */
private Boolean createOperation(Class c, Integer i) :
	i > 0 ?
		(c.ownedOperation.add( createOperation(getName("operations")) ) ->
		createOperation(c, i-1)) : true;

/**
 * Creates an operation
 * @param name the name of the operation
 * @return the operation with random type (void possible)
 */	
private create Operation createOperation(String name) :
	setName( name ) ->
	setType( getType(true) ) ->
	// addOperation(this) ->
	createParameter(this, getNumber(pPo())) ->
	this;
	
// -- Contained in operation: PARAMETER -- //

/**
 * Checks whether i is greater than zero, if so it creates an parameter
 * @param o the current operation
 * @param i the amount of parameters to create on this operation
 * @return true, if i is zero.
 */
private Boolean createParameter(Operation o, Integer i) :
	i > 0 ?
		(o.ownedParameter.add( createParameter(getName("parameters")) ) ->
		createParameter(o, i-1)) : true;

/**
 * Creates an parameter
 * @param name the name of the parameter
 * @return the parameter with random type (void not possible)
 */	
private create Parameter createParameter(String name) :
	setName( name ) ->
	setType( getType(false) ) ->
	this;

// -- END OF STRUCTURE -- //

/**
 * Adjusts a given number.
 * @value the number to adjust
 * @return the adjusted number
 */
private Integer getNumber(Integer value) :
	getNumber(value,random(),offset(),isPercent());

// -- JAVA CALLS -- //

// sets the start time
Void startTime() : JAVA
	org.genesez.tools.modelcreator.CountHelper.setStartTime();

// gets a generic name for the given Stringtype
String getName(String type) : JAVA
	org.genesez.tools.modelcreator.CountHelper.getName(java.lang.String);

// Adjusts a given value, with randomization and absolute/percentage offset 
Integer getNumber(Integer value, Integer random, Integer offset, Boolean isPercent) : JAVA	
	org.genesez.tools.modelcreator.CountHelper.getNumber(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Boolean);

// Writes the counts on the console
Void output() : JAVA
	org.genesez.tools.modelcreator.CountHelper.output();

// gets a random type (or void if possible)
Type getType(Boolean voidPossible) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.getRandomType(java.lang.Boolean);

// adds a class to a list
Void addType( Class class ) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.addClass(org.eclipse.uml2.uml.Class);

// adds an interface to a list
Void addInterface( Interface interface ) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.addInterface(org.eclipse.uml2.uml.Interface);

// gets a list of interfaces
List[Interface] getInterfaces() : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.getInterfaces();

// gets a class that's used as realization for a given interface
Class getRealizationClass( String name, Interface in ) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.getRealizationClass(java.lang.String, org.eclipse.uml2.uml.Interface);

// creates associations between classifiers
Void createReferences(Integer references, Integer perClass) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.createReferences(java.lang.Integer, java.lang.Integer);

// creates a hierarchy for interfaces or classes	
Void createHierarchy(Integer amount, Integer sPc, Integer depth, Boolean forInterface) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.createHierarchy(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Boolean);

// gets a selection for association classes
List[Class] getClassesForAssociationClasses(Integer amount) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.getClassesForAssociationClasses(java.lang.Integer);

// sets up an association.
Void setupAssociation(Association asso, StructuredClassifier c) : JAVA
	org.genesez.tools.modelcreator.ModelStoreHelper.setupAssociation(org.eclipse.uml2.uml.Association, org.eclipse.uml2.uml.StructuredClassifier);

/*
 * The GlobalVars for configuration
 */
cached Integer packages() : GLOBALVAR headPackages;
cached Integer pHd() : GLOBALVAR packageHierarchyDepth;
cached Integer pPp() : GLOBALVAR packagesPerPackage;

cached Integer cPp() : GLOBALVAR classesPerPackage;
cached Integer iPp() : GLOBALVAR interfacesPerPackage;
cached Integer rPi() : GLOBALVAR realizationsPerInterface;
cached Integer aPc() : GLOBALVAR attributesPerClass;
cached Integer oPc() : GLOBALVAR operationsPerClass;
cached Integer pPo() : GLOBALVAR parametersPerOperation;

cached Integer cHt() : GLOBALVAR classHierarchyTrees;
cached Integer cHd() : GLOBALVAR classHierarchyDepth;
cached Integer sPc() : GLOBALVAR specializationsPerClass;

cached Integer iHt() : GLOBALVAR interfaceHierarchyTrees;
cached Integer iHd() : GLOBALVAR interfaceHierarchyDepth;
cached Integer sPi() : GLOBALVAR specializationsPerInterface;

cached Integer rPc() : GLOBALVAR associationsPerClass;
cached Integer aC() : GLOBALVAR associationClasses;

cached Integer references() : GLOBALVAR associations;
cached Integer random() : GLOBALVAR random;
cached Integer offset() : GLOBALVAR offset;
cached Boolean isPercent() : GLOBALVAR offsetInPercent;
