import gcore;
import greq;

/**
 * Helper functions to access model information.
 * 
 * @author tobias haubold
 */

extension org::genesez::metamodel::navigation::RequirementsTraceability;
extension org::genesez::platform::common::AccessHelper;

List[MPackage] packages(MPackage this) : nestingPackage.packages({});
List[MPackage] packages(MClassifier this) : package().packages( {} );

List[MPackage] packages(MPackage this, List[MPackage] packages) :
	metaType == MModel
	? packages.reverse()
	: nestingPackage.packages(packages.add(this).toList());


cached List[MPackage] allPackages(MPackage this) :
	addAllPackages({});
	
cached List[MPackage] addAllPackages(MPackage this, List[MPackage] packages) :
	packages.addAll(nestedPackage) ->
	nestedPackage.addAllPackages(packages) ->
	packages;
	
cached List[MClassifier] allClassifiers(MModel this) :
	allPackages().allClassifiers();

cached List[MClassifier] allClassifiers(MPackage this) :
	addAllClassifier({});

cached List[MClassifier] addAllClassifier(MPackage this, List[MClassifier] classifiers) :
	classifiers.addAll(classifier) ->
	nestedPackage.addAllClassifier(classifiers) ->
	classifiers;

cached List[MOperation] allOperations(MModel this) :
	allClassifiers().operation;
	
cached List[MParameter] allParameters(MModel this) :
	allOperations().parameter;
	
cached List[MAttribute] allAttributes(MModel this) :
	allClassifiers().property.typeSelect(MAttribute);
	
cached List[MAssociationRole] allAssociationRoles(MModel this) :
	allClassifiers().property.typeSelect(MAssociationRole);

cached List[MClassifier] specializations(MClassifier this) :
	model().allClassifiers().select(e|e.generalization.contains(this));


// - - satisfied + unsatisfied gcore elements

cached List[MClassifier] classifierWithSpecification(MModel this) :
	allClassifiers().select( e|e.isSpecified() );

cached List[MAssociationRole] associationRolesWithSpecification(MModel this) :
	allAssociationRoles().select( e|e.isSpecified() );

cached List[MOperation] operationsWithSpecification(MModel this) :
	allOperations().select( e|e.isSpecified() );

cached List[MParameter] parametersWithSpecification(MModel this) :
	allParameters().select( e|e.isSpecified() );

cached List[MAttribute] attributesWithSpecification(MModel this) :
	allAttributes().select( e|e.isSpecified() );


cached List[MElement] structuralElementsWithoutSpecification(MModel this) :
	{}.addAll( classifierWithoutSpecification() )
	.addAll( associationRolesWithoutRequirements() )
	.addAll( operationsWithoutSpecification() )
	.addAll( parametersWithoutRequirements() )
	.addAll( attributesWithoutRequirements() );

cached List[MClassifier] classifierWithoutSpecification(MModel this) :
	allClassifiers().select( c|!c.isSpecified() );

cached List[MOperation] operationsWithoutSpecification(MModel this) :
	allOperations().select( o|!o.isSpecified() );

cached List[MParameter] parametersWithoutRequirements(MModel this) :
	allParameters().select( p|!p.isSpecified() );

cached List[MAttribute] attributesWithoutRequirements(MModel this) :
	allAttributes().select( a|!a.isSpecified() );

cached List[MAssociationRole] associationRolesWithoutRequirements(MModel this) :
	allAssociationRoles().select( ar|!ar.isSpecified() );


boolean isSpecified(MClassifier this) : !scenarioTrace().isEmpty || !requirementTrace().isEmpty;
boolean isSpecified(MOperation this) : !scenarioStepTrace().isEmpty || !requirementTrace().isEmpty;
boolean isSpecified(MElement this) : !requirementTrace().isEmpty;


// - - satisfied + unsatisfied greq elements

cached List[RScenario] scenariosWithSatisfaction(RModel this) :
	scenario.select( e|e.isSatisfied() ).sortBy( e|e.sort() );

cached List[RScenarioStep] scenarioStepsWithSatisfaction(RModel this) :
	scenario.step.select( e|e.isSatisfied() ).sortBy( e|e.sort() );

cached List[RRequirement] requirementsWithSatisfaction(RModel this) :
	requirement.select( e|e.isSatisfied() ).sortBy( e|e.sort() );


cached List[RScenario] scenariosWithoutSatisfaction(RModel this) :
	scenario.select( e|!e.isSatisfied() ).sortBy( e|e.sort() );

cached List[RScenarioStep] scenarioStepsWithoutSatisfaction(RModel this) :
	scenario.step.select( e|!e.isSatisfied() ).sortBy( e|e.sort() );

cached List[RRequirement] requirementsWithoutSatisfaction(RModel this) :
	requirement.select( e|!e.isSatisfied() ).sortBy( e|e.sort() );


boolean isSatisfied(RScenario this) : !classifier().isEmpty;
boolean isSatisfied(RScenarioStep this) : !operation().isEmpty;
boolean isSatisfied(RRequirement this) : !element().isEmpty;
Object sort(RScenario this) : precedence;
Object sort(RScenarioStep this) : scenario.precedence;
Object sort(RRequirement this) : precedence;


boolean isSpecification(Object this) : metaType.isAssignableFrom(RSpecObject);
boolean isStructuralElement(Object this) : metaType.isAssignableFrom(MElement);

boolean isUseful(Void this) : false;
boolean isUseful(String this) : trim().length > 0;
