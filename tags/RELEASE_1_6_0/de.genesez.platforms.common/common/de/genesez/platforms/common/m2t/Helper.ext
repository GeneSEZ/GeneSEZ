/**
 * Helper function for M2T Transformations
 * 
 * currently provided:
 * - filter for lists of packages to simply exclude packages from code generation
 * - the base package which is used for generation
 * - flag for using the model name as base package for generation
 * - flag which indicates if section comments are generated or not
 * 
 * @author	tobias haubold
 * @date	2008-04-18
 */

// based on genesez meta model
import gcore;

extension de::genesez::platforms::common::AccessHelper;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter for the 'base path' based on the 'base package'
 * @return	value of the base path
 */
String basePath(MClassifier this) : owningPackage.basePath();

/**
 * getter for the 'base path' based on the 'base package'
 * @return	value of the base path
 */
String basePath(MPackage this) : basePackage().replaceAll("\\.", "/");

/**
 * getter for the 'base package' which is used for generation
 * evaluates the global variables 'useModelNameAsBasePackage' and 'basePackage',
 * which are configured in the workflow component
 * @return	the base package to use for code generation or an empty string
 */
String basePackage(MClassifier this) :
	owningPackage.basePackage(); 

/**
 * getter for the 'base package' which is used for generation
 * evaluates the global variables 'useModelNameAsBasePackage' and 'basePackage',
 * which are configured in the workflow component
 * @return	the base package to use for code generation or an empty string
 */
String basePackage(MPackage this) : 
	useModelNameAsBasePackage()
		? getModel().name
		: ( GLOBALVAR basePackage == null ? "" : GLOBALVAR basePackage );

/**
 * checks if the model name should be used as base package
 * @return	true, if the model name should be used as base package, otherwise false
 */
private boolean useModelNameAsBasePackage() : 
	GLOBALVAR useModelNameAsBasePackage == null ? false : GLOBALVAR useModelNameAsBasePackage;

/**
 * getter for the global variable 'generateSectionComments' which is configured in the workflow component
 * if it's not configured, 'true' is used as standard
 * @return	value of the global variable 'generateSectionComments' or 'true'
 */
boolean generateSectionComments() : 
	GLOBALVAR generateSectionComments == null ? true : GLOBALVAR generateSectionComments;

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	filters a list of packages to exclude them from code generation
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*/

/**
 * getter accessor for the global variable 'excludePackages', configured in the workflow component
 * @return	value of the global variable 'excludePackages'
 */
String ignoredPackages() : (String) GLOBALVAR excludePackages;

/**
 * rejects all packages contained in the 'excludePackages' variable from the specified list of packages
 * @context	list of packages to filter
 * @return	list of packages without the packages to ignore
 */
List[MPackage] rejectIgnoredPackages(List[MPackage] this) :
	rejectIgnoredPackages( ignoredPackages() );

/**
 * rejects all packages from the given list, specified in the given string as a comma 
 * or semicolon separated list with full qualified package names
 * @param	packages		list of packages to filter
 * @param	ignoredPackages	comma or semicola separated list with full qualified package names
 * @return	list of packages without the packages to ignore
 */
private List[MPackage] rejectIgnoredPackages(List[MPackage] packages, String ignoredPackages) :
	JAVA de.genesez.platforms.common.m2t.TransUtils.rejectIgnoredPackages(java.util.List, java.lang.String);

