/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides support to deal with access operations based on the stereotype «accessor».
 * It creates get and set access operations if desired.
 * 
 * @todo	association access operations for associations on realized interfaces
 * 
 * @author	andre pflueger
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::Conversion;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::metamodel::core::util::CloneElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::Helper;
extension org::genesez::metamodel::core::util::GlobalVar;
extension org::genesez::metamodel::core::util::profile::GeneSEZProfile;
extension org::genesez::metamodel::core::util::profile::AccessorStereotype;
extension org::genesez::platform::java::util::Naming;
extension org::genesez::util::logging::Logging;


/**
 * Processes property accesss operations by delegating the execution to containment objects.
 * @return	the context object itself
 * @api
 */
MPackage prepare(MPackage this) :
	classifier.do() ->
	nestedPackage.prepare() ->
	this;

/**
 * Delegates execution to containment objects.
 * @return	the context object itself
 */
MClassifier do(MClassifier this) :
	allRealizations().typeSelect(MInterface).property.typeSelect(MAssociationRole).do( this ) ->
	property.typeSelect(MAssociationRole).do( this ) ->
	property.typeSelect(MAttribute).do( this ) ->
	classifier.do() ->
	this;

/**
 * Processes property access operations based on metatype (attribute, association) and stereotype «accessor».
 * @return	the context object itself
 */
MProperty do(MProperty this, MClassifier container) :
	emGenerateGetAccess()
		? emEnsureGetAccessOperation( container )
		: this ->
	emGenerateSetAccess()
		? emEnsureSetAccessOperation( container )
		: this ->
	multiplicity.isMultiValued() && emGenerateAddAccess()
		? emEnsureAddAccessOperation( container )
		: this ->
	multiplicity.isMultiValued() && emGenerateRemoveAccess()
		? emEnsureRemoveAccessOperation( container )
		: this ->
	this;

/**
 * Ensures the existence of a get access operation for the specified property.
 * 
 * In case a get access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 * 
 * Note: the container parameter is needed to create property access operations 
 *       for association roles of interfaces within a class
 * 
 * Note: using of generateGetter methods secures generateGetterSetter logic
 * this method must be executed before createGetterSetterOperations for MClass (not yet
 * implemented; accessor sereotypes on MClass instances will be considered but not removed)
 */
MProperty emEnsureGetAccessOperation(MProperty this, MClassifier container) :
	!container.operation.exists( o|o.emIsGetAccessOperation(this) )
		? (
			container.createOperation( xmiGuid + "_get", asGetter() )
				.processOperation( visibility(), isStatic(), false, false )
				.ensureReturnParameterExistence( xmiGuid + "_getReturn", asAttribute() )
				.processParameter( null, "return", multiplicity.cloneMultiplicity() )
				.wireType( type )
				.ensureStereotypeAssignment( emGetStereotypeAssignment( prPrimitive() ))
				.operation
				.assignGetAccessOperationComment( this )
				.emEnsureAccessOperationIdentifier(	prGetAccessOperationIdentifier(), this )
		) : this ->
	this;

/**
 * Ensures the existence of a set access operation for the specified property.
 * 
 * In case a set access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 * 
 * Note: using of generateSetter methods secures generateGetterSetter logic
 * this method must be executed before createGetterSetterOperations for MClass (not yet
 * implemented; accessor sereotypes on MClass instances will be considered but not removed)
 * 
 * @TODO	check if in case of a multi-valued property, instead of a set...(collection type) operation and add/remove operation would be more appropriate
 */
MProperty emEnsureSetAccessOperation(MProperty this, MClassifier container) : 
	!container.operation.exists( o|o.emIsSetAccessOperation(this) )
		? (
			container.createOperation( xmiGuid + "_set", asSetter() )
				.processOperation( visibility(), isStatic(), false, false )
				.ensureParameterExistence( xmiGuid + "_setParam", asAttribute() )
				.processParameter( null, "in", multiplicity.cloneMultiplicity() )
				.wireType( type )
				.assignSetAccessOperationParameterComment( this )
				.ensureStereotypeAssignment( emGetStereotypeAssignment( prPrimitive() ))
				.operation
				.assignSetAccessOperationComment( this )
				.emEnsureAccessOperationIdentifier(	prSetAccessOperationIdentifier(), this )
		) : this ->
	this;

/**
 * Ensures the existence of an add access operation for the specified property.
 * 
 * In case an add access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 */
MProperty emEnsureAddAccessOperation(MProperty this, MClassifier container) :
	multiplicity.isMultiValued() && !container.operation.exists( o|o.emIsAddAccessOperation(this) )
		? (
			container.createOperation( xmiGuid + "_add", asAddPropertyAccessOperation() )
				.processOperation( visibility(), isStatic(), false, false )
				.ensureParameterExistence( xmiGuid + "_addParam", asAttribute() )
				.processParameter( null, "in", createMultiplicity( 0, 1 ) )
				.wireType( type )
				.assignAddAccessOperationParameterComment( this )
				.ensureStereotypeAssignment( emGetStereotypeAssignment( prPrimitive() ))
				.operation
				.assignAddAccessOperationComment( this )
				.emEnsureAccessOperationIdentifier(	prAddAccessOperationIdentifier(), this )
		) : this ->
	this;

/**
 * Ensures the existence of a remove access operation for the specified property.
 * 
 * In case a remove access operation is created it will be generated by the common operation template
 * with an operation body containing source code instead of a protected region.
 */
MProperty emEnsureRemoveAccessOperation(MProperty this, MClassifier container) :
	multiplicity.isMultiValued() && !container.operation.exists( o|o.emIsRemoveAccessOperation(this) )
		? (
			container.createOperation( xmiGuid + "_remove", asRemovePropertyAccessOperation() )
				.processOperation( visibility(), isStatic(), false, false )
				.ensureParameterExistence( xmiGuid + "_removeParam", asAttribute() )
				.processParameter( null, "in", createMultiplicity( 0, 1 ) )
				.wireType( type )
				.assignRemoveAccessOperationParameterComment( this )
				.ensureStereotypeAssignment( emGetStereotypeAssignment( prPrimitive() ))
				.operation
				.assignRemoveAccessOperationComment( this )
				.emEnsureAccessOperationIdentifier(	prRemoveAccessOperationIdentifier(), this )
		) : this ->
	this;


// - - operation modifiers - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

String visibility(MProperty this) :
	globalVarUsePropertyVisibilityForAccessors()
		? visibility
		: "public";

boolean isStatic(MProperty this) :
	metaType == MAttribute
		? ((MAttribute)this).static
		: false;


// - - checks for property access operations - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

boolean emIsPropertyAccessOperation(MOperation this) :
	classifier.allInitializableAssociationRoles().exists(
		p| emIsGetAccessOperation(p) || emIsSetAccessOperation(p) || emIsAddAccessOperation(p) || emIsRemoveAccessOperation(p)
	);

/**
 * Returns true if a get access operation for the specified property already exists, otherwise false.
 */
boolean emHasGetAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.emIsGetAccessOperation(this) );

/**
 * Returns true if the specified operation is a get access operation for the specified property, otherwise false.
 */
boolean emIsGetAccessOperation(MOperation this, MProperty prop) :
	name == prop.asGetter() && parameter.isEmpty && hasReturn() && return.type == prop.type;

/**
 * Returns true if the specified operation is a get access operation.
 */
boolean emIsGetAccessOperation(MOperation this) :
	emHasStereotypeAssignment( prGetAccessOperationIdentifier() );

/**
 * Returns true if a set access operation for the specified property already exists, otherwise false.
 */
boolean emHasSetAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.emIsSetAccessOperation(this) );

/**
 * Returns true if the specified operation is a set access operation for the specified property, otherwise false.
 */
boolean emIsSetAccessOperation(MOperation this, MProperty prop) :
	name == prop.asSetter() && !hasReturn() && parameter.size == 1 && parameter.first().type == prop.type;

/**
 * Returns true if the specified operation is a set access operation.
 */
boolean emIsSetAccessOperation(MOperation this) :
	emHasStereotypeAssignment( prSetAccessOperationIdentifier() );

/**
 * Returns true if an add access operation for the specified property already exists, otherwise false.
 */
boolean emHasAddAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.emIsAddAccessOperation(this) );

/**
 * Returns true if the specified operation is an add access operation for the specified property, otherwise false.
 */
boolean emIsAddAccessOperation(MOperation this, MProperty prop) :
	name == prop.asAddPropertyAccessOperation() && !hasReturn() && parameter.size == 1 && parameter.first().type == prop.type;

/**
 * Returns true if the specified operation is an add access operation.
 */
boolean emIsAddAccessOperation(MOperation this) :
	emHasStereotypeAssignment( prAddAccessOperationIdentifier() );

/**
 * Returns true if a remove access operation for the specified property already exists, otherwise false.
 */
boolean emHasRemoveAccessOperation(MProperty this) :
	classifier.operation.exists( o|o.emIsRemoveAccessOperation(this) );

/**
 * Returns true if the specified operation is a remove access operation for the specified property, otherwise false.
 */
boolean emIsRemoveAccessOperation(MOperation this, MProperty prop) :
	name == prop.asRemovePropertyAccessOperation() && !hasReturn() && parameter.size == 1 && parameter.first().type == prop.type;

/**
 * Returns true if the specified operation is a remove access operation.
 */
boolean emIsRemoveAccessOperation(MOperation this) :
	emHasStereotypeAssignment( prRemoveAccessOperationIdentifier() );


/**
 * Returns the get access operation for the specified property.
 */
MOperation emGetAccessOperation(MProperty this) :
	classifier.operation.selectFirst( o|o.emIsGetAccessOperation(this) );

/**
 * Returns the set access operation for the specified property.
 */
MOperation emSetAccessOperation(MProperty this) :
	classifier.operation.selectFirst( o|o.emIsSetAccessOperation(this) );


// - - stereotype to mark property access operations - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**
 * Returns the set access operation for the specified property.
 */
MElement emEnsureAccessOperationIdentifier(MElement this, String identifier, MProperty property) :
	ensureTaggedValueExistence(
		navModel()
			.ensureStereotypeExistence( identifier, identifier )
			.ensureTagExistence( prAccessForPropertyTagName(), prAccessForPropertyTagType() )
		, property
	).owningElement;

/**
 * Returns the identifier to generate get access operations.
 */
String prGetAccessOperationIdentifier() :
	"http://www.genesez.org/access/GetOperation";

/**
 * Returns the identifier to generate set access operations.
 */
String prSetAccessOperationIdentifier() :
	"http://www.genesez.org/access/SetOperation";

/**
 * Returns the identifier to generate add access operations.
 */
String prAddAccessOperationIdentifier() :
	"http://www.genesez.org/access/AddOperation";

/**
 * Returns the identifier to generate remove access operations.
 */
String prRemoveAccessOperationIdentifier() :
	"http://www.genesez.org/access/RemoveOperation";

/**
 * Returns the name of the tag to reference the property.
 */
String prAccessForPropertyTagName() :
	"property";

/**
 * Returns the type of the tag to reference the property.
 */
String prAccessForPropertyTagType() :
	"MProperty";


// - - comments for property access operations - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**
 * Assigns a comment to the get access operation.
 * If the property has comments, they are cloned to the get access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignGetAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultGetAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for get access operations of the specified property.
 */
String defaultGetAccessOperationComment(MProperty this) :
	"Returns the value of attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Returns a default comment text for get access operations of the specified property.
 */
String defaultGetAccessOperationComment(MAssociationRole this) :
	multiplicity.isSingleValued()
		? "Returns the linked object of association '<em><b>" + asAttribute() + "</b></em>'."
		: "Returns all linked objects of association '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a comment to the set access operation.
 * If the property has comments, they are cloned to the set access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignSetAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultSetAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for set access operations of the specified property.
 */
String defaultSetAccessOperationComment(MProperty this) :
	"Sets the value of attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Returns a default comment text for set access operations of the specified property.
 */
String defaultSetAccessOperationComment(MAssociationRole this) :
	multiplicity.isSingleValued()
		? "Establishes a link to the specified object for association '<em><b>" + asAttribute() + "</b></em>'."
		: "Establishes all links to the specified objects for association '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a default comment to the parameter of the set access operation.
 */
MParameter assignSetAccessOperationParameterComment(MParameter this, MProperty source) :
	createComment( xmiGuid + "_comment", "the value to set.").owningElement;

/**
 * Assigns a default comment to the parameter of the set access operation.
 */
MParameter assignSetAccessOperationParameterComment(MParameter this, MAssociationRole source) :
	createComment( xmiGuid + "_comment", "the object to associate.").owningElement;

/**
 * Assigns a comment to the add access operation.
 * If the property has comments, they are cloned to the add access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignAddAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultAddAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for add access operations of the specified property.
 */
String defaultAddAccessOperationComment(MProperty this) :
	"Adds the specified value to the attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Returns a default comment text for add access operations of the specified property.
 */
String defaultAddAccessOperationComment(MAssociationRole this) :
	"Establishes a link to the specified object for association '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a default comment to the parameter of the add access operation.
 */
MParameter assignAddAccessOperationParameterComment(MParameter this, MProperty source) :
	createComment( xmiGuid + "_comment", "the value to add.").owningElement;

/**
 * Assigns a default comment to the parameter of the add access operation.
 */
MParameter assignAddAccessOperationParameterComment(MParameter this, MAssociationRole source) :
	createComment( xmiGuid + "_comment", "the object to associate.").owningElement;

/**
 * Assigns a comment to the remove access operation.
 * If the property has comments, they are cloned to the remove access operation, else a default comment is set.
 * 
 * @return	the context object itself
 */
MOperation assignRemoveAccessOperationComment(MOperation this, MProperty source) :
	source.hasComment()
		? source.ownedComment.cloneComment( this )
		: createComment( xmiGuid + "_comment", source.defaultRemoveAccessOperationComment() ) ->
	this;

/**
 * Returns a default comment text for remove access operations of the specified property.
 */
String defaultRemoveAccessOperationComment(MProperty this) :
	"Removes the specified value from the attribute '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Returns a default comment text for remove access operations of the specified property.
 */
String defaultRemoveAccessOperationComment(MAssociationRole this) :
	"Removes the link to the specified specified object from association '<em><b>" + asAttribute() + "</b></em>'.";

/**
 * Assigns a default comment to the parameter of the remove access operation.
 */
MParameter assignRemoveAccessOperationParameterComment(MParameter this, MProperty source) :
	createComment( xmiGuid + "_comment", "the value to remove.").owningElement;

/**
 * Assigns a default comment to the parameter of the remove access operation.
 */
MParameter assignRemoveAccessOperationParameterComment(MParameter this, MAssociationRole source) :
	createComment( xmiGuid + "_comment", "the object to remove.").owningElement;
