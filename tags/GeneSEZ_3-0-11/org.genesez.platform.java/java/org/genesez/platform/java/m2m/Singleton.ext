/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides support for the singleton design pattern based on the stereotype «singleton».
 * 
 * Adds an attribute "instance" and a private constructor.
 * If constructors are available, the visibility is changed to "private".
 * Singleton class is marked as final because all constructors are private.
 * 
 * Note: getInstance operation is added in Xpand if not available
 * 
 * @author	andre pflueger
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::profile::AccessorStereotype;
extension org::genesez::metamodel::core::util::profile::GeneSEZProfile;
extension org::genesez::platform::java::m2m::Constructor;


/**
 * Performs model changes based on the stereotype «singleton» if applied.
 * 
 * @param	this	instance of MClass
 * @return	the class itself
 */
MClass singleton(MClass this) :
	this.emHasStereotypeAssignment("singleton")
		? (
			!this.property.exists(e|e.name.matches("instance"))
				? (
					//add static volatile attribute with no accessors
					ensureAttributeExistence(xmiGuid + ".instanceAttributeForSingleton", "instance")
						.processAttribute("", true, false)
						.processProperty( "private", false, createMultiplicity(1, 1) )
						.wireType( this )
						.emAssignGeneSezAccessorStereotype(false, false, false, false)
						.ensureStereotypeAssignment(
							navModel().ensureStereotypeExistence( prVolatileXmiGuid(), prVolatile() )
						)
				)
				: this ->
			//change visibility of all constructors to private
			//add a private constructor with no protected region
			//if no constructor exists
			this.operation.exists( o|o.isConstructor() )
				? this.operation.select( o|o.isConstructor() ).setVisibility("private")
				: ensureDefaultConstructor( "private" ) ->
			this.setFinal(true)
		)
		: this;
