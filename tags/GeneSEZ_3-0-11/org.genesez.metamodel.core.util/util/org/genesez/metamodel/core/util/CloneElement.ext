/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 *
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;


/**
 * Helper scripts to clone GeneSEZ Core meta model elements.
 * 
 * @author	Tobias Haubold <tobias.haubold@fh-zwickau.de> (maintainer)
 * @author	Nico Herbig <nico.herbig@fh-zwickau.de> (maintainer)
 */

extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::util::logging::Logging;


// -- Package -----------------------------------------------------------------------------------------------


// -- Type and Literal --------------------------------------------------------------------------------------


// -- Property ----------------------------------------------------------------------------------------------


// -- Operation and Parameter -------------------------------------------------------------------------------


/**
 * Clones an operation based one the specified source operation and ensures its classifier containment.
 * 
 * @return	The cloned operation.
 */
MOperation cloneOperation(MOperation source, MClassifier container) :
	// create a new operation, clone basic property values and set containment
	let clone = createOperation( container, source.cloneXmiGuid( container ), source.name ) :
		source.logTrace( "cloning: " + source.metaType + ": " ) ->
		// clone extended property values
		clone.processOperation( source.visibility, source.static, source.abstract, source.final ) ->
		// clone references
		clone.raisedException.addAll( source.raisedException ) ->
		// clone own containments
		source.parameter.cloneParameter( clone ) ->
		source.return != null
			? source.return.cloneReturnParameter( clone )
			: clone ->
		source.ownedComment.cloneComment( clone ) ->
		clone;
		

/**
 * Clones a parameter based one the specified source parameter and ensures its operation containment.
 * 
 * @return	The cloned parameter.
 */
MParameter cloneParameter(MParameter source, MOperation container) :
	// create a new parameter, clone basic property values and set containment
	let clone = createParameter( container, source.cloneXmiGuid( container ), source.name ) :
		source.logTrace( "cloning: " + source.metaType + ": " ) ->
		// clone extended property values
		clone.processParameter( source.defaultvalue, source.direction, source.multiplicity.cloneMultiplicity() ) ->
		// clone references
		clone.wireType( source.type ) ->
		// clone own containments
		source.ownedComment.cloneComment( clone ) ->
		clone;


/**
 * Clones a return parameter based one the specified source return parameter and ensures its operation containment.
 * 
 * @return	The cloned return parameter.
 */
MParameter cloneReturnParameter(MParameter source, MOperation container) :
	// create a new parameter, clone basic property values and set containment
	let clone = createReturnParameter( container, source.cloneXmiGuid( container ), source.name ) :
		source.logTrace( "cloning return: " + source.metaType + ": " ) ->
		// clone extended property values
		clone.processParameter( source.defaultvalue, source.direction, source.multiplicity.cloneMultiplicity() ) ->
		// clone references
		clone.wireType( source.type ) ->
		// clone own containments
		source.ownedComment.cloneComment( clone ) ->
		clone;


// -- Comment -----------------------------------------------------------------------------------------------


/**
 * Clones a comment based one the specified source comment and and ensures its element containment.
 * 
 * @return	The cloned comment.
 */
MComment cloneComment(MComment source, MElement container) :
	// create a new comment, clone basic property values and set containment
	let clone = createComment( container, source.cloneXmiGuid( container ), source.annotation ) :
		// clone own containments
		source.nestedComment.cloneComment( clone ) ->
		clone;


/**
 * Clones a comment based one the specified source comment and and ensures its comment containment.
 * 
 * @return	The cloned comment.
 */
MComment cloneComment(MComment source, MComment container) :
	// create a new comment, clone basic property values and set containment
	let clone = createComment( container, source.cloneXmiGuid( container ), source.annotation ) :
		// clone own containments
		source.nestedComment.cloneComment( clone ) ->
		clone;


// -- Data Types --------------------------------------------------------------------------------------------


/**
 * Clones a multiplicity based on the specified source multiplicity without containment.
 * 
 * @return	The cloned multiplicity without containment.
 */
MMultiplicity cloneMultiplicity(MMultiplicity source) :
	source.logTrace( "cloning: " + source.metaType + ": " ) ->
	createMultiplicity( source.lowerBound, source.upperBound, source.unique, source.ordered );


// -- Extension Mechanism - Meta Data -----------------------------------------------------------------------


/**
 * Clones all meta data of the specified source element to the specified destination element, i.e.
 * all stereotype assignments and all tagged values of stereotype assignments.
 * 
 * Note: Despite the fact cloneTaggedValues() clones stereotype assignments, it does only clone stereotypes
 *       assignments having tagged values, not those without tagged values.
 * 
 * @param 	source		The source element.
 * @param 	destination	The destination element.
 * @return	The specified destination element. 
 */
MElement cloneMetaData(MElement source, MElement destination) :
	source.cloneStereotypeAssignments( destination ) ->
	source.cloneTaggedValues( destination ) ->
	destination;

/**
 * Clones the meta data of the specified stereotypes of the source element to the specified destination element, i.e.
 * all stereotype assignments and all tagged values of stereotype assignments.
 * 
 * Note: Despite the fact cloneTaggedValues() clones stereotype assignments, it does only clone stereotypes
 *       assignments having tagged values, not those without tagged values.
 * 
 * @param 	source		The source element.
 * @param 	destination	The destination element.
 * @param 	stereotypes	A list of stereotype names restricting the meta data to clone.
 * @return	The specified destination element. 
 */
MElement cloneMetaData(MElement source, MElement destination, List[String] stereotypes) :
	source.stereotype.select( s|stereotypes.contains(s.name) ).collect( st|
		source.cloneStereotypeAssignments( destination, st.name ) ->
		source.cloneTaggedValues( destination, st.name )
	) ->
	destination;


// -- Extension Mechanism - Stereotype Assignments ----------------------------------------------------------


/**
 * Clones all stereotype assignments from the specified source element to the specified destination element.
 *
 * @param 	source		The source element.
 * @param 	destination	The destination element.
 * @return	The specified destination element. 
 */
MElement cloneStereotypeAssignments(MElement source, MElement destination) :
	source.stereotype.collect( s | 
		destination.ensureStereotypeAssignment( s ) 
		) ->
	destination;

/**
 * Clones the specified stereotype assignment if available.
 * 
 * @param 	source		The source element.
 * @param 	destination	The destination element.
 * @param 	stereotype	The stereotype name of the stereotype assignment to clone.
 * @return	The specified destination element. 
 */
MElement cloneStereotypeAssignments(MElement source, MElement destination, String stereotype) :
	source.stereotype.select( s|s.name == stereotype ).collect( s | 
		destination.ensureStereotypeAssignment( s ) 
		) ->
	destination;


// -- Extension Mechanism - Tagged Values -------------------------------------------------------------------


/**
 * Clones all tagged values from the specified source element to the specified destination element and
 * ensures the stereotype assignment to the destination element too.
 * 
 * @param 	source		The source element.
 * @param 	destination	The destination element.
 * @return	The specified destination element. 
 */
MElement cloneTaggedValues(MElement source, MElement destination) :
	source.taggedValue.collect( tv | 
		tv.value != null 
			? destination.ensureTaggedValueExistence( tv.tag, tv.value ) 
			: destination.ensureTaggedValueExistence( tv.tag, tv.valueReference) 
		) ->
	destination;

/**
 * Clones all tagged values of the specified stereotype assignment if available.
 * 
 * @param 	source		The source element.
 * @param 	destination	The destination element.
 * @param 	stereotype	The stereotype all tagged values belonging to.
 * @return	The specified destination element. 
 */
MElement cloneTaggedValues(MElement source, MElement destination, String stereotype) :
	source.taggedValue.select( tv|tv.owningElement.stereotype.name == stereotype ).collect( tv | 
		tv.value != null 
			? destination.ensureTaggedValueExistence( tv.tag, tv.value ) 
			: destination.ensureTaggedValueExistence( tv.tag, tv.valueReference) 
		) ->
	destination;


// -- Private Functionality ---------------------------------------------------------------------------------


String cloneXmiGuid(MElement elem, MElement container) :
	container.xmiGuid + "_" + elem.xmiGuid;
	

String cloneXmiGuid(MComment comment, MElement container) :
	container.xmiGuid + "_" + comment.xmiGuid;


String cloneXmiGuid(MComment comment, MComment container) :
	container.xmiGuid + "_" + comment.xmiGuid;
