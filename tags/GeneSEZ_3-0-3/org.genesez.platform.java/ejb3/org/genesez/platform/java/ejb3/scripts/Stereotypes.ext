import gcore;

/**
 * 	functions for creating new MStereotypes, MTags, MTaggedValues and for changing the value
 *	of an MTaggedValue 
 * 
 * 
 * @author	andre pflueger
 * @date	2008-09-05
 */

extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::NavigateElement;

/**
 *	function to add an "ejb3SessionBean" stereotype to a MClassifier
 *	default values are not set by this function!
 *
 *	@param		this						instance of MClassifier
 *	@param		name						name of the session bean
 *	@param		description					description for the session bean
 *	@param		mappedName					mapped name of the session bean
 *	@param		stateful					type of the session bean (stateless or stateful)
 *	@param		entityManagerType			type of the entity manager
 *	@param		entityManagerAccessType		access type of the entity manager
 *
 */
Void addSessionBeanStereotype(MClassifier this, String name, String description, String mappedName, Boolean stateful, String entityManagerType, String entityManagerAccessType) :
	let s = makeSessionBeanStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "name", "String"), name) ->
		createTaggedValue(this, createTag(s, "description", "String"), description) ->
		createTaggedValue(this, createTag(s, "mappedName", "String"), mappedName) ->
		createTaggedValue(this, createTag(s, "stateful", "boolean"), stateful.toString()) ->
		createTaggedValue(this, createTag(s, "entityManager", "ejb3EntityManagerType"), entityManagerType) ->
		createTaggedValue(this, createTag(s, "entityManagerAccess", "ejb3EntityManagerAccessType"), entityManagerAccessType);

/**
 *	function to create an "ejb3SessionBean" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MClassifier
 *
 */
MStereotype makeSessionBeanStereotype(MClassifier container) :
	let s = createStereotype(container.navPackage().navModel(), "ejb3SessionBean", "ejb3SessionBean") :
		s.property.add(createTag(s, "name", "String")) ->
		s.property.add(createTag(s, "description", "String")) ->
		s.property.add(createTag(s, "mappedName", "String")) ->
		s.property.add(createTag(s, "stateful", "boolean")) ->
		s.property.add(createTag(s, "entityManager", "ejb3EntityManagerType")) ->
		s.property.add(createTag(s, "entityManagerAccess", "ejb3EntityManagerAccessType")) ->
		s;

/**
 *	function to add an "ejb3Remote" stereotype to a MClassifier
 *	default values are not set by this function!
 *
 *	@param		this		instance of MClassifier
 *	@param		name		name of the remote interface
 *
 */
Void addRemoteStereotype(MClassifier this, String name) :
	let s = makeRemoteStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "name", "String"), name);

/**
 *	function to create an "ejb3Remote" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MClassifier
 *
 */
MStereotype makeRemoteStereotype(MClassifier container) :
	let s = createStereotype(container.navPackage().navModel(), "ejb3Remote", "ejb3Remote") :
		s.property.add(createTag(s, "name", "String")) ->
		s;

/**
 *	function to add an "ejb3Local" stereotype to a MClassifier
 *	default values are not set by this function!
 *
 *	@param		this		instance of MClassifier
 *	@param		name		name of the local interface
 *
 */
Void addLocalStereotype(MClassifier this, String name) :
	let s = makeLocalStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "name", "String"), name);

/**
 *	function to create an "ejb3Local" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MClassifier
 *
 */
MStereotype makeLocalStereotype(MClassifier container) :
	let s = createStereotype(container.navPackage().navModel(), "ejb3Local", "ejb3Local") :
		s.property.add(createTag(s, "name", "String")) ->
		s;

/**
 *	function to add an "ejb3Timer" stereotype to a MOperation
 *	default values are not set by this function!
 *
 *	@param		this			instance of MOperation
 *
 */
Void addTimerStereotype(MOperation this) :
	let s = makeTimerStereotype(this) :
		this.stereotype.add(s);

/**
 *	function to create an "ejb3Timer" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to the stereotype list of the MOperation, not to 
 *	anyStereotype list of MModel
 *
 *	@param		container		instance of MOperation
 *
 */
MStereotype makeTimerStereotype(MOperation this) :
	navModel().ensureStereotypeExistence("ejb3Timer", "ejb3Timer");

/**
 *	function to add an "ejb3ActivationConfigProperty" stereotype to a MClass
 *	default values are not set by this function!
 *
 *	@param		this			instance of MClass
 *	@param		names			names of the properties
 *	@param		values			values of the properties
 *
 */
Void addActivationConfigPropertyStereotype(MClass this, List[String] names, List[String] values) :
	let s = makeActivationConfigPropertyStereotype(this) :
		this.stereotype.add(s) ->
		names.collect(e | createTaggedValue(this, createTag(s, "propertyName", "String"), e)) ->
		values.collect(e | createTaggedValue(this, createTag(s, "propertyValue", "String"), e));

/**
 *	function to create an "ejb3ActivationConfigProperty" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MClass
 *
 */
MStereotype makeActivationConfigPropertyStereotype(MClass container) :
	let s = createStereotype(container.navPackage().navModel(), "ejb3ActivationConfigProperty", "ejb3ActivationConfigProperty") :
		s.property.add(createTag(s, "propertyName", "String")) ->
		s.property.add(createTag(s, "propertyValue", "String"))->
		s;

/**
 *	function to add an "ejb3Resource" stereotype to a MAttribute
 *	default values are not set by this function!
 *
 *	@param		this			instance of MAttribute
 *	@param		name			JNDI name of the resource
 *	@param		mappedName		product specific name that this resource should be mapped to.
 *	@param		description		description for resource
 *	@param		shareable		Indicates whether this resource can be shared between this component and other components
 *
 */
Void addResourceStereotype(MAttribute this, String name, String mappedName, String description, boolean shareable) :
	let s = makeResourceStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "name", "String"), name) ->
		createTaggedValue(this, createTag(s, "mappedName", "String"), mappedName) ->
		createTaggedValue(this, createTag(s, "description", "String"), description) ->
		createTaggedValue(this, createTag(s, "shareable", "boolean"), shareable.toString());

/**
 *	function to create an "ejb3Resource" stereotype
 *	default values are not set by this function!
 *	function adds MStereotype only to anyStereotype list of MModel
 *
 *	@param		container		instance of MAttribute
 *
 */
MStereotype makeResourceStereotype(MAttribute container) :
	let s = createStereotype(container.classifier.navPackage().navModel(), "ejb3Resource", "ejb3Resource") :
		s.property.add(createTag(s, "name", "String")) ->
		s.property.add(createTag(s, "description", "String")) ->
		s.property.add(createTag(s, "mappedName", "String")) ->
		s.property.add(createTag(s, "shareable", "boolean")) ->
		s;

/**
 *	function to add an "ejb3EJB" stereotype to a MAttribute
 *	default values are not set by this function!
 *
 *	@param		this			instance of a MAttribute
 *	@param		name			
 *	@param		beanInterface	
 *	@param		beanName		
 *	@param		mappedName		
 *
 */
Void addEJBStereotype(MAttribute this, String name, String beanInterface, String beanName, String description, String mappedName) :
	let s = makeEJBStereotype(this) :
		this.stereotype.add(s) ->
		createTaggedValue(this, createTag(s, "name", "String"), name) ->
		createTaggedValue(this, createTag(s, "beanInterface", "String"), beanInterface) ->
		createTaggedValue(this, createTag(s, "beanName", "String"), beanName) ->
		createTaggedValue(this, createTag(s, "description", "String"), description) ->
		createTaggedValue(this, createTag(s, "mappedName", "String"), mappedName);
		
/**
 *	function to create an "ejb3EJB" stereotype
 *	function adds MStereotype only to anyStereotype-list of MModel
 *
 *	@param		container	element which is the container for the new EJBStereotype
 *
 */
MStereotype makeEJBStereotype(MAttribute container) :
	let s = createStereotype(container.classifier.navPackage().navModel(), "ejb3EJB", "ejb3EJB") :
		s.property.add(createTag(s, "name", "String")) ->
		s.property.add(createTag(s, "beanInterface", "String")) ->
		s.property.add(createTag(s, "beanName", "String")) ->
		s.property.add(createTag(s, "description", "String")) ->
		s.property.add(createTag(s, "mappedName", "String")) ->
		s;	

/**
 *	function to create a MTag (i.e. for use with MTaggedvalue)
 *
 *	@param		name				name of the MTag
 *	@param		type				type of the value (i.e. the value in MTaggedValue)
 *	[@param		stereotypeName		name of the containing stereotype]
 *
 */
create MTag makeTag(String name, String type) :
	setName(name) ->
	setType(type);

/**
 *	function to create a MTaggedValue
 *	MTaggedvalue consists of value and a tag which contains the name of the 
 *	MTaggedValue and the data type of the value
 *
 *	@param		value	value of the MTaggedvalue
 *	@param		tag		containing MTag to this value
 *
 */
create MTaggedValue makeTaggedValue(String value, MTag tag) :
	setValue(value) ->
	setTag(tag);