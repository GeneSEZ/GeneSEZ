/*
 * (c) GeneSEZ Research Group
 * All rights reserved.
 * 
 * Licensed according to GeneSEZ License Terms <http://www.genesez.org/en/license>
 */
import gcore;

/**
 * Provides utility functions for the transformation of workflow components and transformables, including.
 * - utility functions for transformables
 * - creation of operations returning default values of workflow parameters (default value operations)
 * - useful checks for model elements involving the workflow profile
 * - workflow profile settings (stereotype names, ...)
 * 
 * @author	tobias haubold <toh@fh-zwickau.de>
 */
extension org::genesez::metamodel::core::util::AccessHelper;
extension org::genesez::metamodel::core::util::ExtensionMechanism;
extension org::genesez::metamodel::core::util::m2m::CreateElement;


// -- utility functions for 'transformables'


/**
 * Returns true if a generalization provides a 'validate()' method which must be called, otherwise false.
 */
boolean needValidateBaseClass(MClassifier this) :
	allGeneralizations().typeSelect(MClassifier).operation.exists(
		o|o.name == "validate" && o.parameter.isEmpty && o.hasReturn() && o.return.type.metaType == MExternal && ((MExternal)o.return.type).name == "Boolean"
	);

/**
 * Returns true if a generalization provides a 'getParameter()' method which must be called, otherwise false.
 */
boolean needParameterBaseClass(MClassifier this) :
	allGeneralizations().typeSelect(MClassifier).operation.exists(
	o|o.name == "getParameter" && o.parameter.isEmpty && o.hasReturn() && o.return.type.metaType == MExternal && ((MExternal)o.return.type).name == "Parameter"
);


// -- utility functions to create operations returning default values - - - - - - - - - - - - - - -


/**
 * Returns true if the specified operation has the stereotype 'default', otherwise false.
 */
boolean isDefault(MOperation this) :
	emHasStereotype( prStereotypeDefault() );

/**
 * Returns true if an attribute specifying the default value exists for the specified operation, otherwise false.
 */
boolean hasAttribute(MOperation this) :
	classifier.property.typeSelect(MAttribute).exists( p|p.name == asAttributeName() );

/**
 * Returns true if an operation returning the default value exists for the specified attribute, otherwise false.
 */
boolean hasDefaultOperation(MAttribute this) :
	classifier.operation.exists( o|o.isDefaultOperation(this) );

/**
 * Returns true if the specified operation returns the default value of the specified attribute, otherwise false.
 */
boolean isDefaultOperation(MOperation this, MAttribute attrib) :
	name == ( attrib.asDefaultOperation() );


/**
 * Returns the name of the attribute of the specified operation.
 */
String asAttributeName(MOperation this) : name.subString( defaultOperationPrefix().length, name.length ).toFirstLower();

/**
 * Returns the name of the get access default value operation.
 */
String asGetAccess(MOperation this) : "get" + asAttributeName().toFirstUpper();

/**
 * Returns the name of the set access default value operation.
 */
String asSetAccess(MOperation this) : "set" + asAttributeName().toFirstUpper();

/**
 * Returns the name of the add access default value operation.
 */
String asAddAccess(MOperation this) : "add" + asAttributeName().toFirstUpper();

/**
 * Returns the name of the default value operation for the specified attribute.
 */
String asDefaultOperation(MAttribute this) : defaultOperationPrefix() + name.toFirstUpper();

/**
 * Returns the prefix of the default value operation.
 */
String defaultOperationPrefix() : "getDefault";


// -- check functions - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


/**
 * Returns true if the property is a mandatory parameter, otherwise false (that means optional parameter).
 */
boolean isMandatoryParameter(MAttribute this) :
	emHasStereotype("parameter") && emHasOwningTaggedValues("parameter", "isRequired")
		? emGetTaggedBooleanValue("parameter", "isRequired")
		: false;

/**
 * Returns true if the property is a parameter of a transformable, otherwise false.
 */
boolean isTransformationParameter(MProperty this) :
	isParameter() && emHasTaggedValue( prStereotypeParameter(), prTagTransformationParameter(), "true" );

/**
 * Returns true if the property is a workflow parameter, otherwise false.
 */
boolean isParameter(MProperty this) :
	metaType == MAttribute && emHasStereotype( prStereotypeParameter() );

/**
 * Returns true if the property provides a new default value, otherwise false.
 */
boolean isDefault(MProperty this) :
	metaType == MAttribute && emHasStereotype( prStereotypeDefault() );


// -- workflow profile related - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


/**
 * Ensures the existence of the stereotype 'default' and returns it.
 */
MStereotype emEnsureDefaultStereotype(MModel this) :
	ensureStereotypeExistence( prStereotypeDefault(), prStereotypeDefault() )
		.ensureTagExistence( prTagDefaultParameter(), "String" )
		.stereotype;

/**
 * Returns the name of the stereotype 'parameter'.
 */
String prStereotypeParameter() : "parameter";

/**
 * Returns the name of the tag 'isTransformationParameter' of stereotype 'parameter'.
 */
String prTagTransformationParameter() : "isTransformationParameter";
/**
 * Returns the name of the tag 'workflowInclusion' of stereotype 'parameter'.
 */
String prTagWorkflowInclusion() : "workflowInclusion";

/**
 * Returns the enum literal 'always' to be used for the tag 'workflowInclusion'.
 */
String prTvEnumLiteralAlways() : "ALWAYS";

/**
 * Returns the enum literal 'when needed' to be used for the tag 'workflowInclusion'.
 */
String prTvEnumLiteralWhenNeeded() : "WHEN_NEEDED";

/**
 * Returns the name of the stereotype 'default'.
 */
String prStereotypeDefault() : "default";

/**
 * Returns the name of the tag 'parameter' of stereotype 'default'.
 */
String prTagDefaultParameter() : "parameter";
