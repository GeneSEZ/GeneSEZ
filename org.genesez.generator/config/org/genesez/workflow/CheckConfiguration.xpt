
«IMPORT gcore»

«EXTENSION org::genesez::workflow::Utility»
«EXTENSION org::genesez::platform::common::AccessHelper»
«EXTENSION org::genesez::platform::common::Conversion»
«EXTENSION org::genesez::platform::java::scripts::Naming»
«EXTENSION org::genesez::util::logging::Logging»

«AROUND org::genesez::platform::java::java5::templates::Attribute::_Declaration FOR MAttribute -»
	«IF !isDefaultOverride() -»
		«targetDef.proceed() -»
	«ENDIF -»
«ENDAROUND»

«AROUND org::genesez::platform::java::java5::templates::Attribute::_MultiValuedInitialization FOR MAttribute -»
	«IF !isDefaultOverride() -»
		«targetDef.proceed() -»
	«ENDIF -»
«ENDAROUND»

«AROUND org::genesez::platform::java::java5::templates::Attribute::_InitializationBlock FOR MClassifier -»
	«EXPAND DefaultOverride -»
«ENDAROUND»

«DEFINE DefaultOverride FOR MClassifier -»
		«IF property.exists( p|p.isDefaultOverride() ) -»
		
		// override default values of workflow parameters
		«FOREACH property.typeSelect(MAttribute).select( p|p.isDefaultOverride() ) AS p -»
			«EXPAND DefaultOverride( parameterForDefault( this, p ) ) FOR p -»
		«ENDFOREACH -»
		«ENDIF -»
«ENDDEFINE»

«DEFINE DefaultOverride(MAttribute base) FOR MAttribute -»
	«IF base.isSingleValuedType() -»
		«base.asSetter()»(«defaultvalue»);
	«ELSE -»
		«IF isSingleValuedType() -»
		«base.asAddPropertyAccessOperation()»(«defaultvalue»);
		«ELSE -»
		«FOREACH defaultvalue.toList() AS v -»
		«base.asAddPropertyAccessOperation()»(«v»);
		«ENDFOREACH -»
		«ENDIF -»
	«ENDIF -»
«ENDDEFINE»


«AROUND org::genesez::platform::java::java5::templates::Operation::_ImplementationBody FOR MOperation -»
«IF (name == "checkConfiguration") && ( classifier.property.exists( p|p.isDefaultOverride() || p.isVariable() ) ) -»
	«EXPAND CheckConfiguration -»
«ELSE -»
	«targetDef.proceed() -»
«ENDIF -»
«ENDAROUND»

«DEFINE CheckConfiguration FOR MOperation -»
		«PROTECT CSTART '/* ' CEND ' */' ID ("java.implementation." + xmiGuid)»
		«IF classifier.property.exists( p|p.isVariable() ) -»
		// add workflow parameter for transformation variables as global variables
		«EXPAND Variable FOREACH classifier.property.select( p|p.isVariable() ) -»
		«ENDIF -»
		// delegate to base class
		super.checkConfiguration(issues);
		«ENDPROTECT»
«ENDDEFINE»

«DEFINE Variable FOR MProperty -»
	«IF isSingleValuedType() -»
		addGlobalVarDef("«name»", «asAttribute()»);
	«ELSE -»
		addGlobalVarDef("«name»", listToString(«asAttribute()»));
	«ENDIF -»
«ENDDEFINE»
